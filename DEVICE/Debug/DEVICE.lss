
DEVICE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00003f3a  00003fce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080007e  0080007e  00003fec  2**0
                  ALLOC
  3 .stab         0000399c  00000000  00000000  00003fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001142  00000000  00000000  00007988  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a9c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b8ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c65c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ca49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__vector_3>
      10:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__vector_6>
      1c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__vector_7>
      20:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_8>
      24:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <main>
      8a:	0c 94 9b 1f 	jmp	0x3f36	; 0x3f36 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_9>:
static volatile void (*T2_callBack_Ptr)(void) = NULL;

                                       /*ISR for timer 0*/

ISR(TIMER0_OVF_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(T0_callBack_Ptr != NULL)
     b70:	80 91 7e 00 	lds	r24, 0x007E
     b74:	90 91 7f 00 	lds	r25, 0x007F
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_9+0x40>
	{

		(*T0_callBack_Ptr)();// calling the function from the main using pointer to function
     b7c:	e0 91 7e 00 	lds	r30, 0x007E
     b80:	f0 91 7f 00 	lds	r31, 0x007F
     b84:	09 95       	icall
	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_19>:

ISR(TIMER0_COMP_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if(T0_callBack_Ptr != NULL)
     bd6:	80 91 7e 00 	lds	r24, 0x007E
     bda:	90 91 7f 00 	lds	r25, 0x007F
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_19+0x40>
	{

		(*T0_callBack_Ptr)();// calling the function from the main using pointer to function
     be2:	e0 91 7e 00 	lds	r30, 0x007E
     be6:	f0 91 7f 00 	lds	r31, 0x007F
     bea:	09 95       	icall
	}
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <__vector_8>:


                                     /*ISR for timer 1*/

ISR(TIMER1_OVF_vect)
{
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
	if(T1_callBack_Ptr != NULL)
     c3c:	80 91 80 00 	lds	r24, 0x0080
     c40:	90 91 81 00 	lds	r25, 0x0081
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	29 f0       	breq	.+10     	; 0xc52 <__vector_8+0x40>
	{

		(*T1_callBack_Ptr)(); // calling the function from the main using pointer to function
     c48:	e0 91 80 00 	lds	r30, 0x0080
     c4c:	f0 91 81 00 	lds	r31, 0x0081
     c50:	09 95       	icall
	}
}
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	bf 91       	pop	r27
     c5c:	af 91       	pop	r26
     c5e:	9f 91       	pop	r25
     c60:	8f 91       	pop	r24
     c62:	7f 91       	pop	r23
     c64:	6f 91       	pop	r22
     c66:	5f 91       	pop	r21
     c68:	4f 91       	pop	r20
     c6a:	3f 91       	pop	r19
     c6c:	2f 91       	pop	r18
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
     c78:	1f 92       	push	r1
     c7a:	0f 92       	push	r0
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	0f 92       	push	r0
     c80:	11 24       	eor	r1, r1
     c82:	2f 93       	push	r18
     c84:	3f 93       	push	r19
     c86:	4f 93       	push	r20
     c88:	5f 93       	push	r21
     c8a:	6f 93       	push	r22
     c8c:	7f 93       	push	r23
     c8e:	8f 93       	push	r24
     c90:	9f 93       	push	r25
     c92:	af 93       	push	r26
     c94:	bf 93       	push	r27
     c96:	ef 93       	push	r30
     c98:	ff 93       	push	r31
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	if(T1_callBack_Ptr != NULL)
     ca2:	80 91 80 00 	lds	r24, 0x0080
     ca6:	90 91 81 00 	lds	r25, 0x0081
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	29 f0       	breq	.+10     	; 0xcb8 <__vector_6+0x40>
	{

		(*T1_callBack_Ptr)(); // calling the function from the main using pointer to function
     cae:	e0 91 80 00 	lds	r30, 0x0080
     cb2:	f0 91 81 00 	lds	r31, 0x0081
     cb6:	09 95       	icall
	}
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	bf 91       	pop	r27
     cc2:	af 91       	pop	r26
     cc4:	9f 91       	pop	r25
     cc6:	8f 91       	pop	r24
     cc8:	7f 91       	pop	r23
     cca:	6f 91       	pop	r22
     ccc:	5f 91       	pop	r21
     cce:	4f 91       	pop	r20
     cd0:	3f 91       	pop	r19
     cd2:	2f 91       	pop	r18
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
	if(T1_callBack_Ptr != NULL)
     d08:	80 91 80 00 	lds	r24, 0x0080
     d0c:	90 91 81 00 	lds	r25, 0x0081
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	29 f0       	breq	.+10     	; 0xd1e <__vector_7+0x40>
	{

		(*T1_callBack_Ptr)(); // calling the function from the main using pointer to function
     d14:	e0 91 80 00 	lds	r30, 0x0080
     d18:	f0 91 81 00 	lds	r31, 0x0081
     d1c:	09 95       	icall
	}
}
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	ff 91       	pop	r31
     d24:	ef 91       	pop	r30
     d26:	bf 91       	pop	r27
     d28:	af 91       	pop	r26
     d2a:	9f 91       	pop	r25
     d2c:	8f 91       	pop	r24
     d2e:	7f 91       	pop	r23
     d30:	6f 91       	pop	r22
     d32:	5f 91       	pop	r21
     d34:	4f 91       	pop	r20
     d36:	3f 91       	pop	r19
     d38:	2f 91       	pop	r18
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	1f 90       	pop	r1
     d42:	18 95       	reti

00000d44 <__vector_4>:


                                     /*ISR for timer 2*/
ISR(TIMER2_OVF_vect)
{
     d44:	1f 92       	push	r1
     d46:	0f 92       	push	r0
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	ef 93       	push	r30
     d64:	ff 93       	push	r31
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
	if(T2_callBack_Ptr != NULL)
     d6e:	80 91 82 00 	lds	r24, 0x0082
     d72:	90 91 83 00 	lds	r25, 0x0083
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	29 f0       	breq	.+10     	; 0xd84 <__vector_4+0x40>
	{

		(*T2_callBack_Ptr)(); //calling the function from the main using pointer to function
     d7a:	e0 91 82 00 	lds	r30, 0x0082
     d7e:	f0 91 83 00 	lds	r31, 0x0083
     d82:	09 95       	icall
	}
}
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <__vector_3>:

ISR(TIMER2_COMP_vect)
{
     daa:	1f 92       	push	r1
     dac:	0f 92       	push	r0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	2f 93       	push	r18
     db6:	3f 93       	push	r19
     db8:	4f 93       	push	r20
     dba:	5f 93       	push	r21
     dbc:	6f 93       	push	r22
     dbe:	7f 93       	push	r23
     dc0:	8f 93       	push	r24
     dc2:	9f 93       	push	r25
     dc4:	af 93       	push	r26
     dc6:	bf 93       	push	r27
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
	if(T2_callBack_Ptr != NULL)
     dd4:	80 91 82 00 	lds	r24, 0x0082
     dd8:	90 91 83 00 	lds	r25, 0x0083
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	29 f0       	breq	.+10     	; 0xdea <__vector_3+0x40>
	{

		(*T2_callBack_Ptr)(); //calling the function from the main using pointer to function
     de0:	e0 91 82 00 	lds	r30, 0x0082
     de4:	f0 91 83 00 	lds	r31, 0x0083
     de8:	09 95       	icall
	}
}
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	ff 91       	pop	r31
     df0:	ef 91       	pop	r30
     df2:	bf 91       	pop	r27
     df4:	af 91       	pop	r26
     df6:	9f 91       	pop	r25
     df8:	8f 91       	pop	r24
     dfa:	7f 91       	pop	r23
     dfc:	6f 91       	pop	r22
     dfe:	5f 91       	pop	r21
     e00:	4f 91       	pop	r20
     e02:	3f 91       	pop	r19
     e04:	2f 91       	pop	r18
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <TimerSetCallBack>:
 ***************************************************************************************************/

       /*function to take a pointer of the needed function in main and pass it to the ISR function*/

void TimerSetCallBack(Timer_Type timer_type,  void(*Function_ptr)(void))
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <TimerSetCallBack+0x6>
     e16:	0f 92       	push	r0
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	7b 83       	std	Y+3, r23	; 0x03
     e20:	6a 83       	std	Y+2, r22	; 0x02
if(timer_type==Timer_0){T0_callBack_Ptr = Function_ptr;}
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	88 23       	and	r24, r24
     e26:	39 f4       	brne	.+14     	; 0xe36 <TimerSetCallBack+0x26>
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	9b 81       	ldd	r25, Y+3	; 0x03
     e2c:	90 93 7f 00 	sts	0x007F, r25
     e30:	80 93 7e 00 	sts	0x007E, r24
     e34:	13 c0       	rjmp	.+38     	; 0xe5c <TimerSetCallBack+0x4c>
else if(timer_type==Timer_1){T1_callBack_Ptr = Function_ptr;}
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	39 f4       	brne	.+14     	; 0xe4a <TimerSetCallBack+0x3a>
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	9b 81       	ldd	r25, Y+3	; 0x03
     e40:	90 93 81 00 	sts	0x0081, r25
     e44:	80 93 80 00 	sts	0x0080, r24
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <TimerSetCallBack+0x4c>
else if(timer_type==Timer_2){T2_callBack_Ptr = Function_ptr;}// or we will use just else
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	31 f4       	brne	.+12     	; 0xe5c <TimerSetCallBack+0x4c>
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	9b 81       	ldd	r25, Y+3	; 0x03
     e54:	90 93 83 00 	sts	0x0083, r25
     e58:	80 93 82 00 	sts	0x0082, r24
}
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <TimerInit>:
 ***************************************************************************************************/


         /*function to set the initial values for any timer type*/

void TimerInit(const Timer_Configuration * Configuration_Ptr){
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <TimerInit+0x6>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01

	if(Configuration_Ptr->timer_type==Timer_0){
     e78:	e9 81       	ldd	r30, Y+1	; 0x01
     e7a:	fa 81       	ldd	r31, Y+2	; 0x02
     e7c:	84 81       	ldd	r24, Z+4	; 0x04
     e7e:	88 23       	and	r24, r24
     e80:	09 f0       	breq	.+2      	; 0xe84 <TimerInit+0x1c>
     e82:	a2 c0       	rjmp	.+324    	; 0xfc8 <TimerInit+0x160>

		TimerDeInit(Timer_0);// reset all registers
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	0e 94 18 0a 	call	0x1430	; 0x1430 <TimerDeInit>
		TCNT0 = (Configuration_Ptr->timer_Initial_Value) & 0xFF;
     e8a:	a2 e5       	ldi	r26, 0x52	; 82
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e9 81       	ldd	r30, Y+1	; 0x01
     e90:	fa 81       	ldd	r31, Y+2	; 0x02
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	8c 93       	st	X, r24
		TCCR0 = (TCCR0  & CLEAR_CLOCK_VALUE) | (Configuration_Ptr->timer_clk);
     e98:	a3 e5       	ldi	r26, 0x53	; 83
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e3 e5       	ldi	r30, 0x53	; 83
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	98 2f       	mov	r25, r24
     ea4:	98 7f       	andi	r25, 0xF8	; 248
     ea6:	e9 81       	ldd	r30, Y+1	; 0x01
     ea8:	fa 81       	ldd	r31, Y+2	; 0x02
     eaa:	85 81       	ldd	r24, Z+5	; 0x05
     eac:	89 2b       	or	r24, r25
     eae:	8c 93       	st	X, r24
		TCCR0  = CLEAR_BIT(TCCR0 ,  COM00);
     eb0:	23 e5       	ldi	r18, 0x53	; 83
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	a3 e5       	ldi	r26, 0x53	; 83
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e3 e5       	ldi	r30, 0x53	; 83
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 7e       	andi	r24, 0xEF	; 239
     ec0:	8c 93       	st	X, r24
     ec2:	8c 91       	ld	r24, X
     ec4:	f9 01       	movw	r30, r18
     ec6:	80 83       	st	Z, r24
		TCCR0  = CLEAR_BIT(TCCR0 ,  COM01);
     ec8:	23 e5       	ldi	r18, 0x53	; 83
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	a3 e5       	ldi	r26, 0x53	; 83
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e3 e5       	ldi	r30, 0x53	; 83
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8f 7d       	andi	r24, 0xDF	; 223
     ed8:	8c 93       	st	X, r24
     eda:	8c 91       	ld	r24, X
     edc:	f9 01       	movw	r30, r18
     ede:	80 83       	st	Z, r24

        if(Configuration_Ptr->timer_mode== Overflow)
     ee0:	e9 81       	ldd	r30, Y+1	; 0x01
     ee2:	fa 81       	ldd	r31, Y+2	; 0x02
     ee4:	86 81       	ldd	r24, Z+6	; 0x06
     ee6:	88 23       	and	r24, r24
     ee8:	89 f5       	brne	.+98     	; 0xf4c <TimerInit+0xe4>
        {
        	TCCR0  = CLEAR_BIT(TCCR0 , WGM00);
     eea:	23 e5       	ldi	r18, 0x53	; 83
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	a3 e5       	ldi	r26, 0x53	; 83
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e3 e5       	ldi	r30, 0x53	; 83
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 7b       	andi	r24, 0xBF	; 191
     efa:	8c 93       	st	X, r24
     efc:	8c 91       	ld	r24, X
     efe:	f9 01       	movw	r30, r18
     f00:	80 83       	st	Z, r24
        	TCCR0  = CLEAR_BIT(TCCR0 , WGM01);
     f02:	23 e5       	ldi	r18, 0x53	; 83
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	a3 e5       	ldi	r26, 0x53	; 83
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e3 e5       	ldi	r30, 0x53	; 83
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	87 7f       	andi	r24, 0xF7	; 247
     f12:	8c 93       	st	X, r24
     f14:	8c 91       	ld	r24, X
     f16:	f9 01       	movw	r30, r18
     f18:	80 83       	st	Z, r24
        	TCCR0  = SET_BIT(TCCR0,FOC0);
     f1a:	23 e5       	ldi	r18, 0x53	; 83
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	a3 e5       	ldi	r26, 0x53	; 83
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e3 e5       	ldi	r30, 0x53	; 83
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 68       	ori	r24, 0x80	; 128
     f2a:	8c 93       	st	X, r24
     f2c:	8c 91       	ld	r24, X
     f2e:	f9 01       	movw	r30, r18
     f30:	80 83       	st	Z, r24
        	TIMSK = SET_BIT(TIMSK, TOIE0);
     f32:	29 e5       	ldi	r18, 0x59	; 89
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	a9 e5       	ldi	r26, 0x59	; 89
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e9 e5       	ldi	r30, 0x59	; 89
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	81 60       	ori	r24, 0x01	; 1
     f42:	8c 93       	st	X, r24
     f44:	8c 91       	ld	r24, X
     f46:	f9 01       	movw	r30, r18
     f48:	80 83       	st	Z, r24
     f4a:	42 c2       	rjmp	.+1156   	; 0x13d0 <TimerInit+0x568>

        }
        else if(Configuration_Ptr->timer_mode==Compare)
     f4c:	e9 81       	ldd	r30, Y+1	; 0x01
     f4e:	fa 81       	ldd	r31, Y+2	; 0x02
     f50:	86 81       	ldd	r24, Z+6	; 0x06
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	09 f0       	breq	.+2      	; 0xf58 <TimerInit+0xf0>
     f56:	3c c2       	rjmp	.+1144   	; 0x13d0 <TimerInit+0x568>
        {
        TCCR0  = CLEAR_BIT(TCCR0 , WGM00);
     f58:	23 e5       	ldi	r18, 0x53	; 83
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	a3 e5       	ldi	r26, 0x53	; 83
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e3 e5       	ldi	r30, 0x53	; 83
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8f 7b       	andi	r24, 0xBF	; 191
     f68:	8c 93       	st	X, r24
     f6a:	8c 91       	ld	r24, X
     f6c:	f9 01       	movw	r30, r18
     f6e:	80 83       	st	Z, r24
        TCCR0  = SET_BIT(TCCR0 , WGM01);
     f70:	23 e5       	ldi	r18, 0x53	; 83
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	a3 e5       	ldi	r26, 0x53	; 83
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e3 e5       	ldi	r30, 0x53	; 83
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	88 60       	ori	r24, 0x08	; 8
     f80:	8c 93       	st	X, r24
     f82:	8c 91       	ld	r24, X
     f84:	f9 01       	movw	r30, r18
     f86:	80 83       	st	Z, r24
        TCCR0  = SET_BIT(TCCR0,FOC0);
     f88:	23 e5       	ldi	r18, 0x53	; 83
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	a3 e5       	ldi	r26, 0x53	; 83
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e3 e5       	ldi	r30, 0x53	; 83
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	80 68       	ori	r24, 0x80	; 128
     f98:	8c 93       	st	X, r24
     f9a:	8c 91       	ld	r24, X
     f9c:	f9 01       	movw	r30, r18
     f9e:	80 83       	st	Z, r24
        OCR0 = ((Configuration_Ptr->timer_Match_Value)) & 0xFF;
     fa0:	ac e5       	ldi	r26, 0x5C	; 92
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e9 81       	ldd	r30, Y+1	; 0x01
     fa6:	fa 81       	ldd	r31, Y+2	; 0x02
     fa8:	82 81       	ldd	r24, Z+2	; 0x02
     faa:	93 81       	ldd	r25, Z+3	; 0x03
     fac:	8c 93       	st	X, r24
        TIMSK = SET_BIT(  TIMSK, OCIE0);
     fae:	29 e5       	ldi	r18, 0x59	; 89
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	a9 e5       	ldi	r26, 0x59	; 89
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e9 e5       	ldi	r30, 0x59	; 89
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	82 60       	ori	r24, 0x02	; 2
     fbe:	8c 93       	st	X, r24
     fc0:	8c 91       	ld	r24, X
     fc2:	f9 01       	movw	r30, r18
     fc4:	80 83       	st	Z, r24
     fc6:	04 c2       	rjmp	.+1032   	; 0x13d0 <TimerInit+0x568>





	else if(Configuration_Ptr->timer_type==Timer_1){
     fc8:	e9 81       	ldd	r30, Y+1	; 0x01
     fca:	fa 81       	ldd	r31, Y+2	; 0x02
     fcc:	84 81       	ldd	r24, Z+4	; 0x04
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <TimerInit+0x16c>
     fd2:	52 c1       	rjmp	.+676    	; 0x1278 <TimerInit+0x410>



	TimerDeInit(Timer_1);// reset all registers
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	0e 94 18 0a 	call	0x1430	; 0x1430 <TimerDeInit>

	TCNT1 = (Configuration_Ptr->timer_Initial_Value) & 0xFFFF;
     fda:	ac e4       	ldi	r26, 0x4C	; 76
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e9 81       	ldd	r30, Y+1	; 0x01
     fe0:	fa 81       	ldd	r31, Y+2	; 0x02
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	11 96       	adiw	r26, 0x01	; 1
     fe8:	9c 93       	st	X, r25
     fea:	8e 93       	st	-X, r24
	TCCR1B =  (TCCR1B & CLEAR_CLOCK_VALUE) | (Configuration_Ptr->timer_clk);
     fec:	ae e4       	ldi	r26, 0x4E	; 78
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ee e4       	ldi	r30, 0x4E	; 78
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	98 2f       	mov	r25, r24
     ff8:	98 7f       	andi	r25, 0xF8	; 248
     ffa:	e9 81       	ldd	r30, Y+1	; 0x01
     ffc:	fa 81       	ldd	r31, Y+2	; 0x02
     ffe:	85 81       	ldd	r24, Z+5	; 0x05
    1000:	89 2b       	or	r24, r25
    1002:	8c 93       	st	X, r24
	TCCR1A &= 0x0F;
    1004:	af e4       	ldi	r26, 0x4F	; 79
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ef e4       	ldi	r30, 0x4F	; 79
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8f 70       	andi	r24, 0x0F	; 15
    1010:	8c 93       	st	X, r24

	if(Configuration_Ptr->timer_mode== Overflow)
    1012:	e9 81       	ldd	r30, Y+1	; 0x01
    1014:	fa 81       	ldd	r31, Y+2	; 0x02
    1016:	86 81       	ldd	r24, Z+6	; 0x06
    1018:	88 23       	and	r24, r24
    101a:	09 f0       	breq	.+2      	; 0x101e <TimerInit+0x1b6>
    101c:	55 c0       	rjmp	.+170    	; 0x10c8 <TimerInit+0x260>
	        {
	        	TCCR1A  = CLEAR_BIT(TCCR1A , WGM10);
    101e:	2f e4       	ldi	r18, 0x4F	; 79
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	af e4       	ldi	r26, 0x4F	; 79
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ef e4       	ldi	r30, 0x4F	; 79
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8e 7f       	andi	r24, 0xFE	; 254
    102e:	8c 93       	st	X, r24
    1030:	8c 91       	ld	r24, X
    1032:	f9 01       	movw	r30, r18
    1034:	80 83       	st	Z, r24
	        	TCCR1A  = CLEAR_BIT(TCCR1A , WGM11);
    1036:	2f e4       	ldi	r18, 0x4F	; 79
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	af e4       	ldi	r26, 0x4F	; 79
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	ef e4       	ldi	r30, 0x4F	; 79
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	8d 7f       	andi	r24, 0xFD	; 253
    1046:	8c 93       	st	X, r24
    1048:	8c 91       	ld	r24, X
    104a:	f9 01       	movw	r30, r18
    104c:	80 83       	st	Z, r24
	        	TCCR1B  = CLEAR_BIT(TCCR1B , WGM12);
    104e:	2e e4       	ldi	r18, 0x4E	; 78
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	ae e4       	ldi	r26, 0x4E	; 78
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ee e4       	ldi	r30, 0x4E	; 78
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	87 7f       	andi	r24, 0xF7	; 247
    105e:	8c 93       	st	X, r24
    1060:	8c 91       	ld	r24, X
    1062:	f9 01       	movw	r30, r18
    1064:	80 83       	st	Z, r24
	            TCCR1B  = CLEAR_BIT(TCCR1B , WGM13);
    1066:	2e e4       	ldi	r18, 0x4E	; 78
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	ae e4       	ldi	r26, 0x4E	; 78
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ee e4       	ldi	r30, 0x4E	; 78
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8f 7e       	andi	r24, 0xEF	; 239
    1076:	8c 93       	st	X, r24
    1078:	8c 91       	ld	r24, X
    107a:	f9 01       	movw	r30, r18
    107c:	80 83       	st	Z, r24
	        	TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    107e:	2f e4       	ldi	r18, 0x4F	; 79
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	af e4       	ldi	r26, 0x4F	; 79
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ef e4       	ldi	r30, 0x4F	; 79
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 60       	ori	r24, 0x08	; 8
    108e:	8c 93       	st	X, r24
    1090:	8c 91       	ld	r24, X
    1092:	f9 01       	movw	r30, r18
    1094:	80 83       	st	Z, r24
	        	TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    1096:	2f e4       	ldi	r18, 0x4F	; 79
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	af e4       	ldi	r26, 0x4F	; 79
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ef e4       	ldi	r30, 0x4F	; 79
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	84 60       	ori	r24, 0x04	; 4
    10a6:	8c 93       	st	X, r24
    10a8:	8c 91       	ld	r24, X
    10aa:	f9 01       	movw	r30, r18
    10ac:	80 83       	st	Z, r24
                TIMSK= SET_BIT(TIMSK,TOIE1);
    10ae:	29 e5       	ldi	r18, 0x59	; 89
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	a9 e5       	ldi	r26, 0x59	; 89
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e9 e5       	ldi	r30, 0x59	; 89
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	84 60       	ori	r24, 0x04	; 4
    10be:	8c 93       	st	X, r24
    10c0:	8c 91       	ld	r24, X
    10c2:	f9 01       	movw	r30, r18
    10c4:	80 83       	st	Z, r24
    10c6:	84 c1       	rjmp	.+776    	; 0x13d0 <TimerInit+0x568>


	        }
	        else if(Configuration_Ptr->timer_mode==Compare)
    10c8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ca:	fa 81       	ldd	r31, Y+2	; 0x02
    10cc:	86 81       	ldd	r24, Z+6	; 0x06
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <TimerInit+0x26c>
    10d2:	7e c1       	rjmp	.+764    	; 0x13d0 <TimerInit+0x568>
	        {
	       if(Configuration_Ptr->compare_register==Channel_A)
    10d4:	e9 81       	ldd	r30, Y+1	; 0x01
    10d6:	fa 81       	ldd	r31, Y+2	; 0x02
    10d8:	87 81       	ldd	r24, Z+7	; 0x07
    10da:	88 23       	and	r24, r24
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <TimerInit+0x278>
    10de:	5e c0       	rjmp	.+188    	; 0x119c <TimerInit+0x334>
	       {

	    	                    TCCR1A  = CLEAR_BIT(TCCR1A , WGM10);
    10e0:	2f e4       	ldi	r18, 0x4F	; 79
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	af e4       	ldi	r26, 0x4F	; 79
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	ef e4       	ldi	r30, 0x4F	; 79
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8e 7f       	andi	r24, 0xFE	; 254
    10f0:	8c 93       	st	X, r24
    10f2:	8c 91       	ld	r24, X
    10f4:	f9 01       	movw	r30, r18
    10f6:	80 83       	st	Z, r24
	    	   	             	TCCR1A  = CLEAR_BIT(TCCR1A , WGM11);
    10f8:	2f e4       	ldi	r18, 0x4F	; 79
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	af e4       	ldi	r26, 0x4F	; 79
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	ef e4       	ldi	r30, 0x4F	; 79
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8d 7f       	andi	r24, 0xFD	; 253
    1108:	8c 93       	st	X, r24
    110a:	8c 91       	ld	r24, X
    110c:	f9 01       	movw	r30, r18
    110e:	80 83       	st	Z, r24
	    	   					TCCR1B = SET_BIT(TCCR1B, WGM12);
    1110:	2e e4       	ldi	r18, 0x4E	; 78
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	ae e4       	ldi	r26, 0x4E	; 78
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ee e4       	ldi	r30, 0x4E	; 78
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	88 60       	ori	r24, 0x08	; 8
    1120:	8c 93       	st	X, r24
    1122:	8c 91       	ld	r24, X
    1124:	f9 01       	movw	r30, r18
    1126:	80 83       	st	Z, r24
	    	   					TCCR1B = CLEAR_BIT(TCCR1B, WGM13);
    1128:	2e e4       	ldi	r18, 0x4E	; 78
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	ae e4       	ldi	r26, 0x4E	; 78
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ee e4       	ldi	r30, 0x4E	; 78
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8f 7e       	andi	r24, 0xEF	; 239
    1138:	8c 93       	st	X, r24
    113a:	8c 91       	ld	r24, X
    113c:	f9 01       	movw	r30, r18
    113e:	80 83       	st	Z, r24
                                TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    1140:	2f e4       	ldi	r18, 0x4F	; 79
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	af e4       	ldi	r26, 0x4F	; 79
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	ef e4       	ldi	r30, 0x4F	; 79
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	88 60       	ori	r24, 0x08	; 8
    1150:	8c 93       	st	X, r24
    1152:	8c 91       	ld	r24, X
    1154:	f9 01       	movw	r30, r18
    1156:	80 83       	st	Z, r24
	    	   					TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    1158:	2f e4       	ldi	r18, 0x4F	; 79
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	af e4       	ldi	r26, 0x4F	; 79
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ef e4       	ldi	r30, 0x4F	; 79
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	84 60       	ori	r24, 0x04	; 4
    1168:	8c 93       	st	X, r24
    116a:	8c 91       	ld	r24, X
    116c:	f9 01       	movw	r30, r18
    116e:	80 83       	st	Z, r24
                                OCR1A = (Configuration_Ptr->timer_Match_Value) & 0xFFFF;
    1170:	aa e4       	ldi	r26, 0x4A	; 74
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e9 81       	ldd	r30, Y+1	; 0x01
    1176:	fa 81       	ldd	r31, Y+2	; 0x02
    1178:	82 81       	ldd	r24, Z+2	; 0x02
    117a:	93 81       	ldd	r25, Z+3	; 0x03
    117c:	11 96       	adiw	r26, 0x01	; 1
    117e:	9c 93       	st	X, r25
    1180:	8e 93       	st	-X, r24
                                TIMSK = SET_BIT(TIMSK,OCIE1A);
    1182:	29 e5       	ldi	r18, 0x59	; 89
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	a9 e5       	ldi	r26, 0x59	; 89
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e9 e5       	ldi	r30, 0x59	; 89
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 61       	ori	r24, 0x10	; 16
    1192:	8c 93       	st	X, r24
    1194:	8c 91       	ld	r24, X
    1196:	f9 01       	movw	r30, r18
    1198:	80 83       	st	Z, r24
    119a:	1a c1       	rjmp	.+564    	; 0x13d0 <TimerInit+0x568>

	       }
	       else if(Configuration_Ptr->compare_register==Channel_B) //or just else
    119c:	e9 81       	ldd	r30, Y+1	; 0x01
    119e:	fa 81       	ldd	r31, Y+2	; 0x02
    11a0:	87 81       	ldd	r24, Z+7	; 0x07
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <TimerInit+0x340>
    11a6:	14 c1       	rjmp	.+552    	; 0x13d0 <TimerInit+0x568>
	       {
	    	    TCCR1A  = CLEAR_BIT(TCCR1A , WGM10);
    11a8:	2f e4       	ldi	r18, 0x4F	; 79
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	af e4       	ldi	r26, 0x4F	; 79
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	ef e4       	ldi	r30, 0x4F	; 79
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8e 7f       	andi	r24, 0xFE	; 254
    11b8:	8c 93       	st	X, r24
    11ba:	8c 91       	ld	r24, X
    11bc:	f9 01       	movw	r30, r18
    11be:	80 83       	st	Z, r24
            	TCCR1A  = CLEAR_BIT(TCCR1A , WGM11);
    11c0:	2f e4       	ldi	r18, 0x4F	; 79
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	af e4       	ldi	r26, 0x4F	; 79
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	ef e4       	ldi	r30, 0x4F	; 79
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	8d 7f       	andi	r24, 0xFD	; 253
    11d0:	8c 93       	st	X, r24
    11d2:	8c 91       	ld	r24, X
    11d4:	f9 01       	movw	r30, r18
    11d6:	80 83       	st	Z, r24
				TCCR1B = SET_BIT(TCCR1B, WGM12);
    11d8:	2e e4       	ldi	r18, 0x4E	; 78
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	ae e4       	ldi	r26, 0x4E	; 78
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ee e4       	ldi	r30, 0x4E	; 78
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	88 60       	ori	r24, 0x08	; 8
    11e8:	8c 93       	st	X, r24
    11ea:	8c 91       	ld	r24, X
    11ec:	f9 01       	movw	r30, r18
    11ee:	80 83       	st	Z, r24
				TCCR1B = CLEAR_BIT(TCCR1B, WGM13);
    11f0:	2e e4       	ldi	r18, 0x4E	; 78
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	ae e4       	ldi	r26, 0x4E	; 78
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	ee e4       	ldi	r30, 0x4E	; 78
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8f 7e       	andi	r24, 0xEF	; 239
    1200:	8c 93       	st	X, r24
    1202:	8c 91       	ld	r24, X
    1204:	f9 01       	movw	r30, r18
    1206:	80 83       	st	Z, r24
				TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    1208:	2f e4       	ldi	r18, 0x4F	; 79
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	af e4       	ldi	r26, 0x4F	; 79
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ef e4       	ldi	r30, 0x4F	; 79
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	88 60       	ori	r24, 0x08	; 8
    1218:	8c 93       	st	X, r24
    121a:	8c 91       	ld	r24, X
    121c:	f9 01       	movw	r30, r18
    121e:	80 83       	st	Z, r24
			    TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    1220:	2f e4       	ldi	r18, 0x4F	; 79
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	af e4       	ldi	r26, 0x4F	; 79
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	ef e4       	ldi	r30, 0x4F	; 79
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	84 60       	ori	r24, 0x04	; 4
    1230:	8c 93       	st	X, r24
    1232:	8c 91       	ld	r24, X
    1234:	f9 01       	movw	r30, r18
    1236:	80 83       	st	Z, r24
			    OCR1A = ((Configuration_Ptr->timer_Match_Value)+1) & 0xFFFF;
    1238:	aa e4       	ldi	r26, 0x4A	; 74
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e9 81       	ldd	r30, Y+1	; 0x01
    123e:	fa 81       	ldd	r31, Y+2	; 0x02
    1240:	82 81       	ldd	r24, Z+2	; 0x02
    1242:	93 81       	ldd	r25, Z+3	; 0x03
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	9c 93       	st	X, r25
    124a:	8e 93       	st	-X, r24
				OCR1B = (Configuration_Ptr->timer_Match_Value) & 0xFFFF;
    124c:	a8 e4       	ldi	r26, 0x48	; 72
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e9 81       	ldd	r30, Y+1	; 0x01
    1252:	fa 81       	ldd	r31, Y+2	; 0x02
    1254:	82 81       	ldd	r24, Z+2	; 0x02
    1256:	93 81       	ldd	r25, Z+3	; 0x03
    1258:	11 96       	adiw	r26, 0x01	; 1
    125a:	9c 93       	st	X, r25
    125c:	8e 93       	st	-X, r24
                TIMSK = SET_BIT(TIMSK,OCIE1B);
    125e:	29 e5       	ldi	r18, 0x59	; 89
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	a9 e5       	ldi	r26, 0x59	; 89
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e9 e5       	ldi	r30, 0x59	; 89
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	88 60       	ori	r24, 0x08	; 8
    126e:	8c 93       	st	X, r24
    1270:	8c 91       	ld	r24, X
    1272:	f9 01       	movw	r30, r18
    1274:	80 83       	st	Z, r24
    1276:	ac c0       	rjmp	.+344    	; 0x13d0 <TimerInit+0x568>

	        }

}

	else if(Configuration_Ptr->timer_type==Timer_2){
    1278:	e9 81       	ldd	r30, Y+1	; 0x01
    127a:	fa 81       	ldd	r31, Y+2	; 0x02
    127c:	84 81       	ldd	r24, Z+4	; 0x04
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	09 f0       	breq	.+2      	; 0x1284 <TimerInit+0x41c>
    1282:	a6 c0       	rjmp	.+332    	; 0x13d0 <TimerInit+0x568>



	TimerDeInit(Timer_2);// reset all registers
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	0e 94 18 0a 	call	0x1430	; 0x1430 <TimerDeInit>
	ASSR  &= 0X00;
    128a:	e2 e4       	ldi	r30, 0x42	; 66
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	e2 e4       	ldi	r30, 0x42	; 66
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	10 82       	st	Z, r1
	        TCNT2 = (Configuration_Ptr->timer_Initial_Value) & 0xFF;
    1296:	a4 e4       	ldi	r26, 0x44	; 68
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e9 81       	ldd	r30, Y+1	; 0x01
    129c:	fa 81       	ldd	r31, Y+2	; 0x02
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
    12a2:	8c 93       	st	X, r24
			TCCR2  = (TCCR2  & CLEAR_CLOCK_VALUE) | (Configuration_Ptr->timer_clk);
    12a4:	a5 e4       	ldi	r26, 0x45	; 69
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e4       	ldi	r30, 0x45	; 69
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	98 2f       	mov	r25, r24
    12b0:	98 7f       	andi	r25, 0xF8	; 248
    12b2:	e9 81       	ldd	r30, Y+1	; 0x01
    12b4:	fa 81       	ldd	r31, Y+2	; 0x02
    12b6:	85 81       	ldd	r24, Z+5	; 0x05
    12b8:	89 2b       	or	r24, r25
    12ba:	8c 93       	st	X, r24
			TCCR2  = CLEAR_BIT(TCCR2 ,  COM20);
    12bc:	25 e4       	ldi	r18, 0x45	; 69
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	a5 e4       	ldi	r26, 0x45	; 69
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e5 e4       	ldi	r30, 0x45	; 69
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8f 7e       	andi	r24, 0xEF	; 239
    12cc:	8c 93       	st	X, r24
    12ce:	8c 91       	ld	r24, X
    12d0:	f9 01       	movw	r30, r18
    12d2:	80 83       	st	Z, r24
			TCCR2  = CLEAR_BIT(TCCR2 ,  COM21);
    12d4:	25 e4       	ldi	r18, 0x45	; 69
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	a5 e4       	ldi	r26, 0x45	; 69
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e5 e4       	ldi	r30, 0x45	; 69
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	8f 7d       	andi	r24, 0xDF	; 223
    12e4:	8c 93       	st	X, r24
    12e6:	8c 91       	ld	r24, X
    12e8:	f9 01       	movw	r30, r18
    12ea:	80 83       	st	Z, r24

	        if(Configuration_Ptr->timer_mode== Overflow)
    12ec:	e9 81       	ldd	r30, Y+1	; 0x01
    12ee:	fa 81       	ldd	r31, Y+2	; 0x02
    12f0:	86 81       	ldd	r24, Z+6	; 0x06
    12f2:	88 23       	and	r24, r24
    12f4:	89 f5       	brne	.+98     	; 0x1358 <TimerInit+0x4f0>
	        {
	        	TCCR2  = CLEAR_BIT(TCCR2 , WGM20);
    12f6:	25 e4       	ldi	r18, 0x45	; 69
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	a5 e4       	ldi	r26, 0x45	; 69
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e5 e4       	ldi	r30, 0x45	; 69
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 7b       	andi	r24, 0xBF	; 191
    1306:	8c 93       	st	X, r24
    1308:	8c 91       	ld	r24, X
    130a:	f9 01       	movw	r30, r18
    130c:	80 83       	st	Z, r24
	        	TCCR2  = CLEAR_BIT(TCCR2 , WGM21);
    130e:	25 e4       	ldi	r18, 0x45	; 69
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	a5 e4       	ldi	r26, 0x45	; 69
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e5 e4       	ldi	r30, 0x45	; 69
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	87 7f       	andi	r24, 0xF7	; 247
    131e:	8c 93       	st	X, r24
    1320:	8c 91       	ld	r24, X
    1322:	f9 01       	movw	r30, r18
    1324:	80 83       	st	Z, r24
	        	TCCR2  = SET_BIT(TCCR2,FOC2);
    1326:	25 e4       	ldi	r18, 0x45	; 69
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	a5 e4       	ldi	r26, 0x45	; 69
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e5 e4       	ldi	r30, 0x45	; 69
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	80 68       	ori	r24, 0x80	; 128
    1336:	8c 93       	st	X, r24
    1338:	8c 91       	ld	r24, X
    133a:	f9 01       	movw	r30, r18
    133c:	80 83       	st	Z, r24
	        	TIMSK = SET_BIT(TIMSK, TOIE2);
    133e:	29 e5       	ldi	r18, 0x59	; 89
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	a9 e5       	ldi	r26, 0x59	; 89
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e9 e5       	ldi	r30, 0x59	; 89
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	80 64       	ori	r24, 0x40	; 64
    134e:	8c 93       	st	X, r24
    1350:	8c 91       	ld	r24, X
    1352:	f9 01       	movw	r30, r18
    1354:	80 83       	st	Z, r24
    1356:	3c c0       	rjmp	.+120    	; 0x13d0 <TimerInit+0x568>

	        }
	        else if(Configuration_Ptr->timer_mode==Compare)
    1358:	e9 81       	ldd	r30, Y+1	; 0x01
    135a:	fa 81       	ldd	r31, Y+2	; 0x02
    135c:	86 81       	ldd	r24, Z+6	; 0x06
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	b9 f5       	brne	.+110    	; 0x13d0 <TimerInit+0x568>
	        {
	        TCCR2 = CLEAR_BIT(TCCR2 , WGM20);
    1362:	25 e4       	ldi	r18, 0x45	; 69
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	a5 e4       	ldi	r26, 0x45	; 69
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e5 e4       	ldi	r30, 0x45	; 69
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8f 7b       	andi	r24, 0xBF	; 191
    1372:	8c 93       	st	X, r24
    1374:	8c 91       	ld	r24, X
    1376:	f9 01       	movw	r30, r18
    1378:	80 83       	st	Z, r24
	        TCCR2  = SET_BIT(TCCR2 , WGM21);
    137a:	25 e4       	ldi	r18, 0x45	; 69
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	a5 e4       	ldi	r26, 0x45	; 69
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e5 e4       	ldi	r30, 0x45	; 69
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	88 60       	ori	r24, 0x08	; 8
    138a:	8c 93       	st	X, r24
    138c:	8c 91       	ld	r24, X
    138e:	f9 01       	movw	r30, r18
    1390:	80 83       	st	Z, r24
	        TCCR2  = SET_BIT(TCCR2,FOC2);
    1392:	25 e4       	ldi	r18, 0x45	; 69
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	a5 e4       	ldi	r26, 0x45	; 69
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e5 e4       	ldi	r30, 0x45	; 69
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 68       	ori	r24, 0x80	; 128
    13a2:	8c 93       	st	X, r24
    13a4:	8c 91       	ld	r24, X
    13a6:	f9 01       	movw	r30, r18
    13a8:	80 83       	st	Z, r24
	        OCR2   = (Configuration_Ptr->timer_Match_Value) & 0xFF;
    13aa:	a3 e4       	ldi	r26, 0x43	; 67
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e9 81       	ldd	r30, Y+1	; 0x01
    13b0:	fa 81       	ldd	r31, Y+2	; 0x02
    13b2:	82 81       	ldd	r24, Z+2	; 0x02
    13b4:	93 81       	ldd	r25, Z+3	; 0x03
    13b6:	8c 93       	st	X, r24
	        TIMSK  = SET_BIT(  TIMSK, OCIE2);
    13b8:	29 e5       	ldi	r18, 0x59	; 89
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	a9 e5       	ldi	r26, 0x59	; 89
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e9 e5       	ldi	r30, 0x59	; 89
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	80 68       	ori	r24, 0x80	; 128
    13c8:	8c 93       	st	X, r24
    13ca:	8c 91       	ld	r24, X
    13cc:	f9 01       	movw	r30, r18
    13ce:	80 83       	st	Z, r24
}




}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <TimerStop>:


                          /*stop function to stop the timer from counting*/

void TimerStop(Timer_Type timer_type)// stop timer clk
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	0f 92       	push	r0
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type==Timer_0){TCCR0 = TCCR0  & CLEAR_CLOCK_VALUE ;}
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	88 23       	and	r24, r24
    13ec:	41 f4       	brne	.+16     	; 0x13fe <TimerStop+0x22>
    13ee:	a3 e5       	ldi	r26, 0x53	; 83
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e3 e5       	ldi	r30, 0x53	; 83
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	88 7f       	andi	r24, 0xF8	; 248
    13fa:	8c 93       	st	X, r24
    13fc:	15 c0       	rjmp	.+42     	; 0x1428 <TimerStop+0x4c>
	else if(timer_type==Timer_1){TCCR1B = TCCR1B  & CLEAR_CLOCK_VALUE ;}
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	41 f4       	brne	.+16     	; 0x1414 <TimerStop+0x38>
    1404:	ae e4       	ldi	r26, 0x4E	; 78
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ee e4       	ldi	r30, 0x4E	; 78
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	88 7f       	andi	r24, 0xF8	; 248
    1410:	8c 93       	st	X, r24
    1412:	0a c0       	rjmp	.+20     	; 0x1428 <TimerStop+0x4c>
	else if(timer_type==Timer_2){TCCR2 = TCCR2  & CLEAR_CLOCK_VALUE ;}// or we will use just else
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	39 f4       	brne	.+14     	; 0x1428 <TimerStop+0x4c>
    141a:	a5 e4       	ldi	r26, 0x45	; 69
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e5 e4       	ldi	r30, 0x45	; 69
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	88 7f       	andi	r24, 0xF8	; 248
    1426:	8c 93       	st	X, r24

}
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <TimerDeInit>:


                                /*de intializing   the timer registers       */

void TimerDeInit(Timer_Type timer_type)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	2e 97       	sbiw	r28, 0x0e	; 14
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type==Timer_0){
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	88 23       	and	r24, r24
    144a:	b1 f4       	brne	.+44     	; 0x1478 <TimerDeInit+0x48>
		TCNT0 =0x00;//timer 0 initial value register
    144c:	e2 e5       	ldi	r30, 0x52	; 82
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	10 82       	st	Z, r1
		TCCR0 &=0x00;//timer 0 control register
    1452:	e3 e5       	ldi	r30, 0x53	; 83
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	e3 e5       	ldi	r30, 0x53	; 83
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	10 82       	st	Z, r1
		OCR0  &=0x00;//timer 0 o/p compare register
    145e:	ec e5       	ldi	r30, 0x5C	; 92
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	90 81       	ld	r25, Z
    1464:	ec e5       	ldi	r30, 0x5C	; 92
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	10 82       	st	Z, r1
		TIMSK &=0x00;//timer 0 interrupt mask register
    146a:	e9 e5       	ldi	r30, 0x59	; 89
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	e9 e5       	ldi	r30, 0x59	; 89
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	10 82       	st	Z, r1
    1476:	42 c0       	rjmp	.+132    	; 0x14fc <TimerDeInit+0xcc>
	}
	else if(timer_type==Timer_1){
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	39 f5       	brne	.+78     	; 0x14cc <TimerDeInit+0x9c>
		        TCNT1 =0x00;//timer 1 initial value register
    147e:	ec e4       	ldi	r30, 0x4C	; 76
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	11 82       	std	Z+1, r1	; 0x01
    1484:	10 82       	st	Z, r1
				TCCR1A &=0x00;//timer 1 control register(A)
    1486:	ef e4       	ldi	r30, 0x4F	; 79
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	90 81       	ld	r25, Z
    148c:	ef e4       	ldi	r30, 0x4F	; 79
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	10 82       	st	Z, r1
				TCCR1B &=0x00;//timer 1 control register(B)
    1492:	ee e4       	ldi	r30, 0x4E	; 78
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	ee e4       	ldi	r30, 0x4E	; 78
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	10 82       	st	Z, r1
				OCR1A  &=0x00;//timer 1 o/p compare register(A)
    149e:	ea e4       	ldi	r30, 0x4A	; 74
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	91 81       	ldd	r25, Z+1	; 0x01
    14a6:	ea e4       	ldi	r30, 0x4A	; 74
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	11 82       	std	Z+1, r1	; 0x01
    14ac:	10 82       	st	Z, r1
				OCR1B  &=0x00;//timer 1 o/p compare register(B)
    14ae:	e8 e4       	ldi	r30, 0x48	; 72
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	e8 e4       	ldi	r30, 0x48	; 72
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	11 82       	std	Z+1, r1	; 0x01
    14bc:	10 82       	st	Z, r1
				TIMSK  &=0x00;//timer 1 interrupt mask register(higher & lower)
    14be:	e9 e5       	ldi	r30, 0x59	; 89
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	90 81       	ld	r25, Z
    14c4:	e9 e5       	ldi	r30, 0x59	; 89
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	10 82       	st	Z, r1
    14ca:	18 c0       	rjmp	.+48     	; 0x14fc <TimerDeInit+0xcc>

	}
	else if(timer_type==Timer_2){
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	a9 f4       	brne	.+42     	; 0x14fc <TimerDeInit+0xcc>
		TCNT2 =0x00;//timer 2 initial value register
    14d2:	e4 e4       	ldi	r30, 0x44	; 68
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	10 82       	st	Z, r1
		TCCR2 &=0x00;//timer 2 control register
    14d8:	e5 e4       	ldi	r30, 0x45	; 69
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	e5 e4       	ldi	r30, 0x45	; 69
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	10 82       	st	Z, r1
		OCR2  &=0x00;//timer 2 o/p compare register
    14e4:	e3 e4       	ldi	r30, 0x43	; 67
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	90 81       	ld	r25, Z
    14ea:	e3 e4       	ldi	r30, 0x43	; 67
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	10 82       	st	Z, r1
		TIMSK &=0x00;//timer 2 interrupt mask register
    14f0:	e9 e5       	ldi	r30, 0x59	; 89
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	e9 e5       	ldi	r30, 0x59	; 89
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	10 82       	st	Z, r1
	}// or we will use just else

}
    14fc:	2e 96       	adiw	r28, 0x0e	; 14
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <FirstTrial>:
 *
 * [Returns]:     none
 ***************************************************************************************************/

void FirstTrial()
{
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	c8 54       	subi	r28, 0x48	; 72
    151c:	d0 40       	sbci	r29, 0x00	; 0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61

	uint8 count=0;
    1528:	fe 01       	movw	r30, r28
    152a:	e8 5b       	subi	r30, 0xB8	; 184
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	10 82       	st	Z, r1
	for(count=0;count<(password_length);count++){
    1530:	fe 01       	movw	r30, r28
    1532:	e8 5b       	subi	r30, 0xB8	; 184
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	10 82       	st	Z, r1
    1538:	9d c0       	rjmp	.+314    	; 0x1674 <FirstTrial+0x166>
		UART_sendByte(R_U_READY);
    153a:	80 e1       	ldi	r24, 0x10	; 16
    153c:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
		pass[count]= UART_recieveByte();
    1540:	fe 01       	movw	r30, r28
    1542:	e8 5b       	subi	r30, 0xB8	; 184
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	80 81       	ld	r24, Z
    1548:	08 2f       	mov	r16, r24
    154a:	10 e0       	ldi	r17, 0x00	; 0
    154c:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <UART_recieveByte>
    1550:	f8 01       	movw	r30, r16
    1552:	e5 57       	subi	r30, 0x75	; 117
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 83       	st	Z, r24
    1558:	fe 01       	movw	r30, r28
    155a:	ed 5b       	subi	r30, 0xBD	; 189
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	a8 ec       	ldi	r26, 0xC8	; 200
    1564:	b2 e4       	ldi	r27, 0x42	; 66
    1566:	80 83       	st	Z, r24
    1568:	91 83       	std	Z+1, r25	; 0x01
    156a:	a2 83       	std	Z+2, r26	; 0x02
    156c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156e:	8e 01       	movw	r16, r28
    1570:	01 5c       	subi	r16, 0xC1	; 193
    1572:	1f 4f       	sbci	r17, 0xFF	; 255
    1574:	fe 01       	movw	r30, r28
    1576:	ed 5b       	subi	r30, 0xBD	; 189
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	60 81       	ld	r22, Z
    157c:	71 81       	ldd	r23, Z+1	; 0x01
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	93 81       	ldd	r25, Z+3	; 0x03
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	4a e7       	ldi	r20, 0x7A	; 122
    1588:	53 e4       	ldi	r21, 0x43	; 67
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	f8 01       	movw	r30, r16
    1594:	80 83       	st	Z, r24
    1596:	91 83       	std	Z+1, r25	; 0x01
    1598:	a2 83       	std	Z+2, r26	; 0x02
    159a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    159c:	fe 01       	movw	r30, r28
    159e:	ff 96       	adiw	r30, 0x3f	; 63
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e8       	ldi	r20, 0x80	; 128
    15ae:	5f e3       	ldi	r21, 0x3F	; 63
    15b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b4:	88 23       	and	r24, r24
    15b6:	2c f4       	brge	.+10     	; 0x15c2 <FirstTrial+0xb4>
		__ticks = 1;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	9e af       	std	Y+62, r25	; 0x3e
    15be:	8d af       	std	Y+61, r24	; 0x3d
    15c0:	46 c0       	rjmp	.+140    	; 0x164e <FirstTrial+0x140>
	else if (__tmp > 65535)
    15c2:	fe 01       	movw	r30, r28
    15c4:	ff 96       	adiw	r30, 0x3f	; 63
    15c6:	60 81       	ld	r22, Z
    15c8:	71 81       	ldd	r23, Z+1	; 0x01
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15da:	18 16       	cp	r1, r24
    15dc:	64 f5       	brge	.+88     	; 0x1636 <FirstTrial+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	fe 01       	movw	r30, r28
    15e0:	ed 5b       	subi	r30, 0xBD	; 189
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9e af       	std	Y+62, r25	; 0x3e
    160a:	8d af       	std	Y+61, r24	; 0x3d
    160c:	0f c0       	rjmp	.+30     	; 0x162c <FirstTrial+0x11e>
    160e:	89 e1       	ldi	r24, 0x19	; 25
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9c af       	std	Y+60, r25	; 0x3c
    1614:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1616:	8b ad       	ldd	r24, Y+59	; 0x3b
    1618:	9c ad       	ldd	r25, Y+60	; 0x3c
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <FirstTrial+0x10c>
    161e:	9c af       	std	Y+60, r25	; 0x3c
    1620:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1622:	8d ad       	ldd	r24, Y+61	; 0x3d
    1624:	9e ad       	ldd	r25, Y+62	; 0x3e
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	9e af       	std	Y+62, r25	; 0x3e
    162a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	8d ad       	ldd	r24, Y+61	; 0x3d
    162e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f7       	brne	.-38     	; 0x160e <FirstTrial+0x100>
    1634:	16 c0       	rjmp	.+44     	; 0x1662 <FirstTrial+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1636:	fe 01       	movw	r30, r28
    1638:	ff 96       	adiw	r30, 0x3f	; 63
    163a:	60 81       	ld	r22, Z
    163c:	71 81       	ldd	r23, Z+1	; 0x01
    163e:	82 81       	ldd	r24, Z+2	; 0x02
    1640:	93 81       	ldd	r25, Z+3	; 0x03
    1642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9e af       	std	Y+62, r25	; 0x3e
    164c:	8d af       	std	Y+61, r24	; 0x3d
    164e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1650:	9e ad       	ldd	r25, Y+62	; 0x3e
    1652:	9a af       	std	Y+58, r25	; 0x3a
    1654:	89 af       	std	Y+57, r24	; 0x39
    1656:	89 ad       	ldd	r24, Y+57	; 0x39
    1658:	9a ad       	ldd	r25, Y+58	; 0x3a
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <FirstTrial+0x14c>
    165e:	9a af       	std	Y+58, r25	; 0x3a
    1660:	89 af       	std	Y+57, r24	; 0x39

void FirstTrial()
{

	uint8 count=0;
	for(count=0;count<(password_length);count++){
    1662:	de 01       	movw	r26, r28
    1664:	a8 5b       	subi	r26, 0xB8	; 184
    1666:	bf 4f       	sbci	r27, 0xFF	; 255
    1668:	fe 01       	movw	r30, r28
    166a:	e8 5b       	subi	r30, 0xB8	; 184
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	80 81       	ld	r24, Z
    1670:	8f 5f       	subi	r24, 0xFF	; 255
    1672:	8c 93       	st	X, r24
    1674:	fe 01       	movw	r30, r28
    1676:	e8 5b       	subi	r30, 0xB8	; 184
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	80 81       	ld	r24, Z
    167c:	85 30       	cpi	r24, 0x05	; 5
    167e:	08 f4       	brcc	.+2      	; 0x1682 <FirstTrial+0x174>
    1680:	5c cf       	rjmp	.-328    	; 0x153a <FirstTrial+0x2c>
		UART_sendByte(R_U_READY);
		pass[count]= UART_recieveByte();
		_delay_ms(100);
	}
	UART_sendByte(R_U_READY);
    1682:	80 e1       	ldi	r24, 0x10	; 16
    1684:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	aa ef       	ldi	r26, 0xFA	; 250
    168e:	b3 e4       	ldi	r27, 0x43	; 67
    1690:	8d ab       	std	Y+53, r24	; 0x35
    1692:	9e ab       	std	Y+54, r25	; 0x36
    1694:	af ab       	std	Y+55, r26	; 0x37
    1696:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1698:	6d a9       	ldd	r22, Y+53	; 0x35
    169a:	7e a9       	ldd	r23, Y+54	; 0x36
    169c:	8f a9       	ldd	r24, Y+55	; 0x37
    169e:	98 ad       	ldd	r25, Y+56	; 0x38
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	4a e7       	ldi	r20, 0x7A	; 122
    16a6:	53 e4       	ldi	r21, 0x43	; 67
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	89 ab       	std	Y+49, r24	; 0x31
    16b2:	9a ab       	std	Y+50, r25	; 0x32
    16b4:	ab ab       	std	Y+51, r26	; 0x33
    16b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16b8:	69 a9       	ldd	r22, Y+49	; 0x31
    16ba:	7a a9       	ldd	r23, Y+50	; 0x32
    16bc:	8b a9       	ldd	r24, Y+51	; 0x33
    16be:	9c a9       	ldd	r25, Y+52	; 0x34
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	5f e3       	ldi	r21, 0x3F	; 63
    16c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16cc:	88 23       	and	r24, r24
    16ce:	2c f4       	brge	.+10     	; 0x16da <FirstTrial+0x1cc>
		__ticks = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	98 ab       	std	Y+48, r25	; 0x30
    16d6:	8f a7       	std	Y+47, r24	; 0x2f
    16d8:	3f c0       	rjmp	.+126    	; 0x1758 <FirstTrial+0x24a>
	else if (__tmp > 65535)
    16da:	69 a9       	ldd	r22, Y+49	; 0x31
    16dc:	7a a9       	ldd	r23, Y+50	; 0x32
    16de:	8b a9       	ldd	r24, Y+51	; 0x33
    16e0:	9c a9       	ldd	r25, Y+52	; 0x34
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	57 e4       	ldi	r21, 0x47	; 71
    16ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ee:	18 16       	cp	r1, r24
    16f0:	4c f5       	brge	.+82     	; 0x1744 <FirstTrial+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f2:	6d a9       	ldd	r22, Y+53	; 0x35
    16f4:	7e a9       	ldd	r23, Y+54	; 0x36
    16f6:	8f a9       	ldd	r24, Y+55	; 0x37
    16f8:	98 ad       	ldd	r25, Y+56	; 0x38
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	98 ab       	std	Y+48, r25	; 0x30
    1718:	8f a7       	std	Y+47, r24	; 0x2f
    171a:	0f c0       	rjmp	.+30     	; 0x173a <FirstTrial+0x22c>
    171c:	89 e1       	ldi	r24, 0x19	; 25
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9e a7       	std	Y+46, r25	; 0x2e
    1722:	8d a7       	std	Y+45, r24	; 0x2d
    1724:	8d a5       	ldd	r24, Y+45	; 0x2d
    1726:	9e a5       	ldd	r25, Y+46	; 0x2e
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <FirstTrial+0x21a>
    172c:	9e a7       	std	Y+46, r25	; 0x2e
    172e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1730:	8f a5       	ldd	r24, Y+47	; 0x2f
    1732:	98 a9       	ldd	r25, Y+48	; 0x30
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	98 ab       	std	Y+48, r25	; 0x30
    1738:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173a:	8f a5       	ldd	r24, Y+47	; 0x2f
    173c:	98 a9       	ldd	r25, Y+48	; 0x30
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	69 f7       	brne	.-38     	; 0x171c <FirstTrial+0x20e>
    1742:	14 c0       	rjmp	.+40     	; 0x176c <FirstTrial+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1744:	69 a9       	ldd	r22, Y+49	; 0x31
    1746:	7a a9       	ldd	r23, Y+50	; 0x32
    1748:	8b a9       	ldd	r24, Y+51	; 0x33
    174a:	9c a9       	ldd	r25, Y+52	; 0x34
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	98 ab       	std	Y+48, r25	; 0x30
    1756:	8f a7       	std	Y+47, r24	; 0x2f
    1758:	8f a5       	ldd	r24, Y+47	; 0x2f
    175a:	98 a9       	ldd	r25, Y+48	; 0x30
    175c:	9c a7       	std	Y+44, r25	; 0x2c
    175e:	8b a7       	std	Y+43, r24	; 0x2b
    1760:	8b a5       	ldd	r24, Y+43	; 0x2b
    1762:	9c a5       	ldd	r25, Y+44	; 0x2c
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <FirstTrial+0x256>
    1768:	9c a7       	std	Y+44, r25	; 0x2c
    176a:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(500);
		uint8 same=0;
    176c:	fe 01       	movw	r30, r28
    176e:	e9 5b       	subi	r30, 0xB9	; 185
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	10 82       	st	Z, r1
			for(count=0;count<(password_length);count++){
    1774:	fe 01       	movw	r30, r28
    1776:	e8 5b       	subi	r30, 0xB8	; 184
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	10 82       	st	Z, r1
    177c:	27 c0       	rjmp	.+78     	; 0x17cc <FirstTrial+0x2be>

				UART_sendByte(R_U_READY);
    177e:	80 e1       	ldi	r24, 0x10	; 16
    1780:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
				password_2= UART_recieveByte();
    1784:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <UART_recieveByte>
    1788:	80 93 75 00 	sts	0x0075, r24

				if(pass[count]==password_2){same++;}
    178c:	fe 01       	movw	r30, r28
    178e:	e8 5b       	subi	r30, 0xB8	; 184
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 81       	ld	r24, Z
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	fc 01       	movw	r30, r24
    179a:	e5 57       	subi	r30, 0x75	; 117
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	90 81       	ld	r25, Z
    17a0:	80 91 75 00 	lds	r24, 0x0075
    17a4:	98 17       	cp	r25, r24
    17a6:	49 f4       	brne	.+18     	; 0x17ba <FirstTrial+0x2ac>
    17a8:	de 01       	movw	r26, r28
    17aa:	a9 5b       	subi	r26, 0xB9	; 185
    17ac:	bf 4f       	sbci	r27, 0xFF	; 255
    17ae:	fe 01       	movw	r30, r28
    17b0:	e9 5b       	subi	r30, 0xB9	; 185
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	80 81       	ld	r24, Z
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	8c 93       	st	X, r24
	}
	UART_sendByte(R_U_READY);

		_delay_ms(500);
		uint8 same=0;
			for(count=0;count<(password_length);count++){
    17ba:	de 01       	movw	r26, r28
    17bc:	a8 5b       	subi	r26, 0xB8	; 184
    17be:	bf 4f       	sbci	r27, 0xFF	; 255
    17c0:	fe 01       	movw	r30, r28
    17c2:	e8 5b       	subi	r30, 0xB8	; 184
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 5f       	subi	r24, 0xFF	; 255
    17ca:	8c 93       	st	X, r24
    17cc:	fe 01       	movw	r30, r28
    17ce:	e8 5b       	subi	r30, 0xB8	; 184
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	80 81       	ld	r24, Z
    17d4:	85 30       	cpi	r24, 0x05	; 5
    17d6:	98 f2       	brcs	.-90     	; 0x177e <FirstTrial+0x270>
				UART_sendByte(R_U_READY);
				password_2= UART_recieveByte();

				if(pass[count]==password_2){same++;}
			}
			if(same==5)
    17d8:	fe 01       	movw	r30, r28
    17da:	e9 5b       	subi	r30, 0xB9	; 185
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	80 81       	ld	r24, Z
    17e0:	85 30       	cpi	r24, 0x05	; 5
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <FirstTrial+0x2d8>
    17e4:	1d c1       	rjmp	.+570    	; 0x1a20 <FirstTrial+0x512>
			{UART_sendByte(match);
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	aa e7       	ldi	r26, 0x7A	; 122
    17f2:	b4 e4       	ldi	r27, 0x44	; 68
    17f4:	8f a3       	std	Y+39, r24	; 0x27
    17f6:	98 a7       	std	Y+40, r25	; 0x28
    17f8:	a9 a7       	std	Y+41, r26	; 0x29
    17fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fc:	6f a1       	ldd	r22, Y+39	; 0x27
    17fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1800:	89 a5       	ldd	r24, Y+41	; 0x29
    1802:	9a a5       	ldd	r25, Y+42	; 0x2a
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	4a e7       	ldi	r20, 0x7A	; 122
    180a:	53 e4       	ldi	r21, 0x43	; 67
    180c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	8b a3       	std	Y+35, r24	; 0x23
    1816:	9c a3       	std	Y+36, r25	; 0x24
    1818:	ad a3       	std	Y+37, r26	; 0x25
    181a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    181c:	6b a1       	ldd	r22, Y+35	; 0x23
    181e:	7c a1       	ldd	r23, Y+36	; 0x24
    1820:	8d a1       	ldd	r24, Y+37	; 0x25
    1822:	9e a1       	ldd	r25, Y+38	; 0x26
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e8       	ldi	r20, 0x80	; 128
    182a:	5f e3       	ldi	r21, 0x3F	; 63
    182c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1830:	88 23       	and	r24, r24
    1832:	2c f4       	brge	.+10     	; 0x183e <FirstTrial+0x330>
		__ticks = 1;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	9a a3       	std	Y+34, r25	; 0x22
    183a:	89 a3       	std	Y+33, r24	; 0x21
    183c:	3f c0       	rjmp	.+126    	; 0x18bc <FirstTrial+0x3ae>
	else if (__tmp > 65535)
    183e:	6b a1       	ldd	r22, Y+35	; 0x23
    1840:	7c a1       	ldd	r23, Y+36	; 0x24
    1842:	8d a1       	ldd	r24, Y+37	; 0x25
    1844:	9e a1       	ldd	r25, Y+38	; 0x26
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	3f ef       	ldi	r19, 0xFF	; 255
    184a:	4f e7       	ldi	r20, 0x7F	; 127
    184c:	57 e4       	ldi	r21, 0x47	; 71
    184e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1852:	18 16       	cp	r1, r24
    1854:	4c f5       	brge	.+82     	; 0x18a8 <FirstTrial+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1856:	6f a1       	ldd	r22, Y+39	; 0x27
    1858:	78 a5       	ldd	r23, Y+40	; 0x28
    185a:	89 a5       	ldd	r24, Y+41	; 0x29
    185c:	9a a5       	ldd	r25, Y+42	; 0x2a
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e2       	ldi	r20, 0x20	; 32
    1864:	51 e4       	ldi	r21, 0x41	; 65
    1866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9a a3       	std	Y+34, r25	; 0x22
    187c:	89 a3       	std	Y+33, r24	; 0x21
    187e:	0f c0       	rjmp	.+30     	; 0x189e <FirstTrial+0x390>
    1880:	89 e1       	ldi	r24, 0x19	; 25
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	98 a3       	std	Y+32, r25	; 0x20
    1886:	8f 8f       	std	Y+31, r24	; 0x1f
    1888:	8f 8d       	ldd	r24, Y+31	; 0x1f
    188a:	98 a1       	ldd	r25, Y+32	; 0x20
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <FirstTrial+0x37e>
    1890:	98 a3       	std	Y+32, r25	; 0x20
    1892:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1894:	89 a1       	ldd	r24, Y+33	; 0x21
    1896:	9a a1       	ldd	r25, Y+34	; 0x22
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	9a a3       	std	Y+34, r25	; 0x22
    189c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189e:	89 a1       	ldd	r24, Y+33	; 0x21
    18a0:	9a a1       	ldd	r25, Y+34	; 0x22
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	69 f7       	brne	.-38     	; 0x1880 <FirstTrial+0x372>
    18a6:	14 c0       	rjmp	.+40     	; 0x18d0 <FirstTrial+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a8:	6b a1       	ldd	r22, Y+35	; 0x23
    18aa:	7c a1       	ldd	r23, Y+36	; 0x24
    18ac:	8d a1       	ldd	r24, Y+37	; 0x25
    18ae:	9e a1       	ldd	r25, Y+38	; 0x26
    18b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	9a a3       	std	Y+34, r25	; 0x22
    18ba:	89 a3       	std	Y+33, r24	; 0x21
    18bc:	89 a1       	ldd	r24, Y+33	; 0x21
    18be:	9a a1       	ldd	r25, Y+34	; 0x22
    18c0:	9e 8f       	std	Y+30, r25	; 0x1e
    18c2:	8d 8f       	std	Y+29, r24	; 0x1d
    18c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <FirstTrial+0x3ba>
    18cc:	9e 8f       	std	Y+30, r25	; 0x1e
    18ce:	8d 8f       	std	Y+29, r24	; 0x1d

				_delay_ms(1000);


                 count=0;
    18d0:	fe 01       	movw	r30, r28
    18d2:	e8 5b       	subi	r30, 0xB8	; 184
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	10 82       	st	Z, r1
				for(count=0;count<(password_length);count++){
    18d8:	fe 01       	movw	r30, r28
    18da:	e8 5b       	subi	r30, 0xB8	; 184
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	10 82       	st	Z, r1
    18e0:	92 c0       	rjmp	.+292    	; 0x1a06 <FirstTrial+0x4f8>
					EEPROM_writeByte( (FIRST_ADDRESS+count)  , pass[count]);
    18e2:	fe 01       	movw	r30, r28
    18e4:	e8 5b       	subi	r30, 0xB8	; 184
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	80 50       	subi	r24, 0x00	; 0
    18f0:	9d 4f       	sbci	r25, 0xFD	; 253
    18f2:	ac 01       	movw	r20, r24
    18f4:	fe 01       	movw	r30, r28
    18f6:	e8 5b       	subi	r30, 0xB8	; 184
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	fc 01       	movw	r30, r24
    1902:	e5 57       	subi	r30, 0x75	; 117
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	20 81       	ld	r18, Z
    1908:	ca 01       	movw	r24, r20
    190a:	62 2f       	mov	r22, r18
    190c:	0e 94 9b 13 	call	0x2736	; 0x2736 <EEPROM_writeByte>
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a8 ec       	ldi	r26, 0xC8	; 200
    1916:	b2 e4       	ldi	r27, 0x42	; 66
    1918:	89 8f       	std	Y+25, r24	; 0x19
    191a:	9a 8f       	std	Y+26, r25	; 0x1a
    191c:	ab 8f       	std	Y+27, r26	; 0x1b
    191e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1920:	69 8d       	ldd	r22, Y+25	; 0x19
    1922:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1924:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1926:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	4a e7       	ldi	r20, 0x7A	; 122
    192e:	53 e4       	ldi	r21, 0x43	; 67
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	8d 8b       	std	Y+21, r24	; 0x15
    193a:	9e 8b       	std	Y+22, r25	; 0x16
    193c:	af 8b       	std	Y+23, r26	; 0x17
    193e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1940:	6d 89       	ldd	r22, Y+21	; 0x15
    1942:	7e 89       	ldd	r23, Y+22	; 0x16
    1944:	8f 89       	ldd	r24, Y+23	; 0x17
    1946:	98 8d       	ldd	r25, Y+24	; 0x18
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e8       	ldi	r20, 0x80	; 128
    194e:	5f e3       	ldi	r21, 0x3F	; 63
    1950:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1954:	88 23       	and	r24, r24
    1956:	2c f4       	brge	.+10     	; 0x1962 <FirstTrial+0x454>
		__ticks = 1;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	9c 8b       	std	Y+20, r25	; 0x14
    195e:	8b 8b       	std	Y+19, r24	; 0x13
    1960:	3f c0       	rjmp	.+126    	; 0x19e0 <FirstTrial+0x4d2>
	else if (__tmp > 65535)
    1962:	6d 89       	ldd	r22, Y+21	; 0x15
    1964:	7e 89       	ldd	r23, Y+22	; 0x16
    1966:	8f 89       	ldd	r24, Y+23	; 0x17
    1968:	98 8d       	ldd	r25, Y+24	; 0x18
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	3f ef       	ldi	r19, 0xFF	; 255
    196e:	4f e7       	ldi	r20, 0x7F	; 127
    1970:	57 e4       	ldi	r21, 0x47	; 71
    1972:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1976:	18 16       	cp	r1, r24
    1978:	4c f5       	brge	.+82     	; 0x19cc <FirstTrial+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197a:	69 8d       	ldd	r22, Y+25	; 0x19
    197c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    197e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1980:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e2       	ldi	r20, 0x20	; 32
    1988:	51 e4       	ldi	r21, 0x41	; 65
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	bc 01       	movw	r22, r24
    1994:	cd 01       	movw	r24, r26
    1996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	9c 8b       	std	Y+20, r25	; 0x14
    19a0:	8b 8b       	std	Y+19, r24	; 0x13
    19a2:	0f c0       	rjmp	.+30     	; 0x19c2 <FirstTrial+0x4b4>
    19a4:	89 e1       	ldi	r24, 0x19	; 25
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9a 8b       	std	Y+18, r25	; 0x12
    19aa:	89 8b       	std	Y+17, r24	; 0x11
    19ac:	89 89       	ldd	r24, Y+17	; 0x11
    19ae:	9a 89       	ldd	r25, Y+18	; 0x12
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <FirstTrial+0x4a2>
    19b4:	9a 8b       	std	Y+18, r25	; 0x12
    19b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ba:	9c 89       	ldd	r25, Y+20	; 0x14
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	9c 8b       	std	Y+20, r25	; 0x14
    19c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c2:	8b 89       	ldd	r24, Y+19	; 0x13
    19c4:	9c 89       	ldd	r25, Y+20	; 0x14
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	69 f7       	brne	.-38     	; 0x19a4 <FirstTrial+0x496>
    19ca:	14 c0       	rjmp	.+40     	; 0x19f4 <FirstTrial+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19cc:	6d 89       	ldd	r22, Y+21	; 0x15
    19ce:	7e 89       	ldd	r23, Y+22	; 0x16
    19d0:	8f 89       	ldd	r24, Y+23	; 0x17
    19d2:	98 8d       	ldd	r25, Y+24	; 0x18
    19d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	9c 8b       	std	Y+20, r25	; 0x14
    19de:	8b 8b       	std	Y+19, r24	; 0x13
    19e0:	8b 89       	ldd	r24, Y+19	; 0x13
    19e2:	9c 89       	ldd	r25, Y+20	; 0x14
    19e4:	98 8b       	std	Y+16, r25	; 0x10
    19e6:	8f 87       	std	Y+15, r24	; 0x0f
    19e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ea:	98 89       	ldd	r25, Y+16	; 0x10
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <FirstTrial+0x4de>
    19f0:	98 8b       	std	Y+16, r25	; 0x10
    19f2:	8f 87       	std	Y+15, r24	; 0x0f

				_delay_ms(1000);


                 count=0;
				for(count=0;count<(password_length);count++){
    19f4:	de 01       	movw	r26, r28
    19f6:	a8 5b       	subi	r26, 0xB8	; 184
    19f8:	bf 4f       	sbci	r27, 0xFF	; 255
    19fa:	fe 01       	movw	r30, r28
    19fc:	e8 5b       	subi	r30, 0xB8	; 184
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	8c 93       	st	X, r24
    1a06:	fe 01       	movw	r30, r28
    1a08:	e8 5b       	subi	r30, 0xB8	; 184
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	80 81       	ld	r24, Z
    1a0e:	85 30       	cpi	r24, 0x05	; 5
    1a10:	08 f4       	brcc	.+2      	; 0x1a14 <FirstTrial+0x506>
    1a12:	67 cf       	rjmp	.-306    	; 0x18e2 <FirstTrial+0x3d4>
					EEPROM_writeByte( (FIRST_ADDRESS+count)  , pass[count]);
					_delay_ms(100);
				}
				UART_sendByte(R_U_READY);
    1a14:	80 e1       	ldi	r24, 0x10	; 16
    1a16:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
				options();
    1a1a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <options>
    1a1e:	7f c0       	rjmp	.+254    	; 0x1b1e <FirstTrial+0x610>
			}
			else
			{UART_sendByte(missmatch);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
				LCD_clearScreen();
    1a26:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_clearScreen>
						LCD_displayString("   mismatch");
    1a2a:	80 e6       	ldi	r24, 0x60	; 96
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayString>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	aa e7       	ldi	r26, 0x7A	; 122
    1a38:	b4 e4       	ldi	r27, 0x44	; 68
    1a3a:	8b 87       	std	Y+11, r24	; 0x0b
    1a3c:	9c 87       	std	Y+12, r25	; 0x0c
    1a3e:	ad 87       	std	Y+13, r26	; 0x0d
    1a40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a e7       	ldi	r20, 0x7A	; 122
    1a50:	53 e4       	ldi	r21, 0x43	; 67
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8f 83       	std	Y+7, r24	; 0x07
    1a5c:	98 87       	std	Y+8, r25	; 0x08
    1a5e:	a9 87       	std	Y+9, r26	; 0x09
    1a60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a62:	6f 81       	ldd	r22, Y+7	; 0x07
    1a64:	78 85       	ldd	r23, Y+8	; 0x08
    1a66:	89 85       	ldd	r24, Y+9	; 0x09
    1a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <FirstTrial+0x576>
		__ticks = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <FirstTrial+0x5f4>
	else if (__tmp > 65535)
    1a84:	6f 81       	ldd	r22, Y+7	; 0x07
    1a86:	78 85       	ldd	r23, Y+8	; 0x08
    1a88:	89 85       	ldd	r24, Y+9	; 0x09
    1a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	4c f5       	brge	.+82     	; 0x1aee <FirstTrial+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	51 e4       	ldi	r21, 0x41	; 65
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9e 83       	std	Y+6, r25	; 0x06
    1ac2:	8d 83       	std	Y+5, r24	; 0x05
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <FirstTrial+0x5d6>
    1ac6:	89 e1       	ldi	r24, 0x19	; 25
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9c 83       	std	Y+4, r25	; 0x04
    1acc:	8b 83       	std	Y+3, r24	; 0x03
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <FirstTrial+0x5c4>
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	69 f7       	brne	.-38     	; 0x1ac6 <FirstTrial+0x5b8>
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <FirstTrial+0x608>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <FirstTrial+0x600>
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1000);
						LCD_clearScreen();
    1b16:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <LCD_clearScreen>
						FirstTrial();
    1b1a:	0e 94 87 0a 	call	0x150e	; 0x150e <FirstTrial>
			}
}
    1b1e:	c8 5b       	subi	r28, 0xB8	; 184
    1b20:	df 4f       	sbci	r29, 0xFF	; 255
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	08 95       	ret

00001b36 <options>:
 * [Returns]:     none
 ***************************************************************************************************/



void options(){
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	6e 97       	sbiw	r28, 0x1e	; 30
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61

	uint8 ch;
	uint8 key;
	while(UART_recieveByte()!=R_U_READY);
    1b4a:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <UART_recieveByte>
    1b4e:	80 31       	cpi	r24, 0x10	; 16
    1b50:	e1 f7       	brne	.-8      	; 0x1b4a <options+0x14>
		key=UART_recieveByte();
    1b52:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <UART_recieveByte>
    1b56:	8d 8f       	std	Y+29, r24	; 0x1d

	if(key==1)
    1b58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	e9 f5       	brne	.+122    	; 0x1bd8 <options+0xa2>

	{
		ch=Check_password();
    1b5e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <Check_password>
    1b62:	8e 8f       	std	Y+30, r24	; 0x1e
		if(ch==match)
    1b64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	19 f4       	brne	.+6      	; 0x1b70 <options+0x3a>
		{open();}
    1b6a:	0e 94 57 10 	call	0x20ae	; 0x20ae <open>
    1b6e:	59 c1       	rjmp	.+690    	; 0x1e22 <options+0x2ec>
		else
		{
			           wrong();
    1b70:	0e 94 af 10 	call	0x215e	; 0x215e <wrong>

		ch=Check_password();
    1b74:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <Check_password>
    1b78:	8e 8f       	std	Y+30, r24	; 0x1e
		if(ch==match)
    1b7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	19 f4       	brne	.+6      	; 0x1b86 <options+0x50>
		{open();}
    1b80:	0e 94 57 10 	call	0x20ae	; 0x20ae <open>
    1b84:	4e c1       	rjmp	.+668    	; 0x1e22 <options+0x2ec>
		else
		{
			 wrong();
    1b86:	0e 94 af 10 	call	0x215e	; 0x215e <wrong>
		ch=Check_password();
    1b8a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <Check_password>
    1b8e:	8e 8f       	std	Y+30, r24	; 0x1e

		if(ch==match)
    1b90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	19 f4       	brne	.+6      	; 0x1b9c <options+0x66>
		{open();}
    1b96:	0e 94 57 10 	call	0x20ae	; 0x20ae <open>
    1b9a:	43 c1       	rjmp	.+646    	; 0x1e22 <options+0x2ec>
		else
		{TimerSetCallBack(Timer_1, timer_buzzer);
    1b9c:	22 e6       	ldi	r18, 0x62	; 98
    1b9e:	33 e1       	ldi	r19, 0x13	; 19
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	b9 01       	movw	r22, r18
    1ba4:	0e 94 08 07 	call	0xe10	; 0xe10 <TimerSetCallBack>
		TimerInit(&timer);
    1ba8:	86 e7       	ldi	r24, 0x76	; 118
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 34 07 	call	0xe68	; 0xe68 <TimerInit>
		while(danger!=Safe);
    1bb0:	80 91 89 00 	lds	r24, 0x0089
    1bb4:	90 91 8a 00 	lds	r25, 0x008A
    1bb8:	84 36       	cpi	r24, 0x64	; 100
    1bba:	91 05       	cpc	r25, r1
    1bbc:	c9 f7       	brne	.-14     	; 0x1bb0 <options+0x7a>
		danger=0;
    1bbe:	10 92 8a 00 	sts	0x008A, r1
    1bc2:	10 92 89 00 	sts	0x0089, r1
		TimerDeInit(Timer_1);
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	0e 94 18 0a 	call	0x1430	; 0x1430 <TimerDeInit>
		UART_sendByte(Safe);
    1bcc:	84 e6       	ldi	r24, 0x64	; 100
    1bce:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
		options();
    1bd2:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <options>
    1bd6:	25 c1       	rjmp	.+586    	; 0x1e22 <options+0x2ec>
		}
		}

		}
	}
	else if(key==2)
    1bd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <options+0xaa>
    1bde:	ad c0       	rjmp	.+346    	; 0x1d3a <options+0x204>
	{
		ch=Check_password();
    1be0:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <Check_password>
    1be4:	8e 8f       	std	Y+30, r24	; 0x1e
				if(ch==match)
    1be6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	19 f4       	brne	.+6      	; 0x1bf2 <options+0xbc>
				{FirstTrial();}
    1bec:	0e 94 87 0a 	call	0x150e	; 0x150e <FirstTrial>
    1bf0:	18 c1       	rjmp	.+560    	; 0x1e22 <options+0x2ec>
				else
				{ wrong();
    1bf2:	0e 94 af 10 	call	0x215e	; 0x215e <wrong>

				ch=Check_password();
    1bf6:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <Check_password>
    1bfa:	8e 8f       	std	Y+30, r24	; 0x1e
				if(ch==match)
    1bfc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	19 f4       	brne	.+6      	; 0x1c08 <options+0xd2>
				{FirstTrial();}
    1c02:	0e 94 87 0a 	call	0x150e	; 0x150e <FirstTrial>
    1c06:	0d c1       	rjmp	.+538    	; 0x1e22 <options+0x2ec>
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	aa e7       	ldi	r26, 0x7A	; 122
    1c0e:	b4 e4       	ldi	r27, 0x44	; 68
    1c10:	89 8f       	std	Y+25, r24	; 0x19
    1c12:	9a 8f       	std	Y+26, r25	; 0x1a
    1c14:	ab 8f       	std	Y+27, r26	; 0x1b
    1c16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c18:	69 8d       	ldd	r22, Y+25	; 0x19
    1c1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	4a e7       	ldi	r20, 0x7A	; 122
    1c26:	53 e4       	ldi	r21, 0x43	; 67
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	8d 8b       	std	Y+21, r24	; 0x15
    1c32:	9e 8b       	std	Y+22, r25	; 0x16
    1c34:	af 8b       	std	Y+23, r26	; 0x17
    1c36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c38:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e8       	ldi	r20, 0x80	; 128
    1c46:	5f e3       	ldi	r21, 0x3F	; 63
    1c48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c4c:	88 23       	and	r24, r24
    1c4e:	2c f4       	brge	.+10     	; 0x1c5a <options+0x124>
		__ticks = 1;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9c 8b       	std	Y+20, r25	; 0x14
    1c56:	8b 8b       	std	Y+19, r24	; 0x13
    1c58:	3f c0       	rjmp	.+126    	; 0x1cd8 <options+0x1a2>
	else if (__tmp > 65535)
    1c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c60:	98 8d       	ldd	r25, Y+24	; 0x18
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	4f e7       	ldi	r20, 0x7F	; 127
    1c68:	57 e4       	ldi	r21, 0x47	; 71
    1c6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c6e:	18 16       	cp	r1, r24
    1c70:	4c f5       	brge	.+82     	; 0x1cc4 <options+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c72:	69 8d       	ldd	r22, Y+25	; 0x19
    1c74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e2       	ldi	r20, 0x20	; 32
    1c80:	51 e4       	ldi	r21, 0x41	; 65
    1c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9c 8b       	std	Y+20, r25	; 0x14
    1c98:	8b 8b       	std	Y+19, r24	; 0x13
    1c9a:	0f c0       	rjmp	.+30     	; 0x1cba <options+0x184>
    1c9c:	89 e1       	ldi	r24, 0x19	; 25
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9a 8b       	std	Y+18, r25	; 0x12
    1ca2:	89 8b       	std	Y+17, r24	; 0x11
    1ca4:	89 89       	ldd	r24, Y+17	; 0x11
    1ca6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <options+0x172>
    1cac:	9a 8b       	std	Y+18, r25	; 0x12
    1cae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	9c 8b       	std	Y+20, r25	; 0x14
    1cb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cba:	8b 89       	ldd	r24, Y+19	; 0x13
    1cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	69 f7       	brne	.-38     	; 0x1c9c <options+0x166>
    1cc2:	14 c0       	rjmp	.+40     	; 0x1cec <options+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	9c 8b       	std	Y+20, r25	; 0x14
    1cd6:	8b 8b       	std	Y+19, r24	; 0x13
    1cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cda:	9c 89       	ldd	r25, Y+20	; 0x14
    1cdc:	98 8b       	std	Y+16, r25	; 0x10
    1cde:	8f 87       	std	Y+15, r24	; 0x0f
    1ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce2:	98 89       	ldd	r25, Y+16	; 0x10
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <options+0x1ae>
    1ce8:	98 8b       	std	Y+16, r25	; 0x10
    1cea:	8f 87       	std	Y+15, r24	; 0x0f
				else
				{
					 //wrong();
					_delay_ms(1000);
				ch=Check_password();
    1cec:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <Check_password>
    1cf0:	8e 8f       	std	Y+30, r24	; 0x1e

				if(ch==match)
    1cf2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	19 f4       	brne	.+6      	; 0x1cfe <options+0x1c8>
				{FirstTrial();}
    1cf8:	0e 94 87 0a 	call	0x150e	; 0x150e <FirstTrial>
    1cfc:	92 c0       	rjmp	.+292    	; 0x1e22 <options+0x2ec>
				else
				{TimerSetCallBack(Timer_1, timer_buzzer);
    1cfe:	22 e6       	ldi	r18, 0x62	; 98
    1d00:	33 e1       	ldi	r19, 0x13	; 19
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	b9 01       	movw	r22, r18
    1d06:	0e 94 08 07 	call	0xe10	; 0xe10 <TimerSetCallBack>
				TimerInit(&timer);
    1d0a:	86 e7       	ldi	r24, 0x76	; 118
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 34 07 	call	0xe68	; 0xe68 <TimerInit>
				while(danger!=Safe);
    1d12:	80 91 89 00 	lds	r24, 0x0089
    1d16:	90 91 8a 00 	lds	r25, 0x008A
    1d1a:	84 36       	cpi	r24, 0x64	; 100
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	c9 f7       	brne	.-14     	; 0x1d12 <options+0x1dc>
				danger=0;
    1d20:	10 92 8a 00 	sts	0x008A, r1
    1d24:	10 92 89 00 	sts	0x0089, r1
				TimerDeInit(Timer_1);
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	0e 94 18 0a 	call	0x1430	; 0x1430 <TimerDeInit>
				UART_sendByte(Safe);
    1d2e:	84 e6       	ldi	r24, 0x64	; 100
    1d30:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
				options();
    1d34:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <options>
    1d38:	74 c0       	rjmp	.+232    	; 0x1e22 <options+0x2ec>
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	aa e7       	ldi	r26, 0x7A	; 122
    1d40:	b4 e4       	ldi	r27, 0x44	; 68
    1d42:	8b 87       	std	Y+11, r24	; 0x0b
    1d44:	9c 87       	std	Y+12, r25	; 0x0c
    1d46:	ad 87       	std	Y+13, r26	; 0x0d
    1d48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4a e7       	ldi	r20, 0x7A	; 122
    1d58:	53 e4       	ldi	r21, 0x43	; 67
    1d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	8f 83       	std	Y+7, r24	; 0x07
    1d64:	98 87       	std	Y+8, r25	; 0x08
    1d66:	a9 87       	std	Y+9, r26	; 0x09
    1d68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6c:	78 85       	ldd	r23, Y+8	; 0x08
    1d6e:	89 85       	ldd	r24, Y+9	; 0x09
    1d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	2c f4       	brge	.+10     	; 0x1d8c <options+0x256>
		__ticks = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9e 83       	std	Y+6, r25	; 0x06
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	3f c0       	rjmp	.+126    	; 0x1e0a <options+0x2d4>
	else if (__tmp > 65535)
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	3f ef       	ldi	r19, 0xFF	; 255
    1d98:	4f e7       	ldi	r20, 0x7F	; 127
    1d9a:	57 e4       	ldi	r21, 0x47	; 71
    1d9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da0:	18 16       	cp	r1, r24
    1da2:	4c f5       	brge	.+82     	; 0x1df6 <options+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <options+0x2b6>
    1dce:	89 e1       	ldi	r24, 0x19	; 25
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9c 83       	std	Y+4, r25	; 0x04
    1dd4:	8b 83       	std	Y+3, r24	; 0x03
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <options+0x2a4>
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9e 81       	ldd	r25, Y+6	; 0x06
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	9e 83       	std	Y+6, r25	; 0x06
    1dea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	69 f7       	brne	.-38     	; 0x1dce <options+0x298>
    1df4:	14 c0       	rjmp	.+40     	; 0x1e1e <options+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	6f 81       	ldd	r22, Y+7	; 0x07
    1df8:	78 85       	ldd	r23, Y+8	; 0x08
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	9a 81       	ldd	r25, Y+2	; 0x02
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <options+0x2e0>
    1e1a:	9a 83       	std	Y+2, r25	; 0x02
    1e1c:	89 83       	std	Y+1, r24	; 0x01

				}
	}
	else{

									_delay_ms(1000);options();}
    1e1e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <options>
}
    1e22:	6e 96       	adiw	r28, 0x1e	; 30
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <Check_password>:
  ***************************************************************************************************/



uint8 Check_password()
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	6f 97       	sbiw	r28, 0x1f	; 31
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	aa e7       	ldi	r26, 0x7A	; 122
    1e4e:	b4 e4       	ldi	r27, 0x44	; 68
    1e50:	89 8f       	std	Y+25, r24	; 0x19
    1e52:	9a 8f       	std	Y+26, r25	; 0x1a
    1e54:	ab 8f       	std	Y+27, r26	; 0x1b
    1e56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e58:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4a e7       	ldi	r20, 0x7A	; 122
    1e66:	53 e4       	ldi	r21, 0x43	; 67
    1e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	8d 8b       	std	Y+21, r24	; 0x15
    1e72:	9e 8b       	std	Y+22, r25	; 0x16
    1e74:	af 8b       	std	Y+23, r26	; 0x17
    1e76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e78:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <Check_password+0x66>
		__ticks = 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9c 8b       	std	Y+20, r25	; 0x14
    1e96:	8b 8b       	std	Y+19, r24	; 0x13
    1e98:	3f c0       	rjmp	.+126    	; 0x1f18 <Check_password+0xe4>
	else if (__tmp > 65535)
    1e9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	3f ef       	ldi	r19, 0xFF	; 255
    1ea6:	4f e7       	ldi	r20, 0x7F	; 127
    1ea8:	57 e4       	ldi	r21, 0x47	; 71
    1eaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eae:	18 16       	cp	r1, r24
    1eb0:	4c f5       	brge	.+82     	; 0x1f04 <Check_password+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e2       	ldi	r20, 0x20	; 32
    1ec0:	51 e4       	ldi	r21, 0x41	; 65
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	9c 8b       	std	Y+20, r25	; 0x14
    1ed8:	8b 8b       	std	Y+19, r24	; 0x13
    1eda:	0f c0       	rjmp	.+30     	; 0x1efa <Check_password+0xc6>
    1edc:	89 e1       	ldi	r24, 0x19	; 25
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9a 8b       	std	Y+18, r25	; 0x12
    1ee2:	89 8b       	std	Y+17, r24	; 0x11
    1ee4:	89 89       	ldd	r24, Y+17	; 0x11
    1ee6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <Check_password+0xb4>
    1eec:	9a 8b       	std	Y+18, r25	; 0x12
    1eee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	9c 8b       	std	Y+20, r25	; 0x14
    1ef8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efa:	8b 89       	ldd	r24, Y+19	; 0x13
    1efc:	9c 89       	ldd	r25, Y+20	; 0x14
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	69 f7       	brne	.-38     	; 0x1edc <Check_password+0xa8>
    1f02:	14 c0       	rjmp	.+40     	; 0x1f2c <Check_password+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f04:	6d 89       	ldd	r22, Y+21	; 0x15
    1f06:	7e 89       	ldd	r23, Y+22	; 0x16
    1f08:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9c 8b       	std	Y+20, r25	; 0x14
    1f16:	8b 8b       	std	Y+19, r24	; 0x13
    1f18:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1c:	98 8b       	std	Y+16, r25	; 0x10
    1f1e:	8f 87       	std	Y+15, r24	; 0x0f
    1f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f22:	98 89       	ldd	r25, Y+16	; 0x10
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <Check_password+0xf0>
    1f28:	98 8b       	std	Y+16, r25	; 0x10
    1f2a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);

	    uint8 count=0;
    1f2c:	1e 8e       	std	Y+30, r1	; 0x1e
		uint8 same=0;
    1f2e:	1d 8e       	std	Y+29, r1	; 0x1d
		for(count=0;count<(password_length);count++){
    1f30:	1e 8e       	std	Y+30, r1	; 0x1e
    1f32:	9f c0       	rjmp	.+318    	; 0x2072 <Check_password+0x23e>
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	a6 e9       	ldi	r26, 0x96	; 150
    1f3a:	b3 e4       	ldi	r27, 0x43	; 67
    1f3c:	8b 87       	std	Y+11, r24	; 0x0b
    1f3e:	9c 87       	std	Y+12, r25	; 0x0c
    1f40:	ad 87       	std	Y+13, r26	; 0x0d
    1f42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	4a e7       	ldi	r20, 0x7A	; 122
    1f52:	53 e4       	ldi	r21, 0x43	; 67
    1f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	8f 83       	std	Y+7, r24	; 0x07
    1f5e:	98 87       	std	Y+8, r25	; 0x08
    1f60:	a9 87       	std	Y+9, r26	; 0x09
    1f62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f64:	6f 81       	ldd	r22, Y+7	; 0x07
    1f66:	78 85       	ldd	r23, Y+8	; 0x08
    1f68:	89 85       	ldd	r24, Y+9	; 0x09
    1f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e8       	ldi	r20, 0x80	; 128
    1f72:	5f e3       	ldi	r21, 0x3F	; 63
    1f74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f78:	88 23       	and	r24, r24
    1f7a:	2c f4       	brge	.+10     	; 0x1f86 <Check_password+0x152>
		__ticks = 1;
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
    1f84:	3f c0       	rjmp	.+126    	; 0x2004 <Check_password+0x1d0>
	else if (__tmp > 65535)
    1f86:	6f 81       	ldd	r22, Y+7	; 0x07
    1f88:	78 85       	ldd	r23, Y+8	; 0x08
    1f8a:	89 85       	ldd	r24, Y+9	; 0x09
    1f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	3f ef       	ldi	r19, 0xFF	; 255
    1f92:	4f e7       	ldi	r20, 0x7F	; 127
    1f94:	57 e4       	ldi	r21, 0x47	; 71
    1f96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f9a:	18 16       	cp	r1, r24
    1f9c:	4c f5       	brge	.+82     	; 0x1ff0 <Check_password+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e2       	ldi	r20, 0x20	; 32
    1fac:	51 e4       	ldi	r21, 0x41	; 65
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
    1fc6:	0f c0       	rjmp	.+30     	; 0x1fe6 <Check_password+0x1b2>
    1fc8:	89 e1       	ldi	r24, 0x19	; 25
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9c 83       	std	Y+4, r25	; 0x04
    1fce:	8b 83       	std	Y+3, r24	; 0x03
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <Check_password+0x1a0>
    1fd8:	9c 83       	std	Y+4, r25	; 0x04
    1fda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fde:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	69 f7       	brne	.-38     	; 0x1fc8 <Check_password+0x194>
    1fee:	14 c0       	rjmp	.+40     	; 0x2018 <Check_password+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	9e 83       	std	Y+6, r25	; 0x06
    2002:	8d 83       	std	Y+5, r24	; 0x05
    2004:	8d 81       	ldd	r24, Y+5	; 0x05
    2006:	9e 81       	ldd	r25, Y+6	; 0x06
    2008:	9a 83       	std	Y+2, r25	; 0x02
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <Check_password+0x1dc>
    2014:	9a 83       	std	Y+2, r25	; 0x02
    2016:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(300);
			UART_sendByte(R_U_READY);
    2018:	80 e1       	ldi	r24, 0x10	; 16
    201a:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
			password_2= UART_recieveByte();
    201e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <UART_recieveByte>
    2022:	80 93 75 00 	sts	0x0075, r24

			EEPROM_readByte( (FIRST_ADDRESS+count)  ,& pass[count]);
    2026:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2028:	88 2f       	mov	r24, r24
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	80 50       	subi	r24, 0x00	; 0
    202e:	9d 4f       	sbci	r25, 0xFD	; 253
    2030:	ac 01       	movw	r20, r24
    2032:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9c 01       	movw	r18, r24
    203a:	25 57       	subi	r18, 0x75	; 117
    203c:	3f 4f       	sbci	r19, 0xFF	; 255
    203e:	ca 01       	movw	r24, r20
    2040:	b9 01       	movw	r22, r18
    2042:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <EEPROM_readByte>
			if(pass[count]==password_2){same++;}LCD_intgerToString(same);
    2046:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2048:	88 2f       	mov	r24, r24
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	fc 01       	movw	r30, r24
    204e:	e5 57       	subi	r30, 0x75	; 117
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	90 81       	ld	r25, Z
    2054:	80 91 75 00 	lds	r24, 0x0075
    2058:	98 17       	cp	r25, r24
    205a:	19 f4       	brne	.+6      	; 0x2062 <Check_password+0x22e>
    205c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    205e:	8f 5f       	subi	r24, 0xFF	; 255
    2060:	8d 8f       	std	Y+29, r24	; 0x1d
    2062:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_intgerToString>
{
	_delay_ms(1000);

	    uint8 count=0;
		uint8 same=0;
		for(count=0;count<(password_length);count++){
    206c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    206e:	8f 5f       	subi	r24, 0xFF	; 255
    2070:	8e 8f       	std	Y+30, r24	; 0x1e
    2072:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2074:	85 30       	cpi	r24, 0x05	; 5
    2076:	08 f4       	brcc	.+2      	; 0x207a <Check_password+0x246>
    2078:	5d cf       	rjmp	.-326    	; 0x1f34 <Check_password+0x100>

			EEPROM_readByte( (FIRST_ADDRESS+count)  ,& pass[count]);
			if(pass[count]==password_2){same++;}LCD_intgerToString(same);
		}

		UART_sendByte(R_U_READY);
    207a:	80 e1       	ldi	r24, 0x10	; 16
    207c:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
	if(same==5){	UART_sendByte(match);return match;}else{UART_sendByte(missmatch);return missmatch;}
    2080:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2082:	85 30       	cpi	r24, 0x05	; 5
    2084:	31 f4       	brne	.+12     	; 0x2092 <Check_password+0x25e>
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	8f 8f       	std	Y+31, r24	; 0x1f
    2090:	04 c0       	rjmp	.+8      	; 0x209a <Check_password+0x266>
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
    2098:	1f 8e       	std	Y+31, r1	; 0x1f
    209a:	8f 8d       	ldd	r24, Y+31	; 0x1f

}
    209c:	6f 96       	adiw	r28, 0x1f	; 31
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <open>:
  * [Returns]:     none
  ***************************************************************************************************/


void open()
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte()!=R_U_READY);
    20b6:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <UART_recieveByte>
    20ba:	80 31       	cpi	r24, 0x10	; 16
    20bc:	e1 f7       	brne	.-8      	; 0x20b6 <open+0x8>
				door=0;
    20be:	10 92 8b 00 	sts	0x008B, r1
    20c2:	10 92 8a 00 	sts	0x008A, r1
				Motor_C_Wise();
    20c6:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <Motor_C_Wise>
				TimerSetCallBack(Timer_1, timer_door_on);
    20ca:	28 ec       	ldi	r18, 0xC8	; 200
    20cc:	31 e1       	ldi	r19, 0x11	; 17
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	b9 01       	movw	r22, r18
    20d2:	0e 94 08 07 	call	0xe10	; 0xe10 <TimerSetCallBack>
				TimerInit(&timer);
    20d6:	86 e7       	ldi	r24, 0x76	; 118
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	0e 94 34 07 	call	0xe68	; 0xe68 <TimerInit>
				while(door!=opened);
    20de:	80 91 8a 00 	lds	r24, 0x008A
    20e2:	90 91 8b 00 	lds	r25, 0x008B
    20e6:	81 30       	cpi	r24, 0x01	; 1
    20e8:	91 05       	cpc	r25, r1
    20ea:	c9 f7       	brne	.-14     	; 0x20de <open+0x30>
				Motor_Stop();
    20ec:	0e 94 a9 11 	call	0x2352	; 0x2352 <Motor_Stop>
				UART_sendByte(R_U_READY);
    20f0:	80 e1       	ldi	r24, 0x10	; 16
    20f2:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
				TimerSetCallBack(Timer_1, timer_door_stop);
    20f6:	27 e6       	ldi	r18, 0x67	; 103
    20f8:	32 e1       	ldi	r19, 0x12	; 18
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	b9 01       	movw	r22, r18
    20fe:	0e 94 08 07 	call	0xe10	; 0xe10 <TimerSetCallBack>
				TimerInit(&timer);
    2102:	86 e7       	ldi	r24, 0x76	; 118
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	0e 94 34 07 	call	0xe68	; 0xe68 <TimerInit>
				while(door!=stopped);
    210a:	80 91 8a 00 	lds	r24, 0x008A
    210e:	90 91 8b 00 	lds	r25, 0x008B
    2112:	82 30       	cpi	r24, 0x02	; 2
    2114:	91 05       	cpc	r25, r1
    2116:	c9 f7       	brne	.-14     	; 0x210a <open+0x5c>
				Motor_C_C_Wise();
    2118:	0e 94 8a 11 	call	0x2314	; 0x2314 <Motor_C_C_Wise>
				UART_sendByte(R_U_READY);
    211c:	80 e1       	ldi	r24, 0x10	; 16
    211e:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
				TimerSetCallBack(Timer_1, timer_door_off);
    2122:	28 e8       	ldi	r18, 0x88	; 136
    2124:	32 e1       	ldi	r19, 0x12	; 18
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	b9 01       	movw	r22, r18
    212a:	0e 94 08 07 	call	0xe10	; 0xe10 <TimerSetCallBack>
				TimerInit(&timer);
    212e:	86 e7       	ldi	r24, 0x76	; 118
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 94 34 07 	call	0xe68	; 0xe68 <TimerInit>
				while(door!=closed);
    2136:	80 91 8a 00 	lds	r24, 0x008A
    213a:	90 91 8b 00 	lds	r25, 0x008B
    213e:	83 30       	cpi	r24, 0x03	; 3
    2140:	91 05       	cpc	r25, r1
    2142:	c9 f7       	brne	.-14     	; 0x2136 <open+0x88>
				Motor_Stop();
    2144:	0e 94 a9 11 	call	0x2352	; 0x2352 <Motor_Stop>
				TimerDeInit(Timer_1);
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	0e 94 18 0a 	call	0x1430	; 0x1430 <TimerDeInit>
				UART_sendByte(go_options);
    214e:	83 e6       	ldi	r24, 0x63	; 99
    2150:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
				options();
    2154:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <options>
}
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <wrong>:
  * [Returns]:     none
  ***************************************************************************************************/


void wrong()
{
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	2e 97       	sbiw	r28, 0x0e	; 14
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	aa e7       	ldi	r26, 0x7A	; 122
    2178:	b4 e4       	ldi	r27, 0x44	; 68
    217a:	8b 87       	std	Y+11, r24	; 0x0b
    217c:	9c 87       	std	Y+12, r25	; 0x0c
    217e:	ad 87       	std	Y+13, r26	; 0x0d
    2180:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2182:	6b 85       	ldd	r22, Y+11	; 0x0b
    2184:	7c 85       	ldd	r23, Y+12	; 0x0c
    2186:	8d 85       	ldd	r24, Y+13	; 0x0d
    2188:	9e 85       	ldd	r25, Y+14	; 0x0e
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4a e7       	ldi	r20, 0x7A	; 122
    2190:	53 e4       	ldi	r21, 0x43	; 67
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	8f 83       	std	Y+7, r24	; 0x07
    219c:	98 87       	std	Y+8, r25	; 0x08
    219e:	a9 87       	std	Y+9, r26	; 0x09
    21a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21a2:	6f 81       	ldd	r22, Y+7	; 0x07
    21a4:	78 85       	ldd	r23, Y+8	; 0x08
    21a6:	89 85       	ldd	r24, Y+9	; 0x09
    21a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e8       	ldi	r20, 0x80	; 128
    21b0:	5f e3       	ldi	r21, 0x3F	; 63
    21b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b6:	88 23       	and	r24, r24
    21b8:	2c f4       	brge	.+10     	; 0x21c4 <wrong+0x66>
		__ticks = 1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9e 83       	std	Y+6, r25	; 0x06
    21c0:	8d 83       	std	Y+5, r24	; 0x05
    21c2:	3f c0       	rjmp	.+126    	; 0x2242 <wrong+0xe4>
	else if (__tmp > 65535)
    21c4:	6f 81       	ldd	r22, Y+7	; 0x07
    21c6:	78 85       	ldd	r23, Y+8	; 0x08
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	3f ef       	ldi	r19, 0xFF	; 255
    21d0:	4f e7       	ldi	r20, 0x7F	; 127
    21d2:	57 e4       	ldi	r21, 0x47	; 71
    21d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d8:	18 16       	cp	r1, r24
    21da:	4c f5       	brge	.+82     	; 0x222e <wrong+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21de:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e2       	ldi	r20, 0x20	; 32
    21ea:	51 e4       	ldi	r21, 0x41	; 65
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	bc 01       	movw	r22, r24
    21f6:	cd 01       	movw	r24, r26
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <wrong+0xc6>
    2206:	89 e1       	ldi	r24, 0x19	; 25
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9c 83       	std	Y+4, r25	; 0x04
    220c:	8b 83       	std	Y+3, r24	; 0x03
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <wrong+0xb4>
    2216:	9c 83       	std	Y+4, r25	; 0x04
    2218:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	9e 81       	ldd	r25, Y+6	; 0x06
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	9e 83       	std	Y+6, r25	; 0x06
    2222:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	8d 81       	ldd	r24, Y+5	; 0x05
    2226:	9e 81       	ldd	r25, Y+6	; 0x06
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	69 f7       	brne	.-38     	; 0x2206 <wrong+0xa8>
    222c:	14 c0       	rjmp	.+40     	; 0x2256 <wrong+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	9e 81       	ldd	r25, Y+6	; 0x06
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	9a 81       	ldd	r25, Y+2	; 0x02
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <wrong+0xf0>
    2252:	9a 83       	std	Y+2, r25	; 0x02
    2254:	89 83       	std	Y+1, r24	; 0x01
/*its only used to take the same delay as the master so that they can communicate at the same time */

	_delay_ms(1000);


}
    2256:	2e 96       	adiw	r28, 0x0e	; 14
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <Motor_Init>:
  * [Returns]:     none
  ***************************************************************************************************/


void Motor_Init()
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DIRECTION_PORT = SET_BIT(MOTOR_DIRECTION_PORT,MOTOR_IN1 );
    2270:	2a e3       	ldi	r18, 0x3A	; 58
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	aa e3       	ldi	r26, 0x3A	; 58
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	ea e3       	ldi	r30, 0x3A	; 58
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	82 60       	ori	r24, 0x02	; 2
    2280:	8c 93       	st	X, r24
    2282:	8c 91       	ld	r24, X
    2284:	f9 01       	movw	r30, r18
    2286:	80 83       	st	Z, r24
	MOTOR_DIRECTION_PORT = SET_BIT(MOTOR_DIRECTION_PORT,MOTOR_IN2 );
    2288:	2a e3       	ldi	r18, 0x3A	; 58
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	aa e3       	ldi	r26, 0x3A	; 58
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	ea e3       	ldi	r30, 0x3A	; 58
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	88 60       	ori	r24, 0x08	; 8
    2298:	8c 93       	st	X, r24
    229a:	8c 91       	ld	r24, X
    229c:	f9 01       	movw	r30, r18
    229e:	80 83       	st	Z, r24

	MOTOR_DATA_PORT = CLEAR_BIT( MOTOR_DATA_PORT, MOTOR_IN2);
    22a0:	2b e3       	ldi	r18, 0x3B	; 59
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	ab e3       	ldi	r26, 0x3B	; 59
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	eb e3       	ldi	r30, 0x3B	; 59
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	87 7f       	andi	r24, 0xF7	; 247
    22b0:	8c 93       	st	X, r24
    22b2:	8c 91       	ld	r24, X
    22b4:	f9 01       	movw	r30, r18
    22b6:	80 83       	st	Z, r24
	MOTOR_DATA_PORT = CLEAR_BIT( MOTOR_DATA_PORT, MOTOR_IN1);
    22b8:	2b e3       	ldi	r18, 0x3B	; 59
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	ab e3       	ldi	r26, 0x3B	; 59
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	eb e3       	ldi	r30, 0x3B	; 59
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	8d 7f       	andi	r24, 0xFD	; 253
    22c8:	8c 93       	st	X, r24
    22ca:	8c 91       	ld	r24, X
    22cc:	f9 01       	movw	r30, r18
    22ce:	80 83       	st	Z, r24

}
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <Motor_C_Wise>:
  *
  * [Returns]:     none
  ***************************************************************************************************/

void Motor_C_Wise()
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DATA_PORT = CLEAR_BIT(MOTOR_DATA_PORT , MOTOR_IN1);
    22de:	2b e3       	ldi	r18, 0x3B	; 59
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	ab e3       	ldi	r26, 0x3B	; 59
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	eb e3       	ldi	r30, 0x3B	; 59
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	8d 7f       	andi	r24, 0xFD	; 253
    22ee:	8c 93       	st	X, r24
    22f0:	8c 91       	ld	r24, X
    22f2:	f9 01       	movw	r30, r18
    22f4:	80 83       	st	Z, r24
	MOTOR_DATA_PORT = SET_BIT(MOTOR_DATA_PORT , MOTOR_IN2);
    22f6:	2b e3       	ldi	r18, 0x3B	; 59
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	ab e3       	ldi	r26, 0x3B	; 59
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	eb e3       	ldi	r30, 0x3B	; 59
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	88 60       	ori	r24, 0x08	; 8
    2306:	8c 93       	st	X, r24
    2308:	8c 91       	ld	r24, X
    230a:	f9 01       	movw	r30, r18
    230c:	80 83       	st	Z, r24

}
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <Motor_C_C_Wise>:
   *
   * [Returns]:     none
   ***************************************************************************************************/

void Motor_C_C_Wise()
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DATA_PORT = CLEAR_BIT( MOTOR_DATA_PORT, MOTOR_IN2);
    231c:	2b e3       	ldi	r18, 0x3B	; 59
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	ab e3       	ldi	r26, 0x3B	; 59
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	eb e3       	ldi	r30, 0x3B	; 59
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	87 7f       	andi	r24, 0xF7	; 247
    232c:	8c 93       	st	X, r24
    232e:	8c 91       	ld	r24, X
    2330:	f9 01       	movw	r30, r18
    2332:	80 83       	st	Z, r24
	MOTOR_DATA_PORT = SET_BIT (MOTOR_DATA_PORT, MOTOR_IN1);
    2334:	2b e3       	ldi	r18, 0x3B	; 59
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	ab e3       	ldi	r26, 0x3B	; 59
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	eb e3       	ldi	r30, 0x3B	; 59
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	82 60       	ori	r24, 0x02	; 2
    2344:	8c 93       	st	X, r24
    2346:	8c 91       	ld	r24, X
    2348:	f9 01       	movw	r30, r18
    234a:	80 83       	st	Z, r24

}
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <Motor_Stop>:
   * [Out]           none
   *
   * [Returns]:     none
   ***************************************************************************************************/
void Motor_Stop()
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DATA_PORT = CLEAR_BIT(MOTOR_DATA_PORT , MOTOR_IN2);
    235a:	2b e3       	ldi	r18, 0x3B	; 59
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	ab e3       	ldi	r26, 0x3B	; 59
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	eb e3       	ldi	r30, 0x3B	; 59
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	87 7f       	andi	r24, 0xF7	; 247
    236a:	8c 93       	st	X, r24
    236c:	8c 91       	ld	r24, X
    236e:	f9 01       	movw	r30, r18
    2370:	80 83       	st	Z, r24
	MOTOR_DATA_PORT = CLEAR_BIT( MOTOR_DATA_PORT, MOTOR_IN1);
    2372:	2b e3       	ldi	r18, 0x3B	; 59
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	ab e3       	ldi	r26, 0x3B	; 59
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	eb e3       	ldi	r30, 0x3B	; 59
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	8d 7f       	andi	r24, 0xFD	; 253
    2382:	8c 93       	st	X, r24
    2384:	8c 91       	ld	r24, X
    2386:	f9 01       	movw	r30, r18
    2388:	80 83       	st	Z, r24

}
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <timer_door_on>:
 * [Returns]:     none
 ***************************************************************************************************/


void timer_door_on(void)
{
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	2e 97       	sbiw	r28, 0x0e	; 14
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
	tick_1++;
    23a4:	80 91 88 00 	lds	r24, 0x0088
    23a8:	90 91 89 00 	lds	r25, 0x0089
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	90 93 89 00 	sts	0x0089, r25
    23b2:	80 93 88 00 	sts	0x0088, r24
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	aa ef       	ldi	r26, 0xFA	; 250
    23bc:	b3 e4       	ldi	r27, 0x43	; 67
    23be:	8b 87       	std	Y+11, r24	; 0x0b
    23c0:	9c 87       	std	Y+12, r25	; 0x0c
    23c2:	ad 87       	std	Y+13, r26	; 0x0d
    23c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    23cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	4a e7       	ldi	r20, 0x7A	; 122
    23d4:	53 e4       	ldi	r21, 0x43	; 67
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	8f 83       	std	Y+7, r24	; 0x07
    23e0:	98 87       	std	Y+8, r25	; 0x08
    23e2:	a9 87       	std	Y+9, r26	; 0x09
    23e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e6:	6f 81       	ldd	r22, Y+7	; 0x07
    23e8:	78 85       	ldd	r23, Y+8	; 0x08
    23ea:	89 85       	ldd	r24, Y+9	; 0x09
    23ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e8       	ldi	r20, 0x80	; 128
    23f4:	5f e3       	ldi	r21, 0x3F	; 63
    23f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23fa:	88 23       	and	r24, r24
    23fc:	2c f4       	brge	.+10     	; 0x2408 <timer_door_on+0x78>
		__ticks = 1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
    2406:	3f c0       	rjmp	.+126    	; 0x2486 <timer_door_on+0xf6>
	else if (__tmp > 65535)
    2408:	6f 81       	ldd	r22, Y+7	; 0x07
    240a:	78 85       	ldd	r23, Y+8	; 0x08
    240c:	89 85       	ldd	r24, Y+9	; 0x09
    240e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	3f ef       	ldi	r19, 0xFF	; 255
    2414:	4f e7       	ldi	r20, 0x7F	; 127
    2416:	57 e4       	ldi	r21, 0x47	; 71
    2418:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    241c:	18 16       	cp	r1, r24
    241e:	4c f5       	brge	.+82     	; 0x2472 <timer_door_on+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2420:	6b 85       	ldd	r22, Y+11	; 0x0b
    2422:	7c 85       	ldd	r23, Y+12	; 0x0c
    2424:	8d 85       	ldd	r24, Y+13	; 0x0d
    2426:	9e 85       	ldd	r25, Y+14	; 0x0e
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e2       	ldi	r20, 0x20	; 32
    242e:	51 e4       	ldi	r21, 0x41	; 65
    2430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	9e 83       	std	Y+6, r25	; 0x06
    2446:	8d 83       	std	Y+5, r24	; 0x05
    2448:	0f c0       	rjmp	.+30     	; 0x2468 <timer_door_on+0xd8>
    244a:	89 e1       	ldi	r24, 0x19	; 25
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	9c 83       	std	Y+4, r25	; 0x04
    2450:	8b 83       	std	Y+3, r24	; 0x03
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	9c 81       	ldd	r25, Y+4	; 0x04
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <timer_door_on+0xc6>
    245a:	9c 83       	std	Y+4, r25	; 0x04
    245c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245e:	8d 81       	ldd	r24, Y+5	; 0x05
    2460:	9e 81       	ldd	r25, Y+6	; 0x06
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	9e 83       	std	Y+6, r25	; 0x06
    2466:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2468:	8d 81       	ldd	r24, Y+5	; 0x05
    246a:	9e 81       	ldd	r25, Y+6	; 0x06
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	69 f7       	brne	.-38     	; 0x244a <timer_door_on+0xba>
    2470:	14 c0       	rjmp	.+40     	; 0x249a <timer_door_on+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2472:	6f 81       	ldd	r22, Y+7	; 0x07
    2474:	78 85       	ldd	r23, Y+8	; 0x08
    2476:	89 85       	ldd	r24, Y+9	; 0x09
    2478:	9a 85       	ldd	r25, Y+10	; 0x0a
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	9a 81       	ldd	r25, Y+2	; 0x02
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <timer_door_on+0x102>
    2496:	9a 83       	std	Y+2, r25	; 0x02
    2498:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	//LCD_clearScreen();
//	LCD_intgerToString(tick_1);
	if(tick_1 == 10 )
    249a:	80 91 88 00 	lds	r24, 0x0088
    249e:	90 91 89 00 	lds	r25, 0x0089
    24a2:	8a 30       	cpi	r24, 0x0A	; 10
    24a4:	91 05       	cpc	r25, r1
    24a6:	51 f4       	brne	.+20     	; 0x24bc <timer_door_on+0x12c>
	{
		tick_1=0;
    24a8:	10 92 89 00 	sts	0x0089, r1
    24ac:	10 92 88 00 	sts	0x0088, r1
		door=opened;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	90 93 8b 00 	sts	0x008B, r25
    24b8:	80 93 8a 00 	sts	0x008A, r24
	}

}
    24bc:	2e 96       	adiw	r28, 0x0e	; 14
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <timer_door_stop>:
 ***************************************************************************************************/



void timer_door_stop (void)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
	tick_1++;
    24d6:	80 91 88 00 	lds	r24, 0x0088
    24da:	90 91 89 00 	lds	r25, 0x0089
    24de:	01 96       	adiw	r24, 0x01	; 1
    24e0:	90 93 89 00 	sts	0x0089, r25
    24e4:	80 93 88 00 	sts	0x0088, r24
	if(tick_1 == 5 )
    24e8:	80 91 88 00 	lds	r24, 0x0088
    24ec:	90 91 89 00 	lds	r25, 0x0089
    24f0:	85 30       	cpi	r24, 0x05	; 5
    24f2:	91 05       	cpc	r25, r1
    24f4:	51 f4       	brne	.+20     	; 0x250a <timer_door_stop+0x3c>
	{
		tick_1=0;
    24f6:	10 92 89 00 	sts	0x0089, r1
    24fa:	10 92 88 00 	sts	0x0088, r1
		door=stopped;
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	90 93 8b 00 	sts	0x008B, r25
    2506:	80 93 8a 00 	sts	0x008A, r24
	}
}
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <timer_door_off>:




void timer_door_off(void)
{
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	2e 97       	sbiw	r28, 0x0e	; 14
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
	tick_1++;
    2524:	80 91 88 00 	lds	r24, 0x0088
    2528:	90 91 89 00 	lds	r25, 0x0089
    252c:	01 96       	adiw	r24, 0x01	; 1
    252e:	90 93 89 00 	sts	0x0089, r25
    2532:	80 93 88 00 	sts	0x0088, r24
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	aa ef       	ldi	r26, 0xFA	; 250
    253c:	b3 e4       	ldi	r27, 0x43	; 67
    253e:	8b 87       	std	Y+11, r24	; 0x0b
    2540:	9c 87       	std	Y+12, r25	; 0x0c
    2542:	ad 87       	std	Y+13, r26	; 0x0d
    2544:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2546:	6b 85       	ldd	r22, Y+11	; 0x0b
    2548:	7c 85       	ldd	r23, Y+12	; 0x0c
    254a:	8d 85       	ldd	r24, Y+13	; 0x0d
    254c:	9e 85       	ldd	r25, Y+14	; 0x0e
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4a e7       	ldi	r20, 0x7A	; 122
    2554:	53 e4       	ldi	r21, 0x43	; 67
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	8f 83       	std	Y+7, r24	; 0x07
    2560:	98 87       	std	Y+8, r25	; 0x08
    2562:	a9 87       	std	Y+9, r26	; 0x09
    2564:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2566:	6f 81       	ldd	r22, Y+7	; 0x07
    2568:	78 85       	ldd	r23, Y+8	; 0x08
    256a:	89 85       	ldd	r24, Y+9	; 0x09
    256c:	9a 85       	ldd	r25, Y+10	; 0x0a
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e8       	ldi	r20, 0x80	; 128
    2574:	5f e3       	ldi	r21, 0x3F	; 63
    2576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257a:	88 23       	and	r24, r24
    257c:	2c f4       	brge	.+10     	; 0x2588 <timer_door_off+0x78>
		__ticks = 1;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	9e 83       	std	Y+6, r25	; 0x06
    2584:	8d 83       	std	Y+5, r24	; 0x05
    2586:	3f c0       	rjmp	.+126    	; 0x2606 <timer_door_off+0xf6>
	else if (__tmp > 65535)
    2588:	6f 81       	ldd	r22, Y+7	; 0x07
    258a:	78 85       	ldd	r23, Y+8	; 0x08
    258c:	89 85       	ldd	r24, Y+9	; 0x09
    258e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	3f ef       	ldi	r19, 0xFF	; 255
    2594:	4f e7       	ldi	r20, 0x7F	; 127
    2596:	57 e4       	ldi	r21, 0x47	; 71
    2598:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    259c:	18 16       	cp	r1, r24
    259e:	4c f5       	brge	.+82     	; 0x25f2 <timer_door_off+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e2       	ldi	r20, 0x20	; 32
    25ae:	51 e4       	ldi	r21, 0x41	; 65
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9e 83       	std	Y+6, r25	; 0x06
    25c6:	8d 83       	std	Y+5, r24	; 0x05
    25c8:	0f c0       	rjmp	.+30     	; 0x25e8 <timer_door_off+0xd8>
    25ca:	89 e1       	ldi	r24, 0x19	; 25
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	9c 83       	std	Y+4, r25	; 0x04
    25d0:	8b 83       	std	Y+3, r24	; 0x03
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	9c 81       	ldd	r25, Y+4	; 0x04
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <timer_door_off+0xc6>
    25da:	9c 83       	std	Y+4, r25	; 0x04
    25dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25de:	8d 81       	ldd	r24, Y+5	; 0x05
    25e0:	9e 81       	ldd	r25, Y+6	; 0x06
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	9e 83       	std	Y+6, r25	; 0x06
    25e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	69 f7       	brne	.-38     	; 0x25ca <timer_door_off+0xba>
    25f0:	14 c0       	rjmp	.+40     	; 0x261a <timer_door_off+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f2:	6f 81       	ldd	r22, Y+7	; 0x07
    25f4:	78 85       	ldd	r23, Y+8	; 0x08
    25f6:	89 85       	ldd	r24, Y+9	; 0x09
    25f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	9e 83       	std	Y+6, r25	; 0x06
    2604:	8d 83       	std	Y+5, r24	; 0x05
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	9a 83       	std	Y+2, r25	; 0x02
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	9a 81       	ldd	r25, Y+2	; 0x02
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <timer_door_off+0x102>
    2616:	9a 83       	std	Y+2, r25	; 0x02
    2618:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	if(tick_1 == 10 )
    261a:	80 91 88 00 	lds	r24, 0x0088
    261e:	90 91 89 00 	lds	r25, 0x0089
    2622:	8a 30       	cpi	r24, 0x0A	; 10
    2624:	91 05       	cpc	r25, r1
    2626:	51 f4       	brne	.+20     	; 0x263c <timer_door_off+0x12c>
	{
		tick_1=0;
    2628:	10 92 89 00 	sts	0x0089, r1
    262c:	10 92 88 00 	sts	0x0088, r1
		door=closed;
    2630:	83 e0       	ldi	r24, 0x03	; 3
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	90 93 8b 00 	sts	0x008B, r25
    2638:	80 93 8a 00 	sts	0x008A, r24
	}

}
    263c:	2e 96       	adiw	r28, 0x0e	; 14
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <Buzzer_Init>:
  *
  * [Returns]:     none
  ***************************************************************************************************/

void Buzzer_Init()
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
	BUZZER_DIRECTION_PORT = SET_BIT(BUZZER_DIRECTION_PORT, BUZZER_PIN);
    2656:	2a e3       	ldi	r18, 0x3A	; 58
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	aa e3       	ldi	r26, 0x3A	; 58
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	ea e3       	ldi	r30, 0x3A	; 58
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	81 60       	ori	r24, 0x01	; 1
    2666:	8c 93       	st	X, r24
    2668:	8c 91       	ld	r24, X
    266a:	f9 01       	movw	r30, r18
    266c:	80 83       	st	Z, r24
	BUZZER_DATA_PORT = CLEAR_BIT(BUZZER_DATA_PORT, BUZZER_PIN);
    266e:	2b e3       	ldi	r18, 0x3B	; 59
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	ab e3       	ldi	r26, 0x3B	; 59
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	eb e3       	ldi	r30, 0x3B	; 59
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8e 7f       	andi	r24, 0xFE	; 254
    267e:	8c 93       	st	X, r24
    2680:	8c 91       	ld	r24, X
    2682:	f9 01       	movw	r30, r18
    2684:	80 83       	st	Z, r24


}
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <Buzzer_ON>:
 * [Returns]:     none
 ***************************************************************************************************/


void Buzzer_ON()
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(BUZZER_DATA_PORT , BUZZER_PIN );
    2694:	ab e3       	ldi	r26, 0x3B	; 59
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	eb e3       	ldi	r30, 0x3B	; 59
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	81 60       	ori	r24, 0x01	; 1
    26a0:	8c 93       	st	X, r24

}
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <Buzzer_OFF>:
 *
 * [Returns]:     none
 ***************************************************************************************************/

void Buzzer_OFF()
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(BUZZER_DATA_PORT , BUZZER_PIN);
    26b0:	ab e3       	ldi	r26, 0x3B	; 59
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	eb e3       	ldi	r30, 0x3B	; 59
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	8e 7f       	andi	r24, 0xFE	; 254
    26bc:	8c 93       	st	X, r24

}
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <timer_buzzer>:
 * [Returns]:     none
 ***************************************************************************************************/


void timer_buzzer(void)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
	tick++;
    26cc:	80 91 87 00 	lds	r24, 0x0087
    26d0:	90 91 88 00 	lds	r25, 0x0088
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	90 93 88 00 	sts	0x0088, r25
    26da:	80 93 87 00 	sts	0x0087, r24

	if( tick < 15)
    26de:	80 91 87 00 	lds	r24, 0x0087
    26e2:	90 91 88 00 	lds	r25, 0x0088
    26e6:	8f 30       	cpi	r24, 0x0F	; 15
    26e8:	91 05       	cpc	r25, r1
    26ea:	1c f4       	brge	.+6      	; 0x26f2 <timer_buzzer+0x2e>
	{
		Buzzer_ON();
    26ec:	0e 94 46 13 	call	0x268c	; 0x268c <Buzzer_ON>
    26f0:	16 c0       	rjmp	.+44     	; 0x271e <timer_buzzer+0x5a>


	}

	else if(tick == 15 )
    26f2:	80 91 87 00 	lds	r24, 0x0087
    26f6:	90 91 88 00 	lds	r25, 0x0088
    26fa:	8f 30       	cpi	r24, 0x0F	; 15
    26fc:	91 05       	cpc	r25, r1
    26fe:	79 f4       	brne	.+30     	; 0x271e <timer_buzzer+0x5a>
	{
		Buzzer_OFF();
    2700:	0e 94 54 13 	call	0x26a8	; 0x26a8 <Buzzer_OFF>

		TimerDeInit(Timer_1);
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	0e 94 18 0a 	call	0x1430	; 0x1430 <TimerDeInit>

		tick=0;
    270a:	10 92 88 00 	sts	0x0088, r1
    270e:	10 92 87 00 	sts	0x0087, r1

		danger= Safe;
    2712:	84 e6       	ldi	r24, 0x64	; 100
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	90 93 8a 00 	sts	0x008A, r25
    271a:	80 93 89 00 	sts	0x0089, r24

	}

}
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <EEPROM_init>:
#include "i2c.h"
#include "external_eeprom.h"


void EEPROM_init(void)
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    272c:	0e 94 3c 14 	call	0x2878	; 0x2878 <TWI_init>
}
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	00 d0       	rcall	.+0      	; 0x273c <EEPROM_writeByte+0x6>
    273c:	00 d0       	rcall	.+0      	; 0x273e <EEPROM_writeByte+0x8>
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2748:	0e 94 52 14 	call	0x28a4	; 0x28a4 <TWI_start>
    if (TWI_getStatus() != TW_START)
    274c:	0e 94 aa 14 	call	0x2954	; 0x2954 <TWI_getStatus>
    2750:	88 30       	cpi	r24, 0x08	; 8
    2752:	11 f0       	breq	.+4      	; 0x2758 <EEPROM_writeByte+0x22>
        return ERROR;
    2754:	1c 82       	std	Y+4, r1	; 0x04
    2756:	28 c0       	rjmp	.+80     	; 0x27a8 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	80 70       	andi	r24, 0x00	; 0
    275e:	97 70       	andi	r25, 0x07	; 7
    2760:	88 0f       	add	r24, r24
    2762:	89 2f       	mov	r24, r25
    2764:	88 1f       	adc	r24, r24
    2766:	99 0b       	sbc	r25, r25
    2768:	91 95       	neg	r25
    276a:	80 6a       	ori	r24, 0xA0	; 160
    276c:	0e 94 6d 14 	call	0x28da	; 0x28da <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    2770:	0e 94 aa 14 	call	0x2954	; 0x2954 <TWI_getStatus>
    2774:	88 31       	cpi	r24, 0x18	; 24
    2776:	11 f0       	breq	.+4      	; 0x277c <EEPROM_writeByte+0x46>
        return ERROR; 
    2778:	1c 82       	std	Y+4, r1	; 0x04
    277a:	16 c0       	rjmp	.+44     	; 0x27a8 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	0e 94 6d 14 	call	0x28da	; 0x28da <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    2782:	0e 94 aa 14 	call	0x2954	; 0x2954 <TWI_getStatus>
    2786:	88 32       	cpi	r24, 0x28	; 40
    2788:	11 f0       	breq	.+4      	; 0x278e <EEPROM_writeByte+0x58>
        return ERROR;
    278a:	1c 82       	std	Y+4, r1	; 0x04
    278c:	0d c0       	rjmp	.+26     	; 0x27a8 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	0e 94 6d 14 	call	0x28da	; 0x28da <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    2794:	0e 94 aa 14 	call	0x2954	; 0x2954 <TWI_getStatus>
    2798:	88 32       	cpi	r24, 0x28	; 40
    279a:	11 f0       	breq	.+4      	; 0x27a0 <EEPROM_writeByte+0x6a>
        return ERROR;
    279c:	1c 82       	std	Y+4, r1	; 0x04
    279e:	04 c0       	rjmp	.+8      	; 0x27a8 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    27a0:	0e 94 62 14 	call	0x28c4	; 0x28c4 <TWI_stop>
	
    return SUCCESS;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	8c 83       	std	Y+4, r24	; 0x04
    27a8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	00 d0       	rcall	.+0      	; 0x27be <EEPROM_readByte+0x6>
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <EEPROM_readByte+0x8>
    27c0:	0f 92       	push	r0
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	89 83       	std	Y+1, r24	; 0x01
    27ca:	7c 83       	std	Y+4, r23	; 0x04
    27cc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    27ce:	0e 94 52 14 	call	0x28a4	; 0x28a4 <TWI_start>
    if (TWI_getStatus() != TW_START)
    27d2:	0e 94 aa 14 	call	0x2954	; 0x2954 <TWI_getStatus>
    27d6:	88 30       	cpi	r24, 0x08	; 8
    27d8:	11 f0       	breq	.+4      	; 0x27de <EEPROM_readByte+0x26>
        return ERROR;
    27da:	1d 82       	std	Y+5, r1	; 0x05
    27dc:	44 c0       	rjmp	.+136    	; 0x2866 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	9a 81       	ldd	r25, Y+2	; 0x02
    27e2:	80 70       	andi	r24, 0x00	; 0
    27e4:	97 70       	andi	r25, 0x07	; 7
    27e6:	88 0f       	add	r24, r24
    27e8:	89 2f       	mov	r24, r25
    27ea:	88 1f       	adc	r24, r24
    27ec:	99 0b       	sbc	r25, r25
    27ee:	91 95       	neg	r25
    27f0:	80 6a       	ori	r24, 0xA0	; 160
    27f2:	0e 94 6d 14 	call	0x28da	; 0x28da <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    27f6:	0e 94 aa 14 	call	0x2954	; 0x2954 <TWI_getStatus>
    27fa:	88 31       	cpi	r24, 0x18	; 24
    27fc:	11 f0       	breq	.+4      	; 0x2802 <EEPROM_readByte+0x4a>
        return ERROR;
    27fe:	1d 82       	std	Y+5, r1	; 0x05
    2800:	32 c0       	rjmp	.+100    	; 0x2866 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	0e 94 6d 14 	call	0x28da	; 0x28da <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    2808:	0e 94 aa 14 	call	0x2954	; 0x2954 <TWI_getStatus>
    280c:	88 32       	cpi	r24, 0x28	; 40
    280e:	11 f0       	breq	.+4      	; 0x2814 <EEPROM_readByte+0x5c>
        return ERROR;
    2810:	1d 82       	std	Y+5, r1	; 0x05
    2812:	29 c0       	rjmp	.+82     	; 0x2866 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2814:	0e 94 52 14 	call	0x28a4	; 0x28a4 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    2818:	0e 94 aa 14 	call	0x2954	; 0x2954 <TWI_getStatus>
    281c:	80 31       	cpi	r24, 0x10	; 16
    281e:	11 f0       	breq	.+4      	; 0x2824 <EEPROM_readByte+0x6c>
        return ERROR;
    2820:	1d 82       	std	Y+5, r1	; 0x05
    2822:	21 c0       	rjmp	.+66     	; 0x2866 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	80 70       	andi	r24, 0x00	; 0
    282a:	97 70       	andi	r25, 0x07	; 7
    282c:	88 0f       	add	r24, r24
    282e:	89 2f       	mov	r24, r25
    2830:	88 1f       	adc	r24, r24
    2832:	99 0b       	sbc	r25, r25
    2834:	91 95       	neg	r25
    2836:	81 6a       	ori	r24, 0xA1	; 161
    2838:	0e 94 6d 14 	call	0x28da	; 0x28da <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    283c:	0e 94 aa 14 	call	0x2954	; 0x2954 <TWI_getStatus>
    2840:	80 34       	cpi	r24, 0x40	; 64
    2842:	11 f0       	breq	.+4      	; 0x2848 <EEPROM_readByte+0x90>
        return ERROR;
    2844:	1d 82       	std	Y+5, r1	; 0x05
    2846:	0f c0       	rjmp	.+30     	; 0x2866 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    2848:	0e 94 97 14 	call	0x292e	; 0x292e <TWI_readWithNACK>
    284c:	eb 81       	ldd	r30, Y+3	; 0x03
    284e:	fc 81       	ldd	r31, Y+4	; 0x04
    2850:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    2852:	0e 94 aa 14 	call	0x2954	; 0x2954 <TWI_getStatus>
    2856:	88 35       	cpi	r24, 0x58	; 88
    2858:	11 f0       	breq	.+4      	; 0x285e <EEPROM_readByte+0xa6>
        return ERROR;
    285a:	1d 82       	std	Y+5, r1	; 0x05
    285c:	04 c0       	rjmp	.+8      	; 0x2866 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    285e:	0e 94 62 14 	call	0x28c4	; 0x28c4 <TWI_stop>
    return SUCCESS;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	8d 83       	std	Y+5, r24	; 0x05
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2868:	0f 90       	pop	r0
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <TWI_init>:

 
#include "i2c.h"

void TWI_init(void)
{
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    2880:	e0 e2       	ldi	r30, 0x20	; 32
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	82 e0       	ldi	r24, 0x02	; 2
    2886:	80 83       	st	Z, r24
	TWSR = 0x00;
    2888:	e1 e2       	ldi	r30, 0x21	; 33
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    288e:	e2 e2       	ldi	r30, 0x22	; 34
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2896:	e6 e5       	ldi	r30, 0x56	; 86
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	84 e0       	ldi	r24, 0x04	; 4
    289c:	80 83       	st	Z, r24
}
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	08 95       	ret

000028a4 <TWI_start>:

void TWI_start(void)
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    28ac:	e6 e5       	ldi	r30, 0x56	; 86
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	84 ea       	ldi	r24, 0xA4	; 164
    28b2:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    28b4:	e6 e5       	ldi	r30, 0x56	; 86
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	88 23       	and	r24, r24
    28bc:	dc f7       	brge	.-10     	; 0x28b4 <TWI_start+0x10>
}
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <TWI_stop>:

void TWI_stop(void)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    28cc:	e6 e5       	ldi	r30, 0x56	; 86
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	84 e9       	ldi	r24, 0x94	; 148
    28d2:	80 83       	st	Z, r24
}
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <TWI_write>:

void TWI_write(uint8 data)
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	0f 92       	push	r0
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    28e6:	e3 e2       	ldi	r30, 0x23	; 35
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    28ee:	e6 e5       	ldi	r30, 0x56	; 86
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	84 e8       	ldi	r24, 0x84	; 132
    28f4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    28f6:	e6 e5       	ldi	r30, 0x56	; 86
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	88 23       	and	r24, r24
    28fe:	dc f7       	brge	.-10     	; 0x28f6 <TWI_write+0x1c>
}
    2900:	0f 90       	pop	r0
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2910:	e6 e5       	ldi	r30, 0x56	; 86
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	84 ec       	ldi	r24, 0xC4	; 196
    2916:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2918:	e6 e5       	ldi	r30, 0x56	; 86
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	88 23       	and	r24, r24
    2920:	dc f7       	brge	.-10     	; 0x2918 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    2922:	e3 e2       	ldi	r30, 0x23	; 35
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
}
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	08 95       	ret

0000292e <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    292e:	df 93       	push	r29
    2930:	cf 93       	push	r28
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2936:	e6 e5       	ldi	r30, 0x56	; 86
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	84 e8       	ldi	r24, 0x84	; 132
    293c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    293e:	e6 e5       	ldi	r30, 0x56	; 86
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	88 23       	and	r24, r24
    2946:	dc f7       	brge	.-10     	; 0x293e <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2948:	e3 e2       	ldi	r30, 0x23	; 35
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
}
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	0f 92       	push	r0
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    295e:	e1 e2       	ldi	r30, 0x21	; 33
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	88 7f       	andi	r24, 0xF8	; 248
    2966:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2968:	89 81       	ldd	r24, Y+1	; 0x01
}
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    297a:	a7 e3       	ldi	r26, 0x37	; 55
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e7 e3       	ldi	r30, 0x37	; 55
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	87 60       	ori	r24, 0x07	; 7
    2986:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    2988:	a7 e3       	ldi	r26, 0x37	; 55
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e7 e3       	ldi	r30, 0x37	; 55
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	80 6f       	ori	r24, 0xF0	; 240
    2994:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    2996:	82 e0       	ldi	r24, 0x02	; 2
    2998:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    299c:	88 e2       	ldi	r24, 0x28	; 40
    299e:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    29a2:	8c e0       	ldi	r24, 0x0C	; 12
    29a4:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_sendCommand>
}
    29ae:	cf 91       	pop	r28
    29b0:	df 91       	pop	r29
    29b2:	08 95       	ret

000029b4 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    29b4:	0f 93       	push	r16
    29b6:	1f 93       	push	r17
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
    29c0:	c3 56       	subi	r28, 0x63	; 99
    29c2:	d0 40       	sbci	r29, 0x00	; 0
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	de bf       	out	0x3e, r29	; 62
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	cd bf       	out	0x3d, r28	; 61
    29ce:	fe 01       	movw	r30, r28
    29d0:	ed 59       	subi	r30, 0x9D	; 157
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    29d6:	a8 e3       	ldi	r26, 0x38	; 56
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e8 e3       	ldi	r30, 0x38	; 56
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	8e 7f       	andi	r24, 0xFE	; 254
    29e2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    29e4:	a8 e3       	ldi	r26, 0x38	; 56
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e8 e3       	ldi	r30, 0x38	; 56
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	8d 7f       	andi	r24, 0xFD	; 253
    29f0:	8c 93       	st	X, r24
    29f2:	fe 01       	movw	r30, r28
    29f4:	e1 5a       	subi	r30, 0xA1	; 161
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	a0 e8       	ldi	r26, 0x80	; 128
    29fe:	bf e3       	ldi	r27, 0x3F	; 63
    2a00:	80 83       	st	Z, r24
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	a2 83       	std	Z+2, r26	; 0x02
    2a06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a08:	8e 01       	movw	r16, r28
    2a0a:	05 5a       	subi	r16, 0xA5	; 165
    2a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e1 5a       	subi	r30, 0xA1	; 161
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	60 81       	ld	r22, Z
    2a16:	71 81       	ldd	r23, Z+1	; 0x01
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	4a e7       	ldi	r20, 0x7A	; 122
    2a22:	53 e4       	ldi	r21, 0x43	; 67
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	80 83       	st	Z, r24
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	a2 83       	std	Z+2, r26	; 0x02
    2a34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a36:	fe 01       	movw	r30, r28
    2a38:	e5 5a       	subi	r30, 0xA5	; 165
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	60 81       	ld	r22, Z
    2a3e:	71 81       	ldd	r23, Z+1	; 0x01
    2a40:	82 81       	ldd	r24, Z+2	; 0x02
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	44 f4       	brge	.+16     	; 0x2a64 <LCD_sendCommand+0xb0>
		__ticks = 1;
    2a54:	fe 01       	movw	r30, r28
    2a56:	e7 5a       	subi	r30, 0xA7	; 167
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
    2a62:	64 c0       	rjmp	.+200    	; 0x2b2c <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    2a64:	fe 01       	movw	r30, r28
    2a66:	e5 5a       	subi	r30, 0xA5	; 165
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	60 81       	ld	r22, Z
    2a6c:	71 81       	ldd	r23, Z+1	; 0x01
    2a6e:	82 81       	ldd	r24, Z+2	; 0x02
    2a70:	93 81       	ldd	r25, Z+3	; 0x03
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	3f ef       	ldi	r19, 0xFF	; 255
    2a76:	4f e7       	ldi	r20, 0x7F	; 127
    2a78:	57 e4       	ldi	r21, 0x47	; 71
    2a7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a7e:	18 16       	cp	r1, r24
    2a80:	0c f0       	brlt	.+2      	; 0x2a84 <LCD_sendCommand+0xd0>
    2a82:	43 c0       	rjmp	.+134    	; 0x2b0a <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a84:	fe 01       	movw	r30, r28
    2a86:	e1 5a       	subi	r30, 0xA1	; 161
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	60 81       	ld	r22, Z
    2a8c:	71 81       	ldd	r23, Z+1	; 0x01
    2a8e:	82 81       	ldd	r24, Z+2	; 0x02
    2a90:	93 81       	ldd	r25, Z+3	; 0x03
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e2       	ldi	r20, 0x20	; 32
    2a98:	51 e4       	ldi	r21, 0x41	; 65
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8e 01       	movw	r16, r28
    2aa4:	07 5a       	subi	r16, 0xA7	; 167
    2aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	91 83       	std	Z+1, r25	; 0x01
    2ab8:	80 83       	st	Z, r24
    2aba:	1f c0       	rjmp	.+62     	; 0x2afa <LCD_sendCommand+0x146>
    2abc:	fe 01       	movw	r30, r28
    2abe:	e9 5a       	subi	r30, 0xA9	; 169
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	89 e1       	ldi	r24, 0x19	; 25
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	80 83       	st	Z, r24
    2aca:	fe 01       	movw	r30, r28
    2acc:	e9 5a       	subi	r30, 0xA9	; 169
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 81       	ld	r24, Z
    2ad2:	91 81       	ldd	r25, Z+1	; 0x01
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <LCD_sendCommand+0x120>
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e9 5a       	subi	r30, 0xA9	; 169
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae2:	de 01       	movw	r26, r28
    2ae4:	a7 5a       	subi	r26, 0xA7	; 167
    2ae6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e7 5a       	subi	r30, 0xA7	; 167
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	91 81       	ldd	r25, Z+1	; 0x01
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	11 96       	adiw	r26, 0x01	; 1
    2af6:	9c 93       	st	X, r25
    2af8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afa:	fe 01       	movw	r30, r28
    2afc:	e7 5a       	subi	r30, 0xA7	; 167
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	80 81       	ld	r24, Z
    2b02:	91 81       	ldd	r25, Z+1	; 0x01
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	d1 f6       	brne	.-76     	; 0x2abc <LCD_sendCommand+0x108>
    2b08:	27 c0       	rjmp	.+78     	; 0x2b58 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0a:	8e 01       	movw	r16, r28
    2b0c:	07 5a       	subi	r16, 0xA7	; 167
    2b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b10:	fe 01       	movw	r30, r28
    2b12:	e5 5a       	subi	r30, 0xA5	; 165
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	f8 01       	movw	r30, r16
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	80 83       	st	Z, r24
    2b2c:	de 01       	movw	r26, r28
    2b2e:	ab 5a       	subi	r26, 0xAB	; 171
    2b30:	bf 4f       	sbci	r27, 0xFF	; 255
    2b32:	fe 01       	movw	r30, r28
    2b34:	e7 5a       	subi	r30, 0xA7	; 167
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	80 81       	ld	r24, Z
    2b3a:	91 81       	ldd	r25, Z+1	; 0x01
    2b3c:	8d 93       	st	X+, r24
    2b3e:	9c 93       	st	X, r25
    2b40:	fe 01       	movw	r30, r28
    2b42:	eb 5a       	subi	r30, 0xAB	; 171
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	80 81       	ld	r24, Z
    2b48:	91 81       	ldd	r25, Z+1	; 0x01
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <LCD_sendCommand+0x196>
    2b4e:	fe 01       	movw	r30, r28
    2b50:	eb 5a       	subi	r30, 0xAB	; 171
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	91 83       	std	Z+1, r25	; 0x01
    2b56:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2b58:	a8 e3       	ldi	r26, 0x38	; 56
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	e8 e3       	ldi	r30, 0x38	; 56
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	84 60       	ori	r24, 0x04	; 4
    2b64:	8c 93       	st	X, r24
    2b66:	fe 01       	movw	r30, r28
    2b68:	ef 5a       	subi	r30, 0xAF	; 175
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	a0 e8       	ldi	r26, 0x80	; 128
    2b72:	bf e3       	ldi	r27, 0x3F	; 63
    2b74:	80 83       	st	Z, r24
    2b76:	91 83       	std	Z+1, r25	; 0x01
    2b78:	a2 83       	std	Z+2, r26	; 0x02
    2b7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7c:	8e 01       	movw	r16, r28
    2b7e:	03 5b       	subi	r16, 0xB3	; 179
    2b80:	1f 4f       	sbci	r17, 0xFF	; 255
    2b82:	fe 01       	movw	r30, r28
    2b84:	ef 5a       	subi	r30, 0xAF	; 175
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	60 81       	ld	r22, Z
    2b8a:	71 81       	ldd	r23, Z+1	; 0x01
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	93 81       	ldd	r25, Z+3	; 0x03
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	4a e7       	ldi	r20, 0x7A	; 122
    2b96:	53 e4       	ldi	r21, 0x43	; 67
    2b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	f8 01       	movw	r30, r16
    2ba2:	80 83       	st	Z, r24
    2ba4:	91 83       	std	Z+1, r25	; 0x01
    2ba6:	a2 83       	std	Z+2, r26	; 0x02
    2ba8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2baa:	fe 01       	movw	r30, r28
    2bac:	e3 5b       	subi	r30, 0xB3	; 179
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	60 81       	ld	r22, Z
    2bb2:	71 81       	ldd	r23, Z+1	; 0x01
    2bb4:	82 81       	ldd	r24, Z+2	; 0x02
    2bb6:	93 81       	ldd	r25, Z+3	; 0x03
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e8       	ldi	r20, 0x80	; 128
    2bbe:	5f e3       	ldi	r21, 0x3F	; 63
    2bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc4:	88 23       	and	r24, r24
    2bc6:	44 f4       	brge	.+16     	; 0x2bd8 <LCD_sendCommand+0x224>
		__ticks = 1;
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e5 5b       	subi	r30, 0xB5	; 181
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	80 83       	st	Z, r24
    2bd6:	64 c0       	rjmp	.+200    	; 0x2ca0 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e3 5b       	subi	r30, 0xB3	; 179
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	60 81       	ld	r22, Z
    2be0:	71 81       	ldd	r23, Z+1	; 0x01
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	3f ef       	ldi	r19, 0xFF	; 255
    2bea:	4f e7       	ldi	r20, 0x7F	; 127
    2bec:	57 e4       	ldi	r21, 0x47	; 71
    2bee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bf2:	18 16       	cp	r1, r24
    2bf4:	0c f0       	brlt	.+2      	; 0x2bf8 <LCD_sendCommand+0x244>
    2bf6:	43 c0       	rjmp	.+134    	; 0x2c7e <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ef 5a       	subi	r30, 0xAF	; 175
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	60 81       	ld	r22, Z
    2c00:	71 81       	ldd	r23, Z+1	; 0x01
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	93 81       	ldd	r25, Z+3	; 0x03
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e2       	ldi	r20, 0x20	; 32
    2c0c:	51 e4       	ldi	r21, 0x41	; 65
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	8e 01       	movw	r16, r28
    2c18:	05 5b       	subi	r16, 0xB5	; 181
    2c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1c:	bc 01       	movw	r22, r24
    2c1e:	cd 01       	movw	r24, r26
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	f8 01       	movw	r30, r16
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	80 83       	st	Z, r24
    2c2e:	1f c0       	rjmp	.+62     	; 0x2c6e <LCD_sendCommand+0x2ba>
    2c30:	fe 01       	movw	r30, r28
    2c32:	e7 5b       	subi	r30, 0xB7	; 183
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	89 e1       	ldi	r24, 0x19	; 25
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	91 83       	std	Z+1, r25	; 0x01
    2c3c:	80 83       	st	Z, r24
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e7 5b       	subi	r30, 0xB7	; 183
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	80 81       	ld	r24, Z
    2c46:	91 81       	ldd	r25, Z+1	; 0x01
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <LCD_sendCommand+0x294>
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e7 5b       	subi	r30, 0xB7	; 183
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	91 83       	std	Z+1, r25	; 0x01
    2c54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c56:	de 01       	movw	r26, r28
    2c58:	a5 5b       	subi	r26, 0xB5	; 181
    2c5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	e5 5b       	subi	r30, 0xB5	; 181
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	80 81       	ld	r24, Z
    2c64:	91 81       	ldd	r25, Z+1	; 0x01
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	11 96       	adiw	r26, 0x01	; 1
    2c6a:	9c 93       	st	X, r25
    2c6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e5 5b       	subi	r30, 0xB5	; 181
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	91 81       	ldd	r25, Z+1	; 0x01
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	d1 f6       	brne	.-76     	; 0x2c30 <LCD_sendCommand+0x27c>
    2c7c:	27 c0       	rjmp	.+78     	; 0x2ccc <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7e:	8e 01       	movw	r16, r28
    2c80:	05 5b       	subi	r16, 0xB5	; 181
    2c82:	1f 4f       	sbci	r17, 0xFF	; 255
    2c84:	fe 01       	movw	r30, r28
    2c86:	e3 5b       	subi	r30, 0xB3	; 179
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	60 81       	ld	r22, Z
    2c8c:	71 81       	ldd	r23, Z+1	; 0x01
    2c8e:	82 81       	ldd	r24, Z+2	; 0x02
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	f8 01       	movw	r30, r16
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	80 83       	st	Z, r24
    2ca0:	de 01       	movw	r26, r28
    2ca2:	a9 5b       	subi	r26, 0xB9	; 185
    2ca4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e5 5b       	subi	r30, 0xB5	; 181
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	80 81       	ld	r24, Z
    2cae:	91 81       	ldd	r25, Z+1	; 0x01
    2cb0:	8d 93       	st	X+, r24
    2cb2:	9c 93       	st	X, r25
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e9 5b       	subi	r30, 0xB9	; 185
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	80 81       	ld	r24, Z
    2cbc:	91 81       	ldd	r25, Z+1	; 0x01
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <LCD_sendCommand+0x30a>
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e9 5b       	subi	r30, 0xB9	; 185
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	91 83       	std	Z+1, r25	; 0x01
    2cca:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    2ccc:	a8 e3       	ldi	r26, 0x38	; 56
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	e8 e3       	ldi	r30, 0x38	; 56
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	98 2f       	mov	r25, r24
    2cd8:	9f 70       	andi	r25, 0x0F	; 15
    2cda:	fe 01       	movw	r30, r28
    2cdc:	ed 59       	subi	r30, 0x9D	; 157
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	80 7f       	andi	r24, 0xF0	; 240
    2ce4:	89 2b       	or	r24, r25
    2ce6:	8c 93       	st	X, r24
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ed 5b       	subi	r30, 0xBD	; 189
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	a0 e8       	ldi	r26, 0x80	; 128
    2cf4:	bf e3       	ldi	r27, 0x3F	; 63
    2cf6:	80 83       	st	Z, r24
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	a2 83       	std	Z+2, r26	; 0x02
    2cfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfe:	8e 01       	movw	r16, r28
    2d00:	01 5c       	subi	r16, 0xC1	; 193
    2d02:	1f 4f       	sbci	r17, 0xFF	; 255
    2d04:	fe 01       	movw	r30, r28
    2d06:	ed 5b       	subi	r30, 0xBD	; 189
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	60 81       	ld	r22, Z
    2d0c:	71 81       	ldd	r23, Z+1	; 0x01
    2d0e:	82 81       	ldd	r24, Z+2	; 0x02
    2d10:	93 81       	ldd	r25, Z+3	; 0x03
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	4a e7       	ldi	r20, 0x7A	; 122
    2d18:	53 e4       	ldi	r21, 0x43	; 67
    2d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	f8 01       	movw	r30, r16
    2d24:	80 83       	st	Z, r24
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	a2 83       	std	Z+2, r26	; 0x02
    2d2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	ff 96       	adiw	r30, 0x3f	; 63
    2d30:	60 81       	ld	r22, Z
    2d32:	71 81       	ldd	r23, Z+1	; 0x01
    2d34:	82 81       	ldd	r24, Z+2	; 0x02
    2d36:	93 81       	ldd	r25, Z+3	; 0x03
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e8       	ldi	r20, 0x80	; 128
    2d3e:	5f e3       	ldi	r21, 0x3F	; 63
    2d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d44:	88 23       	and	r24, r24
    2d46:	2c f4       	brge	.+10     	; 0x2d52 <LCD_sendCommand+0x39e>
		__ticks = 1;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	9e af       	std	Y+62, r25	; 0x3e
    2d4e:	8d af       	std	Y+61, r24	; 0x3d
    2d50:	46 c0       	rjmp	.+140    	; 0x2dde <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    2d52:	fe 01       	movw	r30, r28
    2d54:	ff 96       	adiw	r30, 0x3f	; 63
    2d56:	60 81       	ld	r22, Z
    2d58:	71 81       	ldd	r23, Z+1	; 0x01
    2d5a:	82 81       	ldd	r24, Z+2	; 0x02
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	3f ef       	ldi	r19, 0xFF	; 255
    2d62:	4f e7       	ldi	r20, 0x7F	; 127
    2d64:	57 e4       	ldi	r21, 0x47	; 71
    2d66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d6a:	18 16       	cp	r1, r24
    2d6c:	64 f5       	brge	.+88     	; 0x2dc6 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6e:	fe 01       	movw	r30, r28
    2d70:	ed 5b       	subi	r30, 0xBD	; 189
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	60 81       	ld	r22, Z
    2d76:	71 81       	ldd	r23, Z+1	; 0x01
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e2       	ldi	r20, 0x20	; 32
    2d82:	51 e4       	ldi	r21, 0x41	; 65
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	9e af       	std	Y+62, r25	; 0x3e
    2d9a:	8d af       	std	Y+61, r24	; 0x3d
    2d9c:	0f c0       	rjmp	.+30     	; 0x2dbc <LCD_sendCommand+0x408>
    2d9e:	89 e1       	ldi	r24, 0x19	; 25
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	9c af       	std	Y+60, r25	; 0x3c
    2da4:	8b af       	std	Y+59, r24	; 0x3b
    2da6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2da8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <LCD_sendCommand+0x3f6>
    2dae:	9c af       	std	Y+60, r25	; 0x3c
    2db0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2db4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	9e af       	std	Y+62, r25	; 0x3e
    2dba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	69 f7       	brne	.-38     	; 0x2d9e <LCD_sendCommand+0x3ea>
    2dc4:	16 c0       	rjmp	.+44     	; 0x2df2 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	ff 96       	adiw	r30, 0x3f	; 63
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	9e af       	std	Y+62, r25	; 0x3e
    2ddc:	8d af       	std	Y+61, r24	; 0x3d
    2dde:	8d ad       	ldd	r24, Y+61	; 0x3d
    2de0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2de2:	9a af       	std	Y+58, r25	; 0x3a
    2de4:	89 af       	std	Y+57, r24	; 0x39
    2de6:	89 ad       	ldd	r24, Y+57	; 0x39
    2de8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <LCD_sendCommand+0x436>
    2dee:	9a af       	std	Y+58, r25	; 0x3a
    2df0:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2df2:	a8 e3       	ldi	r26, 0x38	; 56
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	e8 e3       	ldi	r30, 0x38	; 56
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	8b 7f       	andi	r24, 0xFB	; 251
    2dfe:	8c 93       	st	X, r24
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	a0 e8       	ldi	r26, 0x80	; 128
    2e06:	bf e3       	ldi	r27, 0x3F	; 63
    2e08:	8d ab       	std	Y+53, r24	; 0x35
    2e0a:	9e ab       	std	Y+54, r25	; 0x36
    2e0c:	af ab       	std	Y+55, r26	; 0x37
    2e0e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e10:	6d a9       	ldd	r22, Y+53	; 0x35
    2e12:	7e a9       	ldd	r23, Y+54	; 0x36
    2e14:	8f a9       	ldd	r24, Y+55	; 0x37
    2e16:	98 ad       	ldd	r25, Y+56	; 0x38
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	4a e7       	ldi	r20, 0x7A	; 122
    2e1e:	53 e4       	ldi	r21, 0x43	; 67
    2e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	89 ab       	std	Y+49, r24	; 0x31
    2e2a:	9a ab       	std	Y+50, r25	; 0x32
    2e2c:	ab ab       	std	Y+51, r26	; 0x33
    2e2e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e30:	69 a9       	ldd	r22, Y+49	; 0x31
    2e32:	7a a9       	ldd	r23, Y+50	; 0x32
    2e34:	8b a9       	ldd	r24, Y+51	; 0x33
    2e36:	9c a9       	ldd	r25, Y+52	; 0x34
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	40 e8       	ldi	r20, 0x80	; 128
    2e3e:	5f e3       	ldi	r21, 0x3F	; 63
    2e40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e44:	88 23       	and	r24, r24
    2e46:	2c f4       	brge	.+10     	; 0x2e52 <LCD_sendCommand+0x49e>
		__ticks = 1;
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	98 ab       	std	Y+48, r25	; 0x30
    2e4e:	8f a7       	std	Y+47, r24	; 0x2f
    2e50:	3f c0       	rjmp	.+126    	; 0x2ed0 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    2e52:	69 a9       	ldd	r22, Y+49	; 0x31
    2e54:	7a a9       	ldd	r23, Y+50	; 0x32
    2e56:	8b a9       	ldd	r24, Y+51	; 0x33
    2e58:	9c a9       	ldd	r25, Y+52	; 0x34
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	3f ef       	ldi	r19, 0xFF	; 255
    2e5e:	4f e7       	ldi	r20, 0x7F	; 127
    2e60:	57 e4       	ldi	r21, 0x47	; 71
    2e62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e66:	18 16       	cp	r1, r24
    2e68:	4c f5       	brge	.+82     	; 0x2ebc <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6a:	6d a9       	ldd	r22, Y+53	; 0x35
    2e6c:	7e a9       	ldd	r23, Y+54	; 0x36
    2e6e:	8f a9       	ldd	r24, Y+55	; 0x37
    2e70:	98 ad       	ldd	r25, Y+56	; 0x38
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e2       	ldi	r20, 0x20	; 32
    2e78:	51 e4       	ldi	r21, 0x41	; 65
    2e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	bc 01       	movw	r22, r24
    2e84:	cd 01       	movw	r24, r26
    2e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	98 ab       	std	Y+48, r25	; 0x30
    2e90:	8f a7       	std	Y+47, r24	; 0x2f
    2e92:	0f c0       	rjmp	.+30     	; 0x2eb2 <LCD_sendCommand+0x4fe>
    2e94:	89 e1       	ldi	r24, 0x19	; 25
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	9e a7       	std	Y+46, r25	; 0x2e
    2e9a:	8d a7       	std	Y+45, r24	; 0x2d
    2e9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e9e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <LCD_sendCommand+0x4ec>
    2ea4:	9e a7       	std	Y+46, r25	; 0x2e
    2ea6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eaa:	98 a9       	ldd	r25, Y+48	; 0x30
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	98 ab       	std	Y+48, r25	; 0x30
    2eb0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb4:	98 a9       	ldd	r25, Y+48	; 0x30
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	69 f7       	brne	.-38     	; 0x2e94 <LCD_sendCommand+0x4e0>
    2eba:	14 c0       	rjmp	.+40     	; 0x2ee4 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebc:	69 a9       	ldd	r22, Y+49	; 0x31
    2ebe:	7a a9       	ldd	r23, Y+50	; 0x32
    2ec0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ec2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	98 ab       	std	Y+48, r25	; 0x30
    2ece:	8f a7       	std	Y+47, r24	; 0x2f
    2ed0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ed4:	9c a7       	std	Y+44, r25	; 0x2c
    2ed6:	8b a7       	std	Y+43, r24	; 0x2b
    2ed8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eda:	9c a5       	ldd	r25, Y+44	; 0x2c
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <LCD_sendCommand+0x528>
    2ee0:	9c a7       	std	Y+44, r25	; 0x2c
    2ee2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2ee4:	a8 e3       	ldi	r26, 0x38	; 56
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	e8 e3       	ldi	r30, 0x38	; 56
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	84 60       	ori	r24, 0x04	; 4
    2ef0:	8c 93       	st	X, r24
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	a0 e8       	ldi	r26, 0x80	; 128
    2ef8:	bf e3       	ldi	r27, 0x3F	; 63
    2efa:	8f a3       	std	Y+39, r24	; 0x27
    2efc:	98 a7       	std	Y+40, r25	; 0x28
    2efe:	a9 a7       	std	Y+41, r26	; 0x29
    2f00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f02:	6f a1       	ldd	r22, Y+39	; 0x27
    2f04:	78 a5       	ldd	r23, Y+40	; 0x28
    2f06:	89 a5       	ldd	r24, Y+41	; 0x29
    2f08:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4a e7       	ldi	r20, 0x7A	; 122
    2f10:	53 e4       	ldi	r21, 0x43	; 67
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	8b a3       	std	Y+35, r24	; 0x23
    2f1c:	9c a3       	std	Y+36, r25	; 0x24
    2f1e:	ad a3       	std	Y+37, r26	; 0x25
    2f20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f22:	6b a1       	ldd	r22, Y+35	; 0x23
    2f24:	7c a1       	ldd	r23, Y+36	; 0x24
    2f26:	8d a1       	ldd	r24, Y+37	; 0x25
    2f28:	9e a1       	ldd	r25, Y+38	; 0x26
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e8       	ldi	r20, 0x80	; 128
    2f30:	5f e3       	ldi	r21, 0x3F	; 63
    2f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f36:	88 23       	and	r24, r24
    2f38:	2c f4       	brge	.+10     	; 0x2f44 <LCD_sendCommand+0x590>
		__ticks = 1;
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	9a a3       	std	Y+34, r25	; 0x22
    2f40:	89 a3       	std	Y+33, r24	; 0x21
    2f42:	3f c0       	rjmp	.+126    	; 0x2fc2 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    2f44:	6b a1       	ldd	r22, Y+35	; 0x23
    2f46:	7c a1       	ldd	r23, Y+36	; 0x24
    2f48:	8d a1       	ldd	r24, Y+37	; 0x25
    2f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	3f ef       	ldi	r19, 0xFF	; 255
    2f50:	4f e7       	ldi	r20, 0x7F	; 127
    2f52:	57 e4       	ldi	r21, 0x47	; 71
    2f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f58:	18 16       	cp	r1, r24
    2f5a:	4c f5       	brge	.+82     	; 0x2fae <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f5e:	78 a5       	ldd	r23, Y+40	; 0x28
    2f60:	89 a5       	ldd	r24, Y+41	; 0x29
    2f62:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e2       	ldi	r20, 0x20	; 32
    2f6a:	51 e4       	ldi	r21, 0x41	; 65
    2f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9a a3       	std	Y+34, r25	; 0x22
    2f82:	89 a3       	std	Y+33, r24	; 0x21
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <LCD_sendCommand+0x5f0>
    2f86:	89 e1       	ldi	r24, 0x19	; 25
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	98 a3       	std	Y+32, r25	; 0x20
    2f8c:	8f 8f       	std	Y+31, r24	; 0x1f
    2f8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f90:	98 a1       	ldd	r25, Y+32	; 0x20
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <LCD_sendCommand+0x5de>
    2f96:	98 a3       	std	Y+32, r25	; 0x20
    2f98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	9a a3       	std	Y+34, r25	; 0x22
    2fa2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	69 f7       	brne	.-38     	; 0x2f86 <LCD_sendCommand+0x5d2>
    2fac:	14 c0       	rjmp	.+40     	; 0x2fd6 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fae:	6b a1       	ldd	r22, Y+35	; 0x23
    2fb0:	7c a1       	ldd	r23, Y+36	; 0x24
    2fb2:	8d a1       	ldd	r24, Y+37	; 0x25
    2fb4:	9e a1       	ldd	r25, Y+38	; 0x26
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	9a a3       	std	Y+34, r25	; 0x22
    2fc0:	89 a3       	std	Y+33, r24	; 0x21
    2fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc6:	9e 8f       	std	Y+30, r25	; 0x1e
    2fc8:	8d 8f       	std	Y+29, r24	; 0x1d
    2fca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fcc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <LCD_sendCommand+0x61a>
    2fd2:	9e 8f       	std	Y+30, r25	; 0x1e
    2fd4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    2fd6:	a8 e3       	ldi	r26, 0x38	; 56
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	e8 e3       	ldi	r30, 0x38	; 56
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	80 81       	ld	r24, Z
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	2f 70       	andi	r18, 0x0F	; 15
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	ed 59       	subi	r30, 0x9D	; 157
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	80 81       	ld	r24, Z
    2fec:	88 2f       	mov	r24, r24
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	82 95       	swap	r24
    2ff2:	92 95       	swap	r25
    2ff4:	90 7f       	andi	r25, 0xF0	; 240
    2ff6:	98 27       	eor	r25, r24
    2ff8:	80 7f       	andi	r24, 0xF0	; 240
    2ffa:	98 27       	eor	r25, r24
    2ffc:	82 2b       	or	r24, r18
    2ffe:	8c 93       	st	X, r24
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	a0 e8       	ldi	r26, 0x80	; 128
    3006:	bf e3       	ldi	r27, 0x3F	; 63
    3008:	89 8f       	std	Y+25, r24	; 0x19
    300a:	9a 8f       	std	Y+26, r25	; 0x1a
    300c:	ab 8f       	std	Y+27, r26	; 0x1b
    300e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3010:	69 8d       	ldd	r22, Y+25	; 0x19
    3012:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3014:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3016:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	4a e7       	ldi	r20, 0x7A	; 122
    301e:	53 e4       	ldi	r21, 0x43	; 67
    3020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	8d 8b       	std	Y+21, r24	; 0x15
    302a:	9e 8b       	std	Y+22, r25	; 0x16
    302c:	af 8b       	std	Y+23, r26	; 0x17
    302e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3030:	6d 89       	ldd	r22, Y+21	; 0x15
    3032:	7e 89       	ldd	r23, Y+22	; 0x16
    3034:	8f 89       	ldd	r24, Y+23	; 0x17
    3036:	98 8d       	ldd	r25, Y+24	; 0x18
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e8       	ldi	r20, 0x80	; 128
    303e:	5f e3       	ldi	r21, 0x3F	; 63
    3040:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3044:	88 23       	and	r24, r24
    3046:	2c f4       	brge	.+10     	; 0x3052 <LCD_sendCommand+0x69e>
		__ticks = 1;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	9c 8b       	std	Y+20, r25	; 0x14
    304e:	8b 8b       	std	Y+19, r24	; 0x13
    3050:	3f c0       	rjmp	.+126    	; 0x30d0 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    3052:	6d 89       	ldd	r22, Y+21	; 0x15
    3054:	7e 89       	ldd	r23, Y+22	; 0x16
    3056:	8f 89       	ldd	r24, Y+23	; 0x17
    3058:	98 8d       	ldd	r25, Y+24	; 0x18
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	3f ef       	ldi	r19, 0xFF	; 255
    305e:	4f e7       	ldi	r20, 0x7F	; 127
    3060:	57 e4       	ldi	r21, 0x47	; 71
    3062:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3066:	18 16       	cp	r1, r24
    3068:	4c f5       	brge	.+82     	; 0x30bc <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306a:	69 8d       	ldd	r22, Y+25	; 0x19
    306c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    306e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3070:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e2       	ldi	r20, 0x20	; 32
    3078:	51 e4       	ldi	r21, 0x41	; 65
    307a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	bc 01       	movw	r22, r24
    3084:	cd 01       	movw	r24, r26
    3086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	9c 8b       	std	Y+20, r25	; 0x14
    3090:	8b 8b       	std	Y+19, r24	; 0x13
    3092:	0f c0       	rjmp	.+30     	; 0x30b2 <LCD_sendCommand+0x6fe>
    3094:	89 e1       	ldi	r24, 0x19	; 25
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	9a 8b       	std	Y+18, r25	; 0x12
    309a:	89 8b       	std	Y+17, r24	; 0x11
    309c:	89 89       	ldd	r24, Y+17	; 0x11
    309e:	9a 89       	ldd	r25, Y+18	; 0x12
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <LCD_sendCommand+0x6ec>
    30a4:	9a 8b       	std	Y+18, r25	; 0x12
    30a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a8:	8b 89       	ldd	r24, Y+19	; 0x13
    30aa:	9c 89       	ldd	r25, Y+20	; 0x14
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	9c 8b       	std	Y+20, r25	; 0x14
    30b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b2:	8b 89       	ldd	r24, Y+19	; 0x13
    30b4:	9c 89       	ldd	r25, Y+20	; 0x14
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	69 f7       	brne	.-38     	; 0x3094 <LCD_sendCommand+0x6e0>
    30ba:	14 c0       	rjmp	.+40     	; 0x30e4 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30bc:	6d 89       	ldd	r22, Y+21	; 0x15
    30be:	7e 89       	ldd	r23, Y+22	; 0x16
    30c0:	8f 89       	ldd	r24, Y+23	; 0x17
    30c2:	98 8d       	ldd	r25, Y+24	; 0x18
    30c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	9c 8b       	std	Y+20, r25	; 0x14
    30ce:	8b 8b       	std	Y+19, r24	; 0x13
    30d0:	8b 89       	ldd	r24, Y+19	; 0x13
    30d2:	9c 89       	ldd	r25, Y+20	; 0x14
    30d4:	98 8b       	std	Y+16, r25	; 0x10
    30d6:	8f 87       	std	Y+15, r24	; 0x0f
    30d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    30da:	98 89       	ldd	r25, Y+16	; 0x10
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <LCD_sendCommand+0x728>
    30e0:	98 8b       	std	Y+16, r25	; 0x10
    30e2:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    30e4:	a8 e3       	ldi	r26, 0x38	; 56
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	e8 e3       	ldi	r30, 0x38	; 56
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	8b 7f       	andi	r24, 0xFB	; 251
    30f0:	8c 93       	st	X, r24
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	a0 e8       	ldi	r26, 0x80	; 128
    30f8:	bf e3       	ldi	r27, 0x3F	; 63
    30fa:	8b 87       	std	Y+11, r24	; 0x0b
    30fc:	9c 87       	std	Y+12, r25	; 0x0c
    30fe:	ad 87       	std	Y+13, r26	; 0x0d
    3100:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3102:	6b 85       	ldd	r22, Y+11	; 0x0b
    3104:	7c 85       	ldd	r23, Y+12	; 0x0c
    3106:	8d 85       	ldd	r24, Y+13	; 0x0d
    3108:	9e 85       	ldd	r25, Y+14	; 0x0e
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	4a e7       	ldi	r20, 0x7A	; 122
    3110:	53 e4       	ldi	r21, 0x43	; 67
    3112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	8f 83       	std	Y+7, r24	; 0x07
    311c:	98 87       	std	Y+8, r25	; 0x08
    311e:	a9 87       	std	Y+9, r26	; 0x09
    3120:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3122:	6f 81       	ldd	r22, Y+7	; 0x07
    3124:	78 85       	ldd	r23, Y+8	; 0x08
    3126:	89 85       	ldd	r24, Y+9	; 0x09
    3128:	9a 85       	ldd	r25, Y+10	; 0x0a
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e8       	ldi	r20, 0x80	; 128
    3130:	5f e3       	ldi	r21, 0x3F	; 63
    3132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3136:	88 23       	and	r24, r24
    3138:	2c f4       	brge	.+10     	; 0x3144 <LCD_sendCommand+0x790>
		__ticks = 1;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	9e 83       	std	Y+6, r25	; 0x06
    3140:	8d 83       	std	Y+5, r24	; 0x05
    3142:	3f c0       	rjmp	.+126    	; 0x31c2 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    3144:	6f 81       	ldd	r22, Y+7	; 0x07
    3146:	78 85       	ldd	r23, Y+8	; 0x08
    3148:	89 85       	ldd	r24, Y+9	; 0x09
    314a:	9a 85       	ldd	r25, Y+10	; 0x0a
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	3f ef       	ldi	r19, 0xFF	; 255
    3150:	4f e7       	ldi	r20, 0x7F	; 127
    3152:	57 e4       	ldi	r21, 0x47	; 71
    3154:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3158:	18 16       	cp	r1, r24
    315a:	4c f5       	brge	.+82     	; 0x31ae <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315c:	6b 85       	ldd	r22, Y+11	; 0x0b
    315e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3160:	8d 85       	ldd	r24, Y+13	; 0x0d
    3162:	9e 85       	ldd	r25, Y+14	; 0x0e
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e2       	ldi	r20, 0x20	; 32
    316a:	51 e4       	ldi	r21, 0x41	; 65
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	bc 01       	movw	r22, r24
    3176:	cd 01       	movw	r24, r26
    3178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	9e 83       	std	Y+6, r25	; 0x06
    3182:	8d 83       	std	Y+5, r24	; 0x05
    3184:	0f c0       	rjmp	.+30     	; 0x31a4 <LCD_sendCommand+0x7f0>
    3186:	89 e1       	ldi	r24, 0x19	; 25
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	9c 83       	std	Y+4, r25	; 0x04
    318c:	8b 83       	std	Y+3, r24	; 0x03
    318e:	8b 81       	ldd	r24, Y+3	; 0x03
    3190:	9c 81       	ldd	r25, Y+4	; 0x04
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <LCD_sendCommand+0x7de>
    3196:	9c 83       	std	Y+4, r25	; 0x04
    3198:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319a:	8d 81       	ldd	r24, Y+5	; 0x05
    319c:	9e 81       	ldd	r25, Y+6	; 0x06
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	9e 83       	std	Y+6, r25	; 0x06
    31a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a4:	8d 81       	ldd	r24, Y+5	; 0x05
    31a6:	9e 81       	ldd	r25, Y+6	; 0x06
    31a8:	00 97       	sbiw	r24, 0x00	; 0
    31aa:	69 f7       	brne	.-38     	; 0x3186 <LCD_sendCommand+0x7d2>
    31ac:	14 c0       	rjmp	.+40     	; 0x31d6 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ae:	6f 81       	ldd	r22, Y+7	; 0x07
    31b0:	78 85       	ldd	r23, Y+8	; 0x08
    31b2:	89 85       	ldd	r24, Y+9	; 0x09
    31b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	9e 83       	std	Y+6, r25	; 0x06
    31c0:	8d 83       	std	Y+5, r24	; 0x05
    31c2:	8d 81       	ldd	r24, Y+5	; 0x05
    31c4:	9e 81       	ldd	r25, Y+6	; 0x06
    31c6:	9a 83       	std	Y+2, r25	; 0x02
    31c8:	89 83       	std	Y+1, r24	; 0x01
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	9a 81       	ldd	r25, Y+2	; 0x02
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	f1 f7       	brne	.-4      	; 0x31ce <LCD_sendCommand+0x81a>
    31d2:	9a 83       	std	Y+2, r25	; 0x02
    31d4:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    31d6:	cd 59       	subi	r28, 0x9D	; 157
    31d8:	df 4f       	sbci	r29, 0xFF	; 255
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	cf 91       	pop	r28
    31e6:	df 91       	pop	r29
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	08 95       	ret

000031ee <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	df 93       	push	r29
    31f4:	cf 93       	push	r28
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	c3 56       	subi	r28, 0x63	; 99
    31fc:	d0 40       	sbci	r29, 0x00	; 0
    31fe:	0f b6       	in	r0, 0x3f	; 63
    3200:	f8 94       	cli
    3202:	de bf       	out	0x3e, r29	; 62
    3204:	0f be       	out	0x3f, r0	; 63
    3206:	cd bf       	out	0x3d, r28	; 61
    3208:	fe 01       	movw	r30, r28
    320a:	ed 59       	subi	r30, 0x9D	; 157
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    3210:	a8 e3       	ldi	r26, 0x38	; 56
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	e8 e3       	ldi	r30, 0x38	; 56
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	81 60       	ori	r24, 0x01	; 1
    321c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    321e:	a8 e3       	ldi	r26, 0x38	; 56
    3220:	b0 e0       	ldi	r27, 0x00	; 0
    3222:	e8 e3       	ldi	r30, 0x38	; 56
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	80 81       	ld	r24, Z
    3228:	8d 7f       	andi	r24, 0xFD	; 253
    322a:	8c 93       	st	X, r24
    322c:	fe 01       	movw	r30, r28
    322e:	e1 5a       	subi	r30, 0xA1	; 161
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	a0 e8       	ldi	r26, 0x80	; 128
    3238:	bf e3       	ldi	r27, 0x3F	; 63
    323a:	80 83       	st	Z, r24
    323c:	91 83       	std	Z+1, r25	; 0x01
    323e:	a2 83       	std	Z+2, r26	; 0x02
    3240:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3242:	8e 01       	movw	r16, r28
    3244:	05 5a       	subi	r16, 0xA5	; 165
    3246:	1f 4f       	sbci	r17, 0xFF	; 255
    3248:	fe 01       	movw	r30, r28
    324a:	e1 5a       	subi	r30, 0xA1	; 161
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	4a e7       	ldi	r20, 0x7A	; 122
    325c:	53 e4       	ldi	r21, 0x43	; 67
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	f8 01       	movw	r30, r16
    3268:	80 83       	st	Z, r24
    326a:	91 83       	std	Z+1, r25	; 0x01
    326c:	a2 83       	std	Z+2, r26	; 0x02
    326e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3270:	fe 01       	movw	r30, r28
    3272:	e5 5a       	subi	r30, 0xA5	; 165
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	60 81       	ld	r22, Z
    3278:	71 81       	ldd	r23, Z+1	; 0x01
    327a:	82 81       	ldd	r24, Z+2	; 0x02
    327c:	93 81       	ldd	r25, Z+3	; 0x03
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	40 e8       	ldi	r20, 0x80	; 128
    3284:	5f e3       	ldi	r21, 0x3F	; 63
    3286:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    328a:	88 23       	and	r24, r24
    328c:	44 f4       	brge	.+16     	; 0x329e <LCD_displayCharacter+0xb0>
		__ticks = 1;
    328e:	fe 01       	movw	r30, r28
    3290:	e7 5a       	subi	r30, 0xA7	; 167
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	91 83       	std	Z+1, r25	; 0x01
    329a:	80 83       	st	Z, r24
    329c:	64 c0       	rjmp	.+200    	; 0x3366 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    329e:	fe 01       	movw	r30, r28
    32a0:	e5 5a       	subi	r30, 0xA5	; 165
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	60 81       	ld	r22, Z
    32a6:	71 81       	ldd	r23, Z+1	; 0x01
    32a8:	82 81       	ldd	r24, Z+2	; 0x02
    32aa:	93 81       	ldd	r25, Z+3	; 0x03
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	3f ef       	ldi	r19, 0xFF	; 255
    32b0:	4f e7       	ldi	r20, 0x7F	; 127
    32b2:	57 e4       	ldi	r21, 0x47	; 71
    32b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32b8:	18 16       	cp	r1, r24
    32ba:	0c f0       	brlt	.+2      	; 0x32be <LCD_displayCharacter+0xd0>
    32bc:	43 c0       	rjmp	.+134    	; 0x3344 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32be:	fe 01       	movw	r30, r28
    32c0:	e1 5a       	subi	r30, 0xA1	; 161
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	60 81       	ld	r22, Z
    32c6:	71 81       	ldd	r23, Z+1	; 0x01
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	93 81       	ldd	r25, Z+3	; 0x03
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e2       	ldi	r20, 0x20	; 32
    32d2:	51 e4       	ldi	r21, 0x41	; 65
    32d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	8e 01       	movw	r16, r28
    32de:	07 5a       	subi	r16, 0xA7	; 167
    32e0:	1f 4f       	sbci	r17, 0xFF	; 255
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	f8 01       	movw	r30, r16
    32f0:	91 83       	std	Z+1, r25	; 0x01
    32f2:	80 83       	st	Z, r24
    32f4:	1f c0       	rjmp	.+62     	; 0x3334 <LCD_displayCharacter+0x146>
    32f6:	fe 01       	movw	r30, r28
    32f8:	e9 5a       	subi	r30, 0xA9	; 169
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	89 e1       	ldi	r24, 0x19	; 25
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	91 83       	std	Z+1, r25	; 0x01
    3302:	80 83       	st	Z, r24
    3304:	fe 01       	movw	r30, r28
    3306:	e9 5a       	subi	r30, 0xA9	; 169
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	80 81       	ld	r24, Z
    330c:	91 81       	ldd	r25, Z+1	; 0x01
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	f1 f7       	brne	.-4      	; 0x330e <LCD_displayCharacter+0x120>
    3312:	fe 01       	movw	r30, r28
    3314:	e9 5a       	subi	r30, 0xA9	; 169
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331c:	de 01       	movw	r26, r28
    331e:	a7 5a       	subi	r26, 0xA7	; 167
    3320:	bf 4f       	sbci	r27, 0xFF	; 255
    3322:	fe 01       	movw	r30, r28
    3324:	e7 5a       	subi	r30, 0xA7	; 167
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	80 81       	ld	r24, Z
    332a:	91 81       	ldd	r25, Z+1	; 0x01
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	11 96       	adiw	r26, 0x01	; 1
    3330:	9c 93       	st	X, r25
    3332:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3334:	fe 01       	movw	r30, r28
    3336:	e7 5a       	subi	r30, 0xA7	; 167
    3338:	ff 4f       	sbci	r31, 0xFF	; 255
    333a:	80 81       	ld	r24, Z
    333c:	91 81       	ldd	r25, Z+1	; 0x01
    333e:	00 97       	sbiw	r24, 0x00	; 0
    3340:	d1 f6       	brne	.-76     	; 0x32f6 <LCD_displayCharacter+0x108>
    3342:	27 c0       	rjmp	.+78     	; 0x3392 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3344:	8e 01       	movw	r16, r28
    3346:	07 5a       	subi	r16, 0xA7	; 167
    3348:	1f 4f       	sbci	r17, 0xFF	; 255
    334a:	fe 01       	movw	r30, r28
    334c:	e5 5a       	subi	r30, 0xA5	; 165
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	60 81       	ld	r22, Z
    3352:	71 81       	ldd	r23, Z+1	; 0x01
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	f8 01       	movw	r30, r16
    3362:	91 83       	std	Z+1, r25	; 0x01
    3364:	80 83       	st	Z, r24
    3366:	de 01       	movw	r26, r28
    3368:	ab 5a       	subi	r26, 0xAB	; 171
    336a:	bf 4f       	sbci	r27, 0xFF	; 255
    336c:	fe 01       	movw	r30, r28
    336e:	e7 5a       	subi	r30, 0xA7	; 167
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	80 81       	ld	r24, Z
    3374:	91 81       	ldd	r25, Z+1	; 0x01
    3376:	8d 93       	st	X+, r24
    3378:	9c 93       	st	X, r25
    337a:	fe 01       	movw	r30, r28
    337c:	eb 5a       	subi	r30, 0xAB	; 171
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	80 81       	ld	r24, Z
    3382:	91 81       	ldd	r25, Z+1	; 0x01
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	f1 f7       	brne	.-4      	; 0x3384 <LCD_displayCharacter+0x196>
    3388:	fe 01       	movw	r30, r28
    338a:	eb 5a       	subi	r30, 0xAB	; 171
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    3392:	a8 e3       	ldi	r26, 0x38	; 56
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	e8 e3       	ldi	r30, 0x38	; 56
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	84 60       	ori	r24, 0x04	; 4
    339e:	8c 93       	st	X, r24
    33a0:	fe 01       	movw	r30, r28
    33a2:	ef 5a       	subi	r30, 0xAF	; 175
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	a0 e8       	ldi	r26, 0x80	; 128
    33ac:	bf e3       	ldi	r27, 0x3F	; 63
    33ae:	80 83       	st	Z, r24
    33b0:	91 83       	std	Z+1, r25	; 0x01
    33b2:	a2 83       	std	Z+2, r26	; 0x02
    33b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b6:	8e 01       	movw	r16, r28
    33b8:	03 5b       	subi	r16, 0xB3	; 179
    33ba:	1f 4f       	sbci	r17, 0xFF	; 255
    33bc:	fe 01       	movw	r30, r28
    33be:	ef 5a       	subi	r30, 0xAF	; 175
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	60 81       	ld	r22, Z
    33c4:	71 81       	ldd	r23, Z+1	; 0x01
    33c6:	82 81       	ldd	r24, Z+2	; 0x02
    33c8:	93 81       	ldd	r25, Z+3	; 0x03
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	4a e7       	ldi	r20, 0x7A	; 122
    33d0:	53 e4       	ldi	r21, 0x43	; 67
    33d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	f8 01       	movw	r30, r16
    33dc:	80 83       	st	Z, r24
    33de:	91 83       	std	Z+1, r25	; 0x01
    33e0:	a2 83       	std	Z+2, r26	; 0x02
    33e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33e4:	fe 01       	movw	r30, r28
    33e6:	e3 5b       	subi	r30, 0xB3	; 179
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	60 81       	ld	r22, Z
    33ec:	71 81       	ldd	r23, Z+1	; 0x01
    33ee:	82 81       	ldd	r24, Z+2	; 0x02
    33f0:	93 81       	ldd	r25, Z+3	; 0x03
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	40 e8       	ldi	r20, 0x80	; 128
    33f8:	5f e3       	ldi	r21, 0x3F	; 63
    33fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33fe:	88 23       	and	r24, r24
    3400:	44 f4       	brge	.+16     	; 0x3412 <LCD_displayCharacter+0x224>
		__ticks = 1;
    3402:	fe 01       	movw	r30, r28
    3404:	e5 5b       	subi	r30, 0xB5	; 181
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	91 83       	std	Z+1, r25	; 0x01
    340e:	80 83       	st	Z, r24
    3410:	64 c0       	rjmp	.+200    	; 0x34da <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    3412:	fe 01       	movw	r30, r28
    3414:	e3 5b       	subi	r30, 0xB3	; 179
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	60 81       	ld	r22, Z
    341a:	71 81       	ldd	r23, Z+1	; 0x01
    341c:	82 81       	ldd	r24, Z+2	; 0x02
    341e:	93 81       	ldd	r25, Z+3	; 0x03
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	3f ef       	ldi	r19, 0xFF	; 255
    3424:	4f e7       	ldi	r20, 0x7F	; 127
    3426:	57 e4       	ldi	r21, 0x47	; 71
    3428:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    342c:	18 16       	cp	r1, r24
    342e:	0c f0       	brlt	.+2      	; 0x3432 <LCD_displayCharacter+0x244>
    3430:	43 c0       	rjmp	.+134    	; 0x34b8 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3432:	fe 01       	movw	r30, r28
    3434:	ef 5a       	subi	r30, 0xAF	; 175
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	60 81       	ld	r22, Z
    343a:	71 81       	ldd	r23, Z+1	; 0x01
    343c:	82 81       	ldd	r24, Z+2	; 0x02
    343e:	93 81       	ldd	r25, Z+3	; 0x03
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e2       	ldi	r20, 0x20	; 32
    3446:	51 e4       	ldi	r21, 0x41	; 65
    3448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	8e 01       	movw	r16, r28
    3452:	05 5b       	subi	r16, 0xB5	; 181
    3454:	1f 4f       	sbci	r17, 0xFF	; 255
    3456:	bc 01       	movw	r22, r24
    3458:	cd 01       	movw	r24, r26
    345a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	f8 01       	movw	r30, r16
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	80 83       	st	Z, r24
    3468:	1f c0       	rjmp	.+62     	; 0x34a8 <LCD_displayCharacter+0x2ba>
    346a:	fe 01       	movw	r30, r28
    346c:	e7 5b       	subi	r30, 0xB7	; 183
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	89 e1       	ldi	r24, 0x19	; 25
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	91 83       	std	Z+1, r25	; 0x01
    3476:	80 83       	st	Z, r24
    3478:	fe 01       	movw	r30, r28
    347a:	e7 5b       	subi	r30, 0xB7	; 183
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	80 81       	ld	r24, Z
    3480:	91 81       	ldd	r25, Z+1	; 0x01
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <LCD_displayCharacter+0x294>
    3486:	fe 01       	movw	r30, r28
    3488:	e7 5b       	subi	r30, 0xB7	; 183
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	91 83       	std	Z+1, r25	; 0x01
    348e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3490:	de 01       	movw	r26, r28
    3492:	a5 5b       	subi	r26, 0xB5	; 181
    3494:	bf 4f       	sbci	r27, 0xFF	; 255
    3496:	fe 01       	movw	r30, r28
    3498:	e5 5b       	subi	r30, 0xB5	; 181
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	80 81       	ld	r24, Z
    349e:	91 81       	ldd	r25, Z+1	; 0x01
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	11 96       	adiw	r26, 0x01	; 1
    34a4:	9c 93       	st	X, r25
    34a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a8:	fe 01       	movw	r30, r28
    34aa:	e5 5b       	subi	r30, 0xB5	; 181
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	80 81       	ld	r24, Z
    34b0:	91 81       	ldd	r25, Z+1	; 0x01
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	d1 f6       	brne	.-76     	; 0x346a <LCD_displayCharacter+0x27c>
    34b6:	27 c0       	rjmp	.+78     	; 0x3506 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b8:	8e 01       	movw	r16, r28
    34ba:	05 5b       	subi	r16, 0xB5	; 181
    34bc:	1f 4f       	sbci	r17, 0xFF	; 255
    34be:	fe 01       	movw	r30, r28
    34c0:	e3 5b       	subi	r30, 0xB3	; 179
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	82 81       	ldd	r24, Z+2	; 0x02
    34ca:	93 81       	ldd	r25, Z+3	; 0x03
    34cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	f8 01       	movw	r30, r16
    34d6:	91 83       	std	Z+1, r25	; 0x01
    34d8:	80 83       	st	Z, r24
    34da:	de 01       	movw	r26, r28
    34dc:	a9 5b       	subi	r26, 0xB9	; 185
    34de:	bf 4f       	sbci	r27, 0xFF	; 255
    34e0:	fe 01       	movw	r30, r28
    34e2:	e5 5b       	subi	r30, 0xB5	; 181
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	80 81       	ld	r24, Z
    34e8:	91 81       	ldd	r25, Z+1	; 0x01
    34ea:	8d 93       	st	X+, r24
    34ec:	9c 93       	st	X, r25
    34ee:	fe 01       	movw	r30, r28
    34f0:	e9 5b       	subi	r30, 0xB9	; 185
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	80 81       	ld	r24, Z
    34f6:	91 81       	ldd	r25, Z+1	; 0x01
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	f1 f7       	brne	.-4      	; 0x34f8 <LCD_displayCharacter+0x30a>
    34fc:	fe 01       	movw	r30, r28
    34fe:	e9 5b       	subi	r30, 0xB9	; 185
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	91 83       	std	Z+1, r25	; 0x01
    3504:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    3506:	a8 e3       	ldi	r26, 0x38	; 56
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	e8 e3       	ldi	r30, 0x38	; 56
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	98 2f       	mov	r25, r24
    3512:	9f 70       	andi	r25, 0x0F	; 15
    3514:	fe 01       	movw	r30, r28
    3516:	ed 59       	subi	r30, 0x9D	; 157
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	80 81       	ld	r24, Z
    351c:	80 7f       	andi	r24, 0xF0	; 240
    351e:	89 2b       	or	r24, r25
    3520:	8c 93       	st	X, r24
    3522:	fe 01       	movw	r30, r28
    3524:	ed 5b       	subi	r30, 0xBD	; 189
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	a0 e8       	ldi	r26, 0x80	; 128
    352e:	bf e3       	ldi	r27, 0x3F	; 63
    3530:	80 83       	st	Z, r24
    3532:	91 83       	std	Z+1, r25	; 0x01
    3534:	a2 83       	std	Z+2, r26	; 0x02
    3536:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3538:	8e 01       	movw	r16, r28
    353a:	01 5c       	subi	r16, 0xC1	; 193
    353c:	1f 4f       	sbci	r17, 0xFF	; 255
    353e:	fe 01       	movw	r30, r28
    3540:	ed 5b       	subi	r30, 0xBD	; 189
    3542:	ff 4f       	sbci	r31, 0xFF	; 255
    3544:	60 81       	ld	r22, Z
    3546:	71 81       	ldd	r23, Z+1	; 0x01
    3548:	82 81       	ldd	r24, Z+2	; 0x02
    354a:	93 81       	ldd	r25, Z+3	; 0x03
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	4a e7       	ldi	r20, 0x7A	; 122
    3552:	53 e4       	ldi	r21, 0x43	; 67
    3554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	f8 01       	movw	r30, r16
    355e:	80 83       	st	Z, r24
    3560:	91 83       	std	Z+1, r25	; 0x01
    3562:	a2 83       	std	Z+2, r26	; 0x02
    3564:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3566:	fe 01       	movw	r30, r28
    3568:	ff 96       	adiw	r30, 0x3f	; 63
    356a:	60 81       	ld	r22, Z
    356c:	71 81       	ldd	r23, Z+1	; 0x01
    356e:	82 81       	ldd	r24, Z+2	; 0x02
    3570:	93 81       	ldd	r25, Z+3	; 0x03
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	40 e8       	ldi	r20, 0x80	; 128
    3578:	5f e3       	ldi	r21, 0x3F	; 63
    357a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    357e:	88 23       	and	r24, r24
    3580:	2c f4       	brge	.+10     	; 0x358c <LCD_displayCharacter+0x39e>
		__ticks = 1;
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	9e af       	std	Y+62, r25	; 0x3e
    3588:	8d af       	std	Y+61, r24	; 0x3d
    358a:	46 c0       	rjmp	.+140    	; 0x3618 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    358c:	fe 01       	movw	r30, r28
    358e:	ff 96       	adiw	r30, 0x3f	; 63
    3590:	60 81       	ld	r22, Z
    3592:	71 81       	ldd	r23, Z+1	; 0x01
    3594:	82 81       	ldd	r24, Z+2	; 0x02
    3596:	93 81       	ldd	r25, Z+3	; 0x03
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	3f ef       	ldi	r19, 0xFF	; 255
    359c:	4f e7       	ldi	r20, 0x7F	; 127
    359e:	57 e4       	ldi	r21, 0x47	; 71
    35a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35a4:	18 16       	cp	r1, r24
    35a6:	64 f5       	brge	.+88     	; 0x3600 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a8:	fe 01       	movw	r30, r28
    35aa:	ed 5b       	subi	r30, 0xBD	; 189
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	60 81       	ld	r22, Z
    35b0:	71 81       	ldd	r23, Z+1	; 0x01
    35b2:	82 81       	ldd	r24, Z+2	; 0x02
    35b4:	93 81       	ldd	r25, Z+3	; 0x03
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	40 e2       	ldi	r20, 0x20	; 32
    35bc:	51 e4       	ldi	r21, 0x41	; 65
    35be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	bc 01       	movw	r22, r24
    35c8:	cd 01       	movw	r24, r26
    35ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	9e af       	std	Y+62, r25	; 0x3e
    35d4:	8d af       	std	Y+61, r24	; 0x3d
    35d6:	0f c0       	rjmp	.+30     	; 0x35f6 <LCD_displayCharacter+0x408>
    35d8:	89 e1       	ldi	r24, 0x19	; 25
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	9c af       	std	Y+60, r25	; 0x3c
    35de:	8b af       	std	Y+59, r24	; 0x3b
    35e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    35e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	f1 f7       	brne	.-4      	; 0x35e4 <LCD_displayCharacter+0x3f6>
    35e8:	9c af       	std	Y+60, r25	; 0x3c
    35ea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    35ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	9e af       	std	Y+62, r25	; 0x3e
    35f4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    35f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    35fa:	00 97       	sbiw	r24, 0x00	; 0
    35fc:	69 f7       	brne	.-38     	; 0x35d8 <LCD_displayCharacter+0x3ea>
    35fe:	16 c0       	rjmp	.+44     	; 0x362c <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3600:	fe 01       	movw	r30, r28
    3602:	ff 96       	adiw	r30, 0x3f	; 63
    3604:	60 81       	ld	r22, Z
    3606:	71 81       	ldd	r23, Z+1	; 0x01
    3608:	82 81       	ldd	r24, Z+2	; 0x02
    360a:	93 81       	ldd	r25, Z+3	; 0x03
    360c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	9e af       	std	Y+62, r25	; 0x3e
    3616:	8d af       	std	Y+61, r24	; 0x3d
    3618:	8d ad       	ldd	r24, Y+61	; 0x3d
    361a:	9e ad       	ldd	r25, Y+62	; 0x3e
    361c:	9a af       	std	Y+58, r25	; 0x3a
    361e:	89 af       	std	Y+57, r24	; 0x39
    3620:	89 ad       	ldd	r24, Y+57	; 0x39
    3622:	9a ad       	ldd	r25, Y+58	; 0x3a
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	f1 f7       	brne	.-4      	; 0x3624 <LCD_displayCharacter+0x436>
    3628:	9a af       	std	Y+58, r25	; 0x3a
    362a:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    362c:	a8 e3       	ldi	r26, 0x38	; 56
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	e8 e3       	ldi	r30, 0x38	; 56
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	8b 7f       	andi	r24, 0xFB	; 251
    3638:	8c 93       	st	X, r24
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	a0 e8       	ldi	r26, 0x80	; 128
    3640:	bf e3       	ldi	r27, 0x3F	; 63
    3642:	8d ab       	std	Y+53, r24	; 0x35
    3644:	9e ab       	std	Y+54, r25	; 0x36
    3646:	af ab       	std	Y+55, r26	; 0x37
    3648:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    364a:	6d a9       	ldd	r22, Y+53	; 0x35
    364c:	7e a9       	ldd	r23, Y+54	; 0x36
    364e:	8f a9       	ldd	r24, Y+55	; 0x37
    3650:	98 ad       	ldd	r25, Y+56	; 0x38
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	4a e7       	ldi	r20, 0x7A	; 122
    3658:	53 e4       	ldi	r21, 0x43	; 67
    365a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	89 ab       	std	Y+49, r24	; 0x31
    3664:	9a ab       	std	Y+50, r25	; 0x32
    3666:	ab ab       	std	Y+51, r26	; 0x33
    3668:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    366a:	69 a9       	ldd	r22, Y+49	; 0x31
    366c:	7a a9       	ldd	r23, Y+50	; 0x32
    366e:	8b a9       	ldd	r24, Y+51	; 0x33
    3670:	9c a9       	ldd	r25, Y+52	; 0x34
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	40 e8       	ldi	r20, 0x80	; 128
    3678:	5f e3       	ldi	r21, 0x3F	; 63
    367a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    367e:	88 23       	and	r24, r24
    3680:	2c f4       	brge	.+10     	; 0x368c <LCD_displayCharacter+0x49e>
		__ticks = 1;
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	98 ab       	std	Y+48, r25	; 0x30
    3688:	8f a7       	std	Y+47, r24	; 0x2f
    368a:	3f c0       	rjmp	.+126    	; 0x370a <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    368c:	69 a9       	ldd	r22, Y+49	; 0x31
    368e:	7a a9       	ldd	r23, Y+50	; 0x32
    3690:	8b a9       	ldd	r24, Y+51	; 0x33
    3692:	9c a9       	ldd	r25, Y+52	; 0x34
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	3f ef       	ldi	r19, 0xFF	; 255
    3698:	4f e7       	ldi	r20, 0x7F	; 127
    369a:	57 e4       	ldi	r21, 0x47	; 71
    369c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36a0:	18 16       	cp	r1, r24
    36a2:	4c f5       	brge	.+82     	; 0x36f6 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a4:	6d a9       	ldd	r22, Y+53	; 0x35
    36a6:	7e a9       	ldd	r23, Y+54	; 0x36
    36a8:	8f a9       	ldd	r24, Y+55	; 0x37
    36aa:	98 ad       	ldd	r25, Y+56	; 0x38
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	40 e2       	ldi	r20, 0x20	; 32
    36b2:	51 e4       	ldi	r21, 0x41	; 65
    36b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	bc 01       	movw	r22, r24
    36be:	cd 01       	movw	r24, r26
    36c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	98 ab       	std	Y+48, r25	; 0x30
    36ca:	8f a7       	std	Y+47, r24	; 0x2f
    36cc:	0f c0       	rjmp	.+30     	; 0x36ec <LCD_displayCharacter+0x4fe>
    36ce:	89 e1       	ldi	r24, 0x19	; 25
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	9e a7       	std	Y+46, r25	; 0x2e
    36d4:	8d a7       	std	Y+45, r24	; 0x2d
    36d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    36d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <LCD_displayCharacter+0x4ec>
    36de:	9e a7       	std	Y+46, r25	; 0x2e
    36e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    36e4:	98 a9       	ldd	r25, Y+48	; 0x30
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	98 ab       	std	Y+48, r25	; 0x30
    36ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ee:	98 a9       	ldd	r25, Y+48	; 0x30
    36f0:	00 97       	sbiw	r24, 0x00	; 0
    36f2:	69 f7       	brne	.-38     	; 0x36ce <LCD_displayCharacter+0x4e0>
    36f4:	14 c0       	rjmp	.+40     	; 0x371e <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f6:	69 a9       	ldd	r22, Y+49	; 0x31
    36f8:	7a a9       	ldd	r23, Y+50	; 0x32
    36fa:	8b a9       	ldd	r24, Y+51	; 0x33
    36fc:	9c a9       	ldd	r25, Y+52	; 0x34
    36fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	98 ab       	std	Y+48, r25	; 0x30
    3708:	8f a7       	std	Y+47, r24	; 0x2f
    370a:	8f a5       	ldd	r24, Y+47	; 0x2f
    370c:	98 a9       	ldd	r25, Y+48	; 0x30
    370e:	9c a7       	std	Y+44, r25	; 0x2c
    3710:	8b a7       	std	Y+43, r24	; 0x2b
    3712:	8b a5       	ldd	r24, Y+43	; 0x2b
    3714:	9c a5       	ldd	r25, Y+44	; 0x2c
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	f1 f7       	brne	.-4      	; 0x3716 <LCD_displayCharacter+0x528>
    371a:	9c a7       	std	Y+44, r25	; 0x2c
    371c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    371e:	a8 e3       	ldi	r26, 0x38	; 56
    3720:	b0 e0       	ldi	r27, 0x00	; 0
    3722:	e8 e3       	ldi	r30, 0x38	; 56
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	80 81       	ld	r24, Z
    3728:	84 60       	ori	r24, 0x04	; 4
    372a:	8c 93       	st	X, r24
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	a0 e8       	ldi	r26, 0x80	; 128
    3732:	bf e3       	ldi	r27, 0x3F	; 63
    3734:	8f a3       	std	Y+39, r24	; 0x27
    3736:	98 a7       	std	Y+40, r25	; 0x28
    3738:	a9 a7       	std	Y+41, r26	; 0x29
    373a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373c:	6f a1       	ldd	r22, Y+39	; 0x27
    373e:	78 a5       	ldd	r23, Y+40	; 0x28
    3740:	89 a5       	ldd	r24, Y+41	; 0x29
    3742:	9a a5       	ldd	r25, Y+42	; 0x2a
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	4a e7       	ldi	r20, 0x7A	; 122
    374a:	53 e4       	ldi	r21, 0x43	; 67
    374c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	8b a3       	std	Y+35, r24	; 0x23
    3756:	9c a3       	std	Y+36, r25	; 0x24
    3758:	ad a3       	std	Y+37, r26	; 0x25
    375a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    375c:	6b a1       	ldd	r22, Y+35	; 0x23
    375e:	7c a1       	ldd	r23, Y+36	; 0x24
    3760:	8d a1       	ldd	r24, Y+37	; 0x25
    3762:	9e a1       	ldd	r25, Y+38	; 0x26
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e8       	ldi	r20, 0x80	; 128
    376a:	5f e3       	ldi	r21, 0x3F	; 63
    376c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3770:	88 23       	and	r24, r24
    3772:	2c f4       	brge	.+10     	; 0x377e <LCD_displayCharacter+0x590>
		__ticks = 1;
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	9a a3       	std	Y+34, r25	; 0x22
    377a:	89 a3       	std	Y+33, r24	; 0x21
    377c:	3f c0       	rjmp	.+126    	; 0x37fc <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    377e:	6b a1       	ldd	r22, Y+35	; 0x23
    3780:	7c a1       	ldd	r23, Y+36	; 0x24
    3782:	8d a1       	ldd	r24, Y+37	; 0x25
    3784:	9e a1       	ldd	r25, Y+38	; 0x26
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	3f ef       	ldi	r19, 0xFF	; 255
    378a:	4f e7       	ldi	r20, 0x7F	; 127
    378c:	57 e4       	ldi	r21, 0x47	; 71
    378e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3792:	18 16       	cp	r1, r24
    3794:	4c f5       	brge	.+82     	; 0x37e8 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3796:	6f a1       	ldd	r22, Y+39	; 0x27
    3798:	78 a5       	ldd	r23, Y+40	; 0x28
    379a:	89 a5       	ldd	r24, Y+41	; 0x29
    379c:	9a a5       	ldd	r25, Y+42	; 0x2a
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	40 e2       	ldi	r20, 0x20	; 32
    37a4:	51 e4       	ldi	r21, 0x41	; 65
    37a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	bc 01       	movw	r22, r24
    37b0:	cd 01       	movw	r24, r26
    37b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	9a a3       	std	Y+34, r25	; 0x22
    37bc:	89 a3       	std	Y+33, r24	; 0x21
    37be:	0f c0       	rjmp	.+30     	; 0x37de <LCD_displayCharacter+0x5f0>
    37c0:	89 e1       	ldi	r24, 0x19	; 25
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	98 a3       	std	Y+32, r25	; 0x20
    37c6:	8f 8f       	std	Y+31, r24	; 0x1f
    37c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37ca:	98 a1       	ldd	r25, Y+32	; 0x20
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <LCD_displayCharacter+0x5de>
    37d0:	98 a3       	std	Y+32, r25	; 0x20
    37d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d4:	89 a1       	ldd	r24, Y+33	; 0x21
    37d6:	9a a1       	ldd	r25, Y+34	; 0x22
    37d8:	01 97       	sbiw	r24, 0x01	; 1
    37da:	9a a3       	std	Y+34, r25	; 0x22
    37dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37de:	89 a1       	ldd	r24, Y+33	; 0x21
    37e0:	9a a1       	ldd	r25, Y+34	; 0x22
    37e2:	00 97       	sbiw	r24, 0x00	; 0
    37e4:	69 f7       	brne	.-38     	; 0x37c0 <LCD_displayCharacter+0x5d2>
    37e6:	14 c0       	rjmp	.+40     	; 0x3810 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e8:	6b a1       	ldd	r22, Y+35	; 0x23
    37ea:	7c a1       	ldd	r23, Y+36	; 0x24
    37ec:	8d a1       	ldd	r24, Y+37	; 0x25
    37ee:	9e a1       	ldd	r25, Y+38	; 0x26
    37f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	9a a3       	std	Y+34, r25	; 0x22
    37fa:	89 a3       	std	Y+33, r24	; 0x21
    37fc:	89 a1       	ldd	r24, Y+33	; 0x21
    37fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3800:	9e 8f       	std	Y+30, r25	; 0x1e
    3802:	8d 8f       	std	Y+29, r24	; 0x1d
    3804:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3806:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	f1 f7       	brne	.-4      	; 0x3808 <LCD_displayCharacter+0x61a>
    380c:	9e 8f       	std	Y+30, r25	; 0x1e
    380e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    3810:	a8 e3       	ldi	r26, 0x38	; 56
    3812:	b0 e0       	ldi	r27, 0x00	; 0
    3814:	e8 e3       	ldi	r30, 0x38	; 56
    3816:	f0 e0       	ldi	r31, 0x00	; 0
    3818:	80 81       	ld	r24, Z
    381a:	28 2f       	mov	r18, r24
    381c:	2f 70       	andi	r18, 0x0F	; 15
    381e:	fe 01       	movw	r30, r28
    3820:	ed 59       	subi	r30, 0x9D	; 157
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	80 81       	ld	r24, Z
    3826:	88 2f       	mov	r24, r24
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	82 95       	swap	r24
    382c:	92 95       	swap	r25
    382e:	90 7f       	andi	r25, 0xF0	; 240
    3830:	98 27       	eor	r25, r24
    3832:	80 7f       	andi	r24, 0xF0	; 240
    3834:	98 27       	eor	r25, r24
    3836:	82 2b       	or	r24, r18
    3838:	8c 93       	st	X, r24
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	a0 e8       	ldi	r26, 0x80	; 128
    3840:	bf e3       	ldi	r27, 0x3F	; 63
    3842:	89 8f       	std	Y+25, r24	; 0x19
    3844:	9a 8f       	std	Y+26, r25	; 0x1a
    3846:	ab 8f       	std	Y+27, r26	; 0x1b
    3848:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    384a:	69 8d       	ldd	r22, Y+25	; 0x19
    384c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    384e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	4a e7       	ldi	r20, 0x7A	; 122
    3858:	53 e4       	ldi	r21, 0x43	; 67
    385a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	8d 8b       	std	Y+21, r24	; 0x15
    3864:	9e 8b       	std	Y+22, r25	; 0x16
    3866:	af 8b       	std	Y+23, r26	; 0x17
    3868:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    386a:	6d 89       	ldd	r22, Y+21	; 0x15
    386c:	7e 89       	ldd	r23, Y+22	; 0x16
    386e:	8f 89       	ldd	r24, Y+23	; 0x17
    3870:	98 8d       	ldd	r25, Y+24	; 0x18
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	40 e8       	ldi	r20, 0x80	; 128
    3878:	5f e3       	ldi	r21, 0x3F	; 63
    387a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    387e:	88 23       	and	r24, r24
    3880:	2c f4       	brge	.+10     	; 0x388c <LCD_displayCharacter+0x69e>
		__ticks = 1;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	9c 8b       	std	Y+20, r25	; 0x14
    3888:	8b 8b       	std	Y+19, r24	; 0x13
    388a:	3f c0       	rjmp	.+126    	; 0x390a <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    388c:	6d 89       	ldd	r22, Y+21	; 0x15
    388e:	7e 89       	ldd	r23, Y+22	; 0x16
    3890:	8f 89       	ldd	r24, Y+23	; 0x17
    3892:	98 8d       	ldd	r25, Y+24	; 0x18
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	3f ef       	ldi	r19, 0xFF	; 255
    3898:	4f e7       	ldi	r20, 0x7F	; 127
    389a:	57 e4       	ldi	r21, 0x47	; 71
    389c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38a0:	18 16       	cp	r1, r24
    38a2:	4c f5       	brge	.+82     	; 0x38f6 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a4:	69 8d       	ldd	r22, Y+25	; 0x19
    38a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	40 e2       	ldi	r20, 0x20	; 32
    38b2:	51 e4       	ldi	r21, 0x41	; 65
    38b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	bc 01       	movw	r22, r24
    38be:	cd 01       	movw	r24, r26
    38c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	9c 8b       	std	Y+20, r25	; 0x14
    38ca:	8b 8b       	std	Y+19, r24	; 0x13
    38cc:	0f c0       	rjmp	.+30     	; 0x38ec <LCD_displayCharacter+0x6fe>
    38ce:	89 e1       	ldi	r24, 0x19	; 25
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	9a 8b       	std	Y+18, r25	; 0x12
    38d4:	89 8b       	std	Y+17, r24	; 0x11
    38d6:	89 89       	ldd	r24, Y+17	; 0x11
    38d8:	9a 89       	ldd	r25, Y+18	; 0x12
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <LCD_displayCharacter+0x6ec>
    38de:	9a 8b       	std	Y+18, r25	; 0x12
    38e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e2:	8b 89       	ldd	r24, Y+19	; 0x13
    38e4:	9c 89       	ldd	r25, Y+20	; 0x14
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	9c 8b       	std	Y+20, r25	; 0x14
    38ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ec:	8b 89       	ldd	r24, Y+19	; 0x13
    38ee:	9c 89       	ldd	r25, Y+20	; 0x14
    38f0:	00 97       	sbiw	r24, 0x00	; 0
    38f2:	69 f7       	brne	.-38     	; 0x38ce <LCD_displayCharacter+0x6e0>
    38f4:	14 c0       	rjmp	.+40     	; 0x391e <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f6:	6d 89       	ldd	r22, Y+21	; 0x15
    38f8:	7e 89       	ldd	r23, Y+22	; 0x16
    38fa:	8f 89       	ldd	r24, Y+23	; 0x17
    38fc:	98 8d       	ldd	r25, Y+24	; 0x18
    38fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	9c 8b       	std	Y+20, r25	; 0x14
    3908:	8b 8b       	std	Y+19, r24	; 0x13
    390a:	8b 89       	ldd	r24, Y+19	; 0x13
    390c:	9c 89       	ldd	r25, Y+20	; 0x14
    390e:	98 8b       	std	Y+16, r25	; 0x10
    3910:	8f 87       	std	Y+15, r24	; 0x0f
    3912:	8f 85       	ldd	r24, Y+15	; 0x0f
    3914:	98 89       	ldd	r25, Y+16	; 0x10
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	f1 f7       	brne	.-4      	; 0x3916 <LCD_displayCharacter+0x728>
    391a:	98 8b       	std	Y+16, r25	; 0x10
    391c:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    391e:	a8 e3       	ldi	r26, 0x38	; 56
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	e8 e3       	ldi	r30, 0x38	; 56
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	80 81       	ld	r24, Z
    3928:	8b 7f       	andi	r24, 0xFB	; 251
    392a:	8c 93       	st	X, r24
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	a0 e8       	ldi	r26, 0x80	; 128
    3932:	bf e3       	ldi	r27, 0x3F	; 63
    3934:	8b 87       	std	Y+11, r24	; 0x0b
    3936:	9c 87       	std	Y+12, r25	; 0x0c
    3938:	ad 87       	std	Y+13, r26	; 0x0d
    393a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393c:	6b 85       	ldd	r22, Y+11	; 0x0b
    393e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3940:	8d 85       	ldd	r24, Y+13	; 0x0d
    3942:	9e 85       	ldd	r25, Y+14	; 0x0e
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	4a e7       	ldi	r20, 0x7A	; 122
    394a:	53 e4       	ldi	r21, 0x43	; 67
    394c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	8f 83       	std	Y+7, r24	; 0x07
    3956:	98 87       	std	Y+8, r25	; 0x08
    3958:	a9 87       	std	Y+9, r26	; 0x09
    395a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    395c:	6f 81       	ldd	r22, Y+7	; 0x07
    395e:	78 85       	ldd	r23, Y+8	; 0x08
    3960:	89 85       	ldd	r24, Y+9	; 0x09
    3962:	9a 85       	ldd	r25, Y+10	; 0x0a
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e8       	ldi	r20, 0x80	; 128
    396a:	5f e3       	ldi	r21, 0x3F	; 63
    396c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3970:	88 23       	and	r24, r24
    3972:	2c f4       	brge	.+10     	; 0x397e <LCD_displayCharacter+0x790>
		__ticks = 1;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	9e 83       	std	Y+6, r25	; 0x06
    397a:	8d 83       	std	Y+5, r24	; 0x05
    397c:	3f c0       	rjmp	.+126    	; 0x39fc <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    397e:	6f 81       	ldd	r22, Y+7	; 0x07
    3980:	78 85       	ldd	r23, Y+8	; 0x08
    3982:	89 85       	ldd	r24, Y+9	; 0x09
    3984:	9a 85       	ldd	r25, Y+10	; 0x0a
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	3f ef       	ldi	r19, 0xFF	; 255
    398a:	4f e7       	ldi	r20, 0x7F	; 127
    398c:	57 e4       	ldi	r21, 0x47	; 71
    398e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3992:	18 16       	cp	r1, r24
    3994:	4c f5       	brge	.+82     	; 0x39e8 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3996:	6b 85       	ldd	r22, Y+11	; 0x0b
    3998:	7c 85       	ldd	r23, Y+12	; 0x0c
    399a:	8d 85       	ldd	r24, Y+13	; 0x0d
    399c:	9e 85       	ldd	r25, Y+14	; 0x0e
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e2       	ldi	r20, 0x20	; 32
    39a4:	51 e4       	ldi	r21, 0x41	; 65
    39a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	bc 01       	movw	r22, r24
    39b0:	cd 01       	movw	r24, r26
    39b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	9e 83       	std	Y+6, r25	; 0x06
    39bc:	8d 83       	std	Y+5, r24	; 0x05
    39be:	0f c0       	rjmp	.+30     	; 0x39de <LCD_displayCharacter+0x7f0>
    39c0:	89 e1       	ldi	r24, 0x19	; 25
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	9c 83       	std	Y+4, r25	; 0x04
    39c6:	8b 83       	std	Y+3, r24	; 0x03
    39c8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ca:	9c 81       	ldd	r25, Y+4	; 0x04
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	f1 f7       	brne	.-4      	; 0x39cc <LCD_displayCharacter+0x7de>
    39d0:	9c 83       	std	Y+4, r25	; 0x04
    39d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d4:	8d 81       	ldd	r24, Y+5	; 0x05
    39d6:	9e 81       	ldd	r25, Y+6	; 0x06
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	9e 83       	std	Y+6, r25	; 0x06
    39dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39de:	8d 81       	ldd	r24, Y+5	; 0x05
    39e0:	9e 81       	ldd	r25, Y+6	; 0x06
    39e2:	00 97       	sbiw	r24, 0x00	; 0
    39e4:	69 f7       	brne	.-38     	; 0x39c0 <LCD_displayCharacter+0x7d2>
    39e6:	14 c0       	rjmp	.+40     	; 0x3a10 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ea:	78 85       	ldd	r23, Y+8	; 0x08
    39ec:	89 85       	ldd	r24, Y+9	; 0x09
    39ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	9e 83       	std	Y+6, r25	; 0x06
    39fa:	8d 83       	std	Y+5, r24	; 0x05
    39fc:	8d 81       	ldd	r24, Y+5	; 0x05
    39fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3a00:	9a 83       	std	Y+2, r25	; 0x02
    3a02:	89 83       	std	Y+1, r24	; 0x01
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
    3a06:	9a 81       	ldd	r25, Y+2	; 0x02
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	f1 f7       	brne	.-4      	; 0x3a08 <LCD_displayCharacter+0x81a>
    3a0c:	9a 83       	std	Y+2, r25	; 0x02
    3a0e:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3a10:	cd 59       	subi	r28, 0x9D	; 157
    3a12:	df 4f       	sbci	r29, 0xFF	; 255
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	f8 94       	cli
    3a18:	de bf       	out	0x3e, r29	; 62
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	cd bf       	out	0x3d, r28	; 61
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	1f 91       	pop	r17
    3a24:	0f 91       	pop	r16
    3a26:	08 95       	ret

00003a28 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <LCD_displayString+0x6>
    3a2e:	0f 92       	push	r0
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
    3a34:	9b 83       	std	Y+3, r25	; 0x03
    3a36:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3a38:	19 82       	std	Y+1, r1	; 0x01
    3a3a:	0e c0       	rjmp	.+28     	; 0x3a58 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
    3a3e:	28 2f       	mov	r18, r24
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	8a 81       	ldd	r24, Y+2	; 0x02
    3a44:	9b 81       	ldd	r25, Y+3	; 0x03
    3a46:	fc 01       	movw	r30, r24
    3a48:	e2 0f       	add	r30, r18
    3a4a:	f3 1f       	adc	r31, r19
    3a4c:	80 81       	ld	r24, Z
    3a4e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_displayCharacter>
		i++;
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	8f 5f       	subi	r24, 0xFF	; 255
    3a56:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3a58:	89 81       	ldd	r24, Y+1	; 0x01
    3a5a:	28 2f       	mov	r18, r24
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a60:	9b 81       	ldd	r25, Y+3	; 0x03
    3a62:	fc 01       	movw	r30, r24
    3a64:	e2 0f       	add	r30, r18
    3a66:	f3 1f       	adc	r31, r19
    3a68:	80 81       	ld	r24, Z
    3a6a:	88 23       	and	r24, r24
    3a6c:	39 f7       	brne	.-50     	; 0x3a3c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	08 95       	ret

00003a7a <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    3a7a:	df 93       	push	r29
    3a7c:	cf 93       	push	r28
    3a7e:	00 d0       	rcall	.+0      	; 0x3a80 <LCD_goToRowColumn+0x6>
    3a80:	00 d0       	rcall	.+0      	; 0x3a82 <LCD_goToRowColumn+0x8>
    3a82:	0f 92       	push	r0
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	8a 83       	std	Y+2, r24	; 0x02
    3a8a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    3a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8e:	28 2f       	mov	r18, r24
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	3d 83       	std	Y+5, r19	; 0x05
    3a94:	2c 83       	std	Y+4, r18	; 0x04
    3a96:	8c 81       	ldd	r24, Y+4	; 0x04
    3a98:	9d 81       	ldd	r25, Y+5	; 0x05
    3a9a:	81 30       	cpi	r24, 0x01	; 1
    3a9c:	91 05       	cpc	r25, r1
    3a9e:	c1 f0       	breq	.+48     	; 0x3ad0 <LCD_goToRowColumn+0x56>
    3aa0:	2c 81       	ldd	r18, Y+4	; 0x04
    3aa2:	3d 81       	ldd	r19, Y+5	; 0x05
    3aa4:	22 30       	cpi	r18, 0x02	; 2
    3aa6:	31 05       	cpc	r19, r1
    3aa8:	2c f4       	brge	.+10     	; 0x3ab4 <LCD_goToRowColumn+0x3a>
    3aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    3aac:	9d 81       	ldd	r25, Y+5	; 0x05
    3aae:	00 97       	sbiw	r24, 0x00	; 0
    3ab0:	61 f0       	breq	.+24     	; 0x3aca <LCD_goToRowColumn+0x50>
    3ab2:	19 c0       	rjmp	.+50     	; 0x3ae6 <LCD_goToRowColumn+0x6c>
    3ab4:	2c 81       	ldd	r18, Y+4	; 0x04
    3ab6:	3d 81       	ldd	r19, Y+5	; 0x05
    3ab8:	22 30       	cpi	r18, 0x02	; 2
    3aba:	31 05       	cpc	r19, r1
    3abc:	69 f0       	breq	.+26     	; 0x3ad8 <LCD_goToRowColumn+0x5e>
    3abe:	8c 81       	ldd	r24, Y+4	; 0x04
    3ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ac2:	83 30       	cpi	r24, 0x03	; 3
    3ac4:	91 05       	cpc	r25, r1
    3ac6:	61 f0       	breq	.+24     	; 0x3ae0 <LCD_goToRowColumn+0x66>
    3ac8:	0e c0       	rjmp	.+28     	; 0x3ae6 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    3aca:	8b 81       	ldd	r24, Y+3	; 0x03
    3acc:	89 83       	std	Y+1, r24	; 0x01
    3ace:	0b c0       	rjmp	.+22     	; 0x3ae6 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    3ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad2:	80 5c       	subi	r24, 0xC0	; 192
    3ad4:	89 83       	std	Y+1, r24	; 0x01
    3ad6:	07 c0       	rjmp	.+14     	; 0x3ae6 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    3ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ada:	80 5f       	subi	r24, 0xF0	; 240
    3adc:	89 83       	std	Y+1, r24	; 0x01
    3ade:	03 c0       	rjmp	.+6      	; 0x3ae6 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    3ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae2:	80 5b       	subi	r24, 0xB0	; 176
    3ae4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
    3ae8:	80 68       	ori	r24, 0x80	; 128
    3aea:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_sendCommand>
}
    3aee:	0f 90       	pop	r0
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	00 d0       	rcall	.+0      	; 0x3b04 <LCD_displayStringRowColumn+0x6>
    3b04:	00 d0       	rcall	.+0      	; 0x3b06 <LCD_displayStringRowColumn+0x8>
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	89 83       	std	Y+1, r24	; 0x01
    3b0c:	6a 83       	std	Y+2, r22	; 0x02
    3b0e:	5c 83       	std	Y+4, r21	; 0x04
    3b10:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
    3b14:	6a 81       	ldd	r22, Y+2	; 0x02
    3b16:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    3b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b1e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayString>
}
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	cf 91       	pop	r28
    3b2c:	df 91       	pop	r29
    3b2e:	08 95       	ret

00003b30 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    3b30:	df 93       	push	r29
    3b32:	cf 93       	push	r28
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	62 97       	sbiw	r28, 0x12	; 18
    3b3a:	0f b6       	in	r0, 0x3f	; 63
    3b3c:	f8 94       	cli
    3b3e:	de bf       	out	0x3e, r29	; 62
    3b40:	0f be       	out	0x3f, r0	; 63
    3b42:	cd bf       	out	0x3d, r28	; 61
    3b44:	9a 8b       	std	Y+18, r25	; 0x12
    3b46:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    3b48:	89 89       	ldd	r24, Y+17	; 0x11
    3b4a:	9a 89       	ldd	r25, Y+18	; 0x12
    3b4c:	9e 01       	movw	r18, r28
    3b4e:	2f 5f       	subi	r18, 0xFF	; 255
    3b50:	3f 4f       	sbci	r19, 0xFF	; 255
    3b52:	b9 01       	movw	r22, r18
    3b54:	4a e0       	ldi	r20, 0x0A	; 10
    3b56:	50 e0       	ldi	r21, 0x00	; 0
    3b58:	0e 94 56 1f 	call	0x3eac	; 0x3eac <itoa>
   LCD_displayString(buff);
    3b5c:	ce 01       	movw	r24, r28
    3b5e:	01 96       	adiw	r24, 0x01	; 1
    3b60:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayString>
}
    3b64:	62 96       	adiw	r28, 0x12	; 18
    3b66:	0f b6       	in	r0, 0x3f	; 63
    3b68:	f8 94       	cli
    3b6a:	de bf       	out	0x3e, r29	; 62
    3b6c:	0f be       	out	0x3f, r0	; 63
    3b6e:	cd bf       	out	0x3d, r28	; 61
    3b70:	cf 91       	pop	r28
    3b72:	df 91       	pop	r29
    3b74:	08 95       	ret

00003b76 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    3b76:	df 93       	push	r29
    3b78:	cf 93       	push	r28
    3b7a:	cd b7       	in	r28, 0x3d	; 61
    3b7c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_sendCommand>
}
    3b84:	cf 91       	pop	r28
    3b86:	df 91       	pop	r29
    3b88:	08 95       	ret

00003b8a <main>:
  */
uint8 danger=0;
uint8 door=0;
Timer_Configuration timer={0, second, Timer_1, F_CPU_1024, Compare};
int main()
{  Buzzer_Init();
    3b8a:	df 93       	push	r29
    3b8c:	cf 93       	push	r28
    3b8e:	cd b7       	in	r28, 0x3d	; 61
    3b90:	de b7       	in	r29, 0x3e	; 62
    3b92:	2e 97       	sbiw	r28, 0x0e	; 14
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	cd bf       	out	0x3d, r28	; 61
    3b9e:	0e 94 27 13 	call	0x264e	; 0x264e <Buzzer_Init>
   Motor_Init();
    3ba2:	0e 94 34 11 	call	0x2268	; 0x2268 <Motor_Init>
SREG |= (1<<7);
    3ba6:	af e5       	ldi	r26, 0x5F	; 95
    3ba8:	b0 e0       	ldi	r27, 0x00	; 0
    3baa:	ef e5       	ldi	r30, 0x5F	; 95
    3bac:	f0 e0       	ldi	r31, 0x00	; 0
    3bae:	80 81       	ld	r24, Z
    3bb0:	80 68       	ori	r24, 0x80	; 128
    3bb2:	8c 93       	st	X, r24
UART_init();
    3bb4:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <UART_init>
LCD_init();
    3bb8:	0e 94 b9 14 	call	0x2972	; 0x2972 <LCD_init>
EEPROM_init();
    3bbc:	0e 94 92 13 	call	0x2724	; 0x2724 <EEPROM_init>
start=0;
    3bc0:	10 92 86 00 	sts	0x0086, r1




while(1) {
	EEPROM_readByte(FIRST_ADDRESS, &start);
    3bc4:	26 e8       	ldi	r18, 0x86	; 134
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	93 e0       	ldi	r25, 0x03	; 3
    3bcc:	b9 01       	movw	r22, r18
    3bce:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <EEPROM_readByte>
	UART_sendByte(R_U_READY);// massage send to master to start the system
    3bd2:	80 e1       	ldi	r24, 0x10	; 16
    3bd4:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>

	/*check whether the first address in the eeprom is empty or no and send the result to the master */
	if(start==0xFF){UART_sendByte(first_time);}else{UART_sendByte(repeated);}
    3bd8:	80 91 86 00 	lds	r24, 0x0086
    3bdc:	8f 3f       	cpi	r24, 0xFF	; 255
    3bde:	21 f4       	brne	.+8      	; 0x3be8 <main+0x5e>
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
    3be6:	03 c0       	rjmp	.+6      	; 0x3bee <main+0x64>
    3be8:	82 e0       	ldi	r24, 0x02	; 2
    3bea:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>


	if(start==0XFF){
    3bee:	80 91 86 00 	lds	r24, 0x0086
    3bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    3bf4:	19 f4       	brne	.+6      	; 0x3bfc <main+0x72>

		FirstTrial();// a function that receive the first address and store it then go to options
    3bf6:	0e 94 87 0a 	call	0x150e	; 0x150e <FirstTrial>
    3bfa:	e4 cf       	rjmp	.-56     	; 0x3bc4 <main+0x3a>
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	aa e7       	ldi	r26, 0x7A	; 122
    3c02:	b4 e4       	ldi	r27, 0x44	; 68
    3c04:	8b 87       	std	Y+11, r24	; 0x0b
    3c06:	9c 87       	std	Y+12, r25	; 0x0c
    3c08:	ad 87       	std	Y+13, r26	; 0x0d
    3c0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	4a e7       	ldi	r20, 0x7A	; 122
    3c1a:	53 e4       	ldi	r21, 0x43	; 67
    3c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	8f 83       	std	Y+7, r24	; 0x07
    3c26:	98 87       	std	Y+8, r25	; 0x08
    3c28:	a9 87       	std	Y+9, r26	; 0x09
    3c2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c2e:	78 85       	ldd	r23, Y+8	; 0x08
    3c30:	89 85       	ldd	r24, Y+9	; 0x09
    3c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e8       	ldi	r20, 0x80	; 128
    3c3a:	5f e3       	ldi	r21, 0x3F	; 63
    3c3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c40:	88 23       	and	r24, r24
    3c42:	2c f4       	brge	.+10     	; 0x3c4e <main+0xc4>
		__ticks = 1;
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	9e 83       	std	Y+6, r25	; 0x06
    3c4a:	8d 83       	std	Y+5, r24	; 0x05
    3c4c:	3f c0       	rjmp	.+126    	; 0x3ccc <main+0x142>
	else if (__tmp > 65535)
    3c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c50:	78 85       	ldd	r23, Y+8	; 0x08
    3c52:	89 85       	ldd	r24, Y+9	; 0x09
    3c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	3f ef       	ldi	r19, 0xFF	; 255
    3c5a:	4f e7       	ldi	r20, 0x7F	; 127
    3c5c:	57 e4       	ldi	r21, 0x47	; 71
    3c5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c62:	18 16       	cp	r1, r24
    3c64:	4c f5       	brge	.+82     	; 0x3cb8 <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	40 e2       	ldi	r20, 0x20	; 32
    3c74:	51 e4       	ldi	r21, 0x41	; 65
    3c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	bc 01       	movw	r22, r24
    3c80:	cd 01       	movw	r24, r26
    3c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	9e 83       	std	Y+6, r25	; 0x06
    3c8c:	8d 83       	std	Y+5, r24	; 0x05
    3c8e:	0f c0       	rjmp	.+30     	; 0x3cae <main+0x124>
    3c90:	89 e1       	ldi	r24, 0x19	; 25
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	9c 83       	std	Y+4, r25	; 0x04
    3c96:	8b 83       	std	Y+3, r24	; 0x03
    3c98:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	f1 f7       	brne	.-4      	; 0x3c9c <main+0x112>
    3ca0:	9c 83       	std	Y+4, r25	; 0x04
    3ca2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca8:	01 97       	sbiw	r24, 0x01	; 1
    3caa:	9e 83       	std	Y+6, r25	; 0x06
    3cac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cae:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb2:	00 97       	sbiw	r24, 0x00	; 0
    3cb4:	69 f7       	brne	.-38     	; 0x3c90 <main+0x106>
    3cb6:	14 c0       	rjmp	.+40     	; 0x3ce0 <main+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cba:	78 85       	ldd	r23, Y+8	; 0x08
    3cbc:	89 85       	ldd	r24, Y+9	; 0x09
    3cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	9e 83       	std	Y+6, r25	; 0x06
    3cca:	8d 83       	std	Y+5, r24	; 0x05
    3ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cce:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd0:	9a 83       	std	Y+2, r25	; 0x02
    3cd2:	89 83       	std	Y+1, r24	; 0x01
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	f1 f7       	brne	.-4      	; 0x3cd8 <main+0x14e>
    3cdc:	9a 83       	std	Y+2, r25	; 0x02
    3cde:	89 83       	std	Y+1, r24	; 0x01
	else{
        _delay_ms(1000);
        /*a function that receive orders from the master (the option choice)then receive
           password to check with the stored one
          */
		options();
    3ce0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <options>
    3ce4:	6f cf       	rjmp	.-290    	; 0x3bc4 <main+0x3a>

00003ce6 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    3ce6:	df 93       	push	r29
    3ce8:	cf 93       	push	r28
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3cee:	eb e2       	ldi	r30, 0x2B	; 43
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	82 e0       	ldi	r24, 0x02	; 2
    3cf4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3cf6:	ea e2       	ldi	r30, 0x2A	; 42
    3cf8:	f0 e0       	ldi	r31, 0x00	; 0
    3cfa:	88 e1       	ldi	r24, 0x18	; 24
    3cfc:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    3cfe:	e0 e4       	ldi	r30, 0x40	; 64
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	86 e8       	ldi	r24, 0x86	; 134
    3d04:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    3d06:	e0 e4       	ldi	r30, 0x40	; 64
    3d08:	f0 e0       	ldi	r31, 0x00	; 0
    3d0a:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    3d0c:	e9 e2       	ldi	r30, 0x29	; 41
    3d0e:	f0 e0       	ldi	r31, 0x00	; 0
    3d10:	8c e0       	ldi	r24, 0x0C	; 12
    3d12:	80 83       	st	Z, r24
}
    3d14:	cf 91       	pop	r28
    3d16:	df 91       	pop	r29
    3d18:	08 95       	ret

00003d1a <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    3d1a:	df 93       	push	r29
    3d1c:	cf 93       	push	r28
    3d1e:	0f 92       	push	r0
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
    3d24:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3d26:	eb e2       	ldi	r30, 0x2B	; 43
    3d28:	f0 e0       	ldi	r31, 0x00	; 0
    3d2a:	80 81       	ld	r24, Z
    3d2c:	88 2f       	mov	r24, r24
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	80 72       	andi	r24, 0x20	; 32
    3d32:	90 70       	andi	r25, 0x00	; 0
    3d34:	00 97       	sbiw	r24, 0x00	; 0
    3d36:	b9 f3       	breq	.-18     	; 0x3d26 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    3d38:	ec e2       	ldi	r30, 0x2C	; 44
    3d3a:	f0 e0       	ldi	r31, 0x00	; 0
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    3d40:	0f 90       	pop	r0
    3d42:	cf 91       	pop	r28
    3d44:	df 91       	pop	r29
    3d46:	08 95       	ret

00003d48 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    3d48:	df 93       	push	r29
    3d4a:	cf 93       	push	r28
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3d50:	eb e2       	ldi	r30, 0x2B	; 43
    3d52:	f0 e0       	ldi	r31, 0x00	; 0
    3d54:	80 81       	ld	r24, Z
    3d56:	88 23       	and	r24, r24
    3d58:	dc f7       	brge	.-10     	; 0x3d50 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    3d5a:	ec e2       	ldi	r30, 0x2C	; 44
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	80 81       	ld	r24, Z
}
    3d60:	cf 91       	pop	r28
    3d62:	df 91       	pop	r29
    3d64:	08 95       	ret

00003d66 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    3d66:	df 93       	push	r29
    3d68:	cf 93       	push	r28
    3d6a:	00 d0       	rcall	.+0      	; 0x3d6c <UART_sendString+0x6>
    3d6c:	0f 92       	push	r0
    3d6e:	cd b7       	in	r28, 0x3d	; 61
    3d70:	de b7       	in	r29, 0x3e	; 62
    3d72:	9b 83       	std	Y+3, r25	; 0x03
    3d74:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3d76:	19 82       	std	Y+1, r1	; 0x01
    3d78:	0e c0       	rjmp	.+28     	; 0x3d96 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3d7a:	89 81       	ldd	r24, Y+1	; 0x01
    3d7c:	28 2f       	mov	r18, r24
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	8a 81       	ldd	r24, Y+2	; 0x02
    3d82:	9b 81       	ldd	r25, Y+3	; 0x03
    3d84:	fc 01       	movw	r30, r24
    3d86:	e2 0f       	add	r30, r18
    3d88:	f3 1f       	adc	r31, r19
    3d8a:	80 81       	ld	r24, Z
    3d8c:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_sendByte>
		i++;
    3d90:	89 81       	ldd	r24, Y+1	; 0x01
    3d92:	8f 5f       	subi	r24, 0xFF	; 255
    3d94:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	28 2f       	mov	r18, r24
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3da0:	fc 01       	movw	r30, r24
    3da2:	e2 0f       	add	r30, r18
    3da4:	f3 1f       	adc	r31, r19
    3da6:	80 81       	ld	r24, Z
    3da8:	88 23       	and	r24, r24
    3daa:	39 f7       	brne	.-50     	; 0x3d7a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	0f 90       	pop	r0
    3db2:	cf 91       	pop	r28
    3db4:	df 91       	pop	r29
    3db6:	08 95       	ret

00003db8 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    3db8:	0f 93       	push	r16
    3dba:	1f 93       	push	r17
    3dbc:	df 93       	push	r29
    3dbe:	cf 93       	push	r28
    3dc0:	00 d0       	rcall	.+0      	; 0x3dc2 <UART_receiveString+0xa>
    3dc2:	0f 92       	push	r0
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	9b 83       	std	Y+3, r25	; 0x03
    3dca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3dcc:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    3dce:	89 81       	ldd	r24, Y+1	; 0x01
    3dd0:	28 2f       	mov	r18, r24
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd8:	8c 01       	movw	r16, r24
    3dda:	02 0f       	add	r16, r18
    3ddc:	13 1f       	adc	r17, r19
    3dde:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <UART_recieveByte>
    3de2:	f8 01       	movw	r30, r16
    3de4:	80 83       	st	Z, r24
    3de6:	0f c0       	rjmp	.+30     	; 0x3e06 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3de8:	89 81       	ldd	r24, Y+1	; 0x01
    3dea:	8f 5f       	subi	r24, 0xFF	; 255
    3dec:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3dee:	89 81       	ldd	r24, Y+1	; 0x01
    3df0:	28 2f       	mov	r18, r24
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	8a 81       	ldd	r24, Y+2	; 0x02
    3df6:	9b 81       	ldd	r25, Y+3	; 0x03
    3df8:	8c 01       	movw	r16, r24
    3dfa:	02 0f       	add	r16, r18
    3dfc:	13 1f       	adc	r17, r19
    3dfe:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <UART_recieveByte>
    3e02:	f8 01       	movw	r30, r16
    3e04:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    3e06:	89 81       	ldd	r24, Y+1	; 0x01
    3e08:	28 2f       	mov	r18, r24
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e10:	fc 01       	movw	r30, r24
    3e12:	e2 0f       	add	r30, r18
    3e14:	f3 1f       	adc	r31, r19
    3e16:	80 81       	ld	r24, Z
    3e18:	83 32       	cpi	r24, 0x23	; 35
    3e1a:	31 f7       	brne	.-52     	; 0x3de8 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    3e1c:	89 81       	ldd	r24, Y+1	; 0x01
    3e1e:	28 2f       	mov	r18, r24
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	8a 81       	ldd	r24, Y+2	; 0x02
    3e24:	9b 81       	ldd	r25, Y+3	; 0x03
    3e26:	fc 01       	movw	r30, r24
    3e28:	e2 0f       	add	r30, r18
    3e2a:	f3 1f       	adc	r31, r19
    3e2c:	10 82       	st	Z, r1
}
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	cf 91       	pop	r28
    3e36:	df 91       	pop	r29
    3e38:	1f 91       	pop	r17
    3e3a:	0f 91       	pop	r16
    3e3c:	08 95       	ret

00003e3e <__prologue_saves__>:
    3e3e:	2f 92       	push	r2
    3e40:	3f 92       	push	r3
    3e42:	4f 92       	push	r4
    3e44:	5f 92       	push	r5
    3e46:	6f 92       	push	r6
    3e48:	7f 92       	push	r7
    3e4a:	8f 92       	push	r8
    3e4c:	9f 92       	push	r9
    3e4e:	af 92       	push	r10
    3e50:	bf 92       	push	r11
    3e52:	cf 92       	push	r12
    3e54:	df 92       	push	r13
    3e56:	ef 92       	push	r14
    3e58:	ff 92       	push	r15
    3e5a:	0f 93       	push	r16
    3e5c:	1f 93       	push	r17
    3e5e:	cf 93       	push	r28
    3e60:	df 93       	push	r29
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
    3e66:	ca 1b       	sub	r28, r26
    3e68:	db 0b       	sbc	r29, r27
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	f8 94       	cli
    3e6e:	de bf       	out	0x3e, r29	; 62
    3e70:	0f be       	out	0x3f, r0	; 63
    3e72:	cd bf       	out	0x3d, r28	; 61
    3e74:	09 94       	ijmp

00003e76 <__epilogue_restores__>:
    3e76:	2a 88       	ldd	r2, Y+18	; 0x12
    3e78:	39 88       	ldd	r3, Y+17	; 0x11
    3e7a:	48 88       	ldd	r4, Y+16	; 0x10
    3e7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e80:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e82:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e84:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e86:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e88:	b9 84       	ldd	r11, Y+9	; 0x09
    3e8a:	c8 84       	ldd	r12, Y+8	; 0x08
    3e8c:	df 80       	ldd	r13, Y+7	; 0x07
    3e8e:	ee 80       	ldd	r14, Y+6	; 0x06
    3e90:	fd 80       	ldd	r15, Y+5	; 0x05
    3e92:	0c 81       	ldd	r16, Y+4	; 0x04
    3e94:	1b 81       	ldd	r17, Y+3	; 0x03
    3e96:	aa 81       	ldd	r26, Y+2	; 0x02
    3e98:	b9 81       	ldd	r27, Y+1	; 0x01
    3e9a:	ce 0f       	add	r28, r30
    3e9c:	d1 1d       	adc	r29, r1
    3e9e:	0f b6       	in	r0, 0x3f	; 63
    3ea0:	f8 94       	cli
    3ea2:	de bf       	out	0x3e, r29	; 62
    3ea4:	0f be       	out	0x3f, r0	; 63
    3ea6:	cd bf       	out	0x3d, r28	; 61
    3ea8:	ed 01       	movw	r28, r26
    3eaa:	08 95       	ret

00003eac <itoa>:
    3eac:	fb 01       	movw	r30, r22
    3eae:	9f 01       	movw	r18, r30
    3eb0:	e8 94       	clt
    3eb2:	42 30       	cpi	r20, 0x02	; 2
    3eb4:	c4 f0       	brlt	.+48     	; 0x3ee6 <itoa+0x3a>
    3eb6:	45 32       	cpi	r20, 0x25	; 37
    3eb8:	b4 f4       	brge	.+44     	; 0x3ee6 <itoa+0x3a>
    3eba:	4a 30       	cpi	r20, 0x0A	; 10
    3ebc:	29 f4       	brne	.+10     	; 0x3ec8 <itoa+0x1c>
    3ebe:	97 fb       	bst	r25, 7
    3ec0:	1e f4       	brtc	.+6      	; 0x3ec8 <itoa+0x1c>
    3ec2:	90 95       	com	r25
    3ec4:	81 95       	neg	r24
    3ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec8:	64 2f       	mov	r22, r20
    3eca:	77 27       	eor	r23, r23
    3ecc:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <__udivmodhi4>
    3ed0:	80 5d       	subi	r24, 0xD0	; 208
    3ed2:	8a 33       	cpi	r24, 0x3A	; 58
    3ed4:	0c f0       	brlt	.+2      	; 0x3ed8 <itoa+0x2c>
    3ed6:	89 5d       	subi	r24, 0xD9	; 217
    3ed8:	81 93       	st	Z+, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	00 97       	sbiw	r24, 0x00	; 0
    3ede:	a1 f7       	brne	.-24     	; 0x3ec8 <itoa+0x1c>
    3ee0:	16 f4       	brtc	.+4      	; 0x3ee6 <itoa+0x3a>
    3ee2:	5d e2       	ldi	r21, 0x2D	; 45
    3ee4:	51 93       	st	Z+, r21
    3ee6:	10 82       	st	Z, r1
    3ee8:	c9 01       	movw	r24, r18
    3eea:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <strrev>

00003eee <strrev>:
    3eee:	dc 01       	movw	r26, r24
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	67 2f       	mov	r22, r23
    3ef4:	71 91       	ld	r23, Z+
    3ef6:	77 23       	and	r23, r23
    3ef8:	e1 f7       	brne	.-8      	; 0x3ef2 <strrev+0x4>
    3efa:	32 97       	sbiw	r30, 0x02	; 2
    3efc:	04 c0       	rjmp	.+8      	; 0x3f06 <strrev+0x18>
    3efe:	7c 91       	ld	r23, X
    3f00:	6d 93       	st	X+, r22
    3f02:	70 83       	st	Z, r23
    3f04:	62 91       	ld	r22, -Z
    3f06:	ae 17       	cp	r26, r30
    3f08:	bf 07       	cpc	r27, r31
    3f0a:	c8 f3       	brcs	.-14     	; 0x3efe <strrev+0x10>
    3f0c:	08 95       	ret

00003f0e <__udivmodhi4>:
    3f0e:	aa 1b       	sub	r26, r26
    3f10:	bb 1b       	sub	r27, r27
    3f12:	51 e1       	ldi	r21, 0x11	; 17
    3f14:	07 c0       	rjmp	.+14     	; 0x3f24 <__udivmodhi4_ep>

00003f16 <__udivmodhi4_loop>:
    3f16:	aa 1f       	adc	r26, r26
    3f18:	bb 1f       	adc	r27, r27
    3f1a:	a6 17       	cp	r26, r22
    3f1c:	b7 07       	cpc	r27, r23
    3f1e:	10 f0       	brcs	.+4      	; 0x3f24 <__udivmodhi4_ep>
    3f20:	a6 1b       	sub	r26, r22
    3f22:	b7 0b       	sbc	r27, r23

00003f24 <__udivmodhi4_ep>:
    3f24:	88 1f       	adc	r24, r24
    3f26:	99 1f       	adc	r25, r25
    3f28:	5a 95       	dec	r21
    3f2a:	a9 f7       	brne	.-22     	; 0x3f16 <__udivmodhi4_loop>
    3f2c:	80 95       	com	r24
    3f2e:	90 95       	com	r25
    3f30:	bc 01       	movw	r22, r24
    3f32:	cd 01       	movw	r24, r26
    3f34:	08 95       	ret

00003f36 <_exit>:
    3f36:	f8 94       	cli

00003f38 <__stop_program>:
    3f38:	ff cf       	rjmp	.-2      	; 0x3f38 <__stop_program>
