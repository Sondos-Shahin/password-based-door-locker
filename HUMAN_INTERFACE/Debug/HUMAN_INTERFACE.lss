
HUMAN_INTERFACE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000372a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  0000372a  000037be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800138  00800138  00003896  2**0
                  ALLOC
  3 .stab         0000300c  00000000  00000000  00003898  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000baf  00000000  00000000  000068a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007453  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007593  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007703  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000934c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a237  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000afe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b144  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b3d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 33       	cpi	r26, 0x38	; 56
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e3       	ldi	r26, 0x38	; 56
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 33       	cpi	r26, 0x39	; 57
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c8 19 	call	0x3390	; 0x3390 <main>
      8a:	0c 94 93 1b 	jmp	0x3726	; 0x3726 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 1b 	jmp	0x362e	; 0x362e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e2       	ldi	r26, 0x2F	; 47
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 1b 	jmp	0x362e	; 0x362e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e2       	ldi	r24, 0x2F	; 47
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <FirstTrial>:
 ***************************************************************************************************/



void FirstTrial()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	Store_Password();
     b5a:	0e 94 34 06 	call	0xc68	; 0xc68 <Store_Password>
	LCD_clearScreen();
     b5e:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
	while( (UART_recieveByte()!=READY));
     b62:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
     b66:	80 31       	cpi	r24, 0x10	; 16
     b68:	e1 f7       	brne	.-8      	; 0xb62 <FirstTrial+0x1c>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	aa ef       	ldi	r26, 0xFA	; 250
     b70:	b3 e4       	ldi	r27, 0x43	; 67
     b72:	8b 87       	std	Y+11, r24	; 0x0b
     b74:	9c 87       	std	Y+12, r25	; 0x0c
     b76:	ad 87       	std	Y+13, r26	; 0x0d
     b78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b80:	9e 85       	ldd	r25, Y+14	; 0x0e
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	4a e7       	ldi	r20, 0x7A	; 122
     b88:	53 e4       	ldi	r21, 0x43	; 67
     b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	8f 83       	std	Y+7, r24	; 0x07
     b94:	98 87       	std	Y+8, r25	; 0x08
     b96:	a9 87       	std	Y+9, r26	; 0x09
     b98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b9a:	6f 81       	ldd	r22, Y+7	; 0x07
     b9c:	78 85       	ldd	r23, Y+8	; 0x08
     b9e:	89 85       	ldd	r24, Y+9	; 0x09
     ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bae:	88 23       	and	r24, r24
     bb0:	2c f4       	brge	.+10     	; 0xbbc <FirstTrial+0x76>
		__ticks = 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	9e 83       	std	Y+6, r25	; 0x06
     bb8:	8d 83       	std	Y+5, r24	; 0x05
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <FirstTrial+0xf4>
	else if (__tmp > 65535)
     bbc:	6f 81       	ldd	r22, Y+7	; 0x07
     bbe:	78 85       	ldd	r23, Y+8	; 0x08
     bc0:	89 85       	ldd	r24, Y+9	; 0x09
     bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	3f ef       	ldi	r19, 0xFF	; 255
     bc8:	4f e7       	ldi	r20, 0x7F	; 127
     bca:	57 e4       	ldi	r21, 0x47	; 71
     bcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd0:	18 16       	cp	r1, r24
     bd2:	4c f5       	brge	.+82     	; 0xc26 <FirstTrial+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bda:	9e 85       	ldd	r25, Y+14	; 0x0e
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e2       	ldi	r20, 0x20	; 32
     be2:	51 e4       	ldi	r21, 0x41	; 65
     be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	bc 01       	movw	r22, r24
     bee:	cd 01       	movw	r24, r26
     bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
     bf8:	9e 83       	std	Y+6, r25	; 0x06
     bfa:	8d 83       	std	Y+5, r24	; 0x05
     bfc:	0f c0       	rjmp	.+30     	; 0xc1c <FirstTrial+0xd6>
     bfe:	89 e1       	ldi	r24, 0x19	; 25
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	9c 83       	std	Y+4, r25	; 0x04
     c04:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <FirstTrial+0xc4>
     c0e:	9c 83       	std	Y+4, r25	; 0x04
     c10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	9e 81       	ldd	r25, Y+6	; 0x06
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	9e 83       	std	Y+6, r25	; 0x06
     c1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1c:	8d 81       	ldd	r24, Y+5	; 0x05
     c1e:	9e 81       	ldd	r25, Y+6	; 0x06
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	69 f7       	brne	.-38     	; 0xbfe <FirstTrial+0xb8>
     c24:	14 c0       	rjmp	.+40     	; 0xc4e <FirstTrial+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c26:	6f 81       	ldd	r22, Y+7	; 0x07
     c28:	78 85       	ldd	r23, Y+8	; 0x08
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	9e 83       	std	Y+6, r25	; 0x06
     c38:	8d 83       	std	Y+5, r24	; 0x05
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <FirstTrial+0x100>
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
	//LCD_displayString("    saved");
	_delay_ms(500);
	LCD_clearScreen();
     c4e:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
	FirstTrial_1();
     c52:	0e 94 59 07 	call	0xeb2	; 0xeb2 <FirstTrial_1>
}
     c56:	2e 96       	adiw	r28, 0x0e	; 14
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <Store_Password>:
 *
 * [Returns]:     none
 ***************************************************************************************************/


void Store_Password(){
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	6e 97       	sbiw	r28, 0x1e	; 30
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61

	LCD_displayString("enter your first ");
     c7c:	80 e6       	ldi	r24, 0x60	; 96
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
	LCD_goToRowColumn(1,2);
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	62 e0       	ldi	r22, 0x02	; 2
     c88:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_goToRowColumn>
	LCD_displayString(" password");
     c8c:	82 e7       	ldi	r24, 0x72	; 114
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	aa e7       	ldi	r26, 0x7A	; 122
     c9a:	b4 e4       	ldi	r27, 0x44	; 68
     c9c:	89 8f       	std	Y+25, r24	; 0x19
     c9e:	9a 8f       	std	Y+26, r25	; 0x1a
     ca0:	ab 8f       	std	Y+27, r26	; 0x1b
     ca2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca4:	69 8d       	ldd	r22, Y+25	; 0x19
     ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	4a e7       	ldi	r20, 0x7A	; 122
     cb2:	53 e4       	ldi	r21, 0x43	; 67
     cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	8d 8b       	std	Y+21, r24	; 0x15
     cbe:	9e 8b       	std	Y+22, r25	; 0x16
     cc0:	af 8b       	std	Y+23, r26	; 0x17
     cc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cc4:	6d 89       	ldd	r22, Y+21	; 0x15
     cc6:	7e 89       	ldd	r23, Y+22	; 0x16
     cc8:	8f 89       	ldd	r24, Y+23	; 0x17
     cca:	98 8d       	ldd	r25, Y+24	; 0x18
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 e8       	ldi	r20, 0x80	; 128
     cd2:	5f e3       	ldi	r21, 0x3F	; 63
     cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd8:	88 23       	and	r24, r24
     cda:	2c f4       	brge	.+10     	; 0xce6 <Store_Password+0x7e>
		__ticks = 1;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9c 8b       	std	Y+20, r25	; 0x14
     ce2:	8b 8b       	std	Y+19, r24	; 0x13
     ce4:	3f c0       	rjmp	.+126    	; 0xd64 <Store_Password+0xfc>
	else if (__tmp > 65535)
     ce6:	6d 89       	ldd	r22, Y+21	; 0x15
     ce8:	7e 89       	ldd	r23, Y+22	; 0x16
     cea:	8f 89       	ldd	r24, Y+23	; 0x17
     cec:	98 8d       	ldd	r25, Y+24	; 0x18
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	3f ef       	ldi	r19, 0xFF	; 255
     cf2:	4f e7       	ldi	r20, 0x7F	; 127
     cf4:	57 e4       	ldi	r21, 0x47	; 71
     cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cfa:	18 16       	cp	r1, r24
     cfc:	4c f5       	brge	.+82     	; 0xd50 <Store_Password+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfe:	69 8d       	ldd	r22, Y+25	; 0x19
     d00:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d02:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d04:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e2       	ldi	r20, 0x20	; 32
     d0c:	51 e4       	ldi	r21, 0x41	; 65
     d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	bc 01       	movw	r22, r24
     d18:	cd 01       	movw	r24, r26
     d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	9c 8b       	std	Y+20, r25	; 0x14
     d24:	8b 8b       	std	Y+19, r24	; 0x13
     d26:	0f c0       	rjmp	.+30     	; 0xd46 <Store_Password+0xde>
     d28:	89 e1       	ldi	r24, 0x19	; 25
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	9a 8b       	std	Y+18, r25	; 0x12
     d2e:	89 8b       	std	Y+17, r24	; 0x11
     d30:	89 89       	ldd	r24, Y+17	; 0x11
     d32:	9a 89       	ldd	r25, Y+18	; 0x12
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <Store_Password+0xcc>
     d38:	9a 8b       	std	Y+18, r25	; 0x12
     d3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3c:	8b 89       	ldd	r24, Y+19	; 0x13
     d3e:	9c 89       	ldd	r25, Y+20	; 0x14
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	9c 8b       	std	Y+20, r25	; 0x14
     d44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d46:	8b 89       	ldd	r24, Y+19	; 0x13
     d48:	9c 89       	ldd	r25, Y+20	; 0x14
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	69 f7       	brne	.-38     	; 0xd28 <Store_Password+0xc0>
     d4e:	14 c0       	rjmp	.+40     	; 0xd78 <Store_Password+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d50:	6d 89       	ldd	r22, Y+21	; 0x15
     d52:	7e 89       	ldd	r23, Y+22	; 0x16
     d54:	8f 89       	ldd	r24, Y+23	; 0x17
     d56:	98 8d       	ldd	r25, Y+24	; 0x18
     d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	9c 8b       	std	Y+20, r25	; 0x14
     d62:	8b 8b       	std	Y+19, r24	; 0x13
     d64:	8b 89       	ldd	r24, Y+19	; 0x13
     d66:	9c 89       	ldd	r25, Y+20	; 0x14
     d68:	98 8b       	std	Y+16, r25	; 0x10
     d6a:	8f 87       	std	Y+15, r24	; 0x0f
     d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6e:	98 89       	ldd	r25, Y+16	; 0x10
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <Store_Password+0x108>
     d74:	98 8b       	std	Y+16, r25	; 0x10
     d76:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_clearScreen();
     d78:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
	uint8 i=0;
     d7c:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 key=0;
     d7e:	1d 8e       	std	Y+29, r1	; 0x1d
     d80:	8b c0       	rjmp	.+278    	; 0xe98 <Store_Password+0x230>
	while(i<=(password_length-1)){
		key = KeyPad_getPressedKey();
     d82:	0e 94 30 10 	call	0x2060	; 0x2060 <KeyPad_getPressedKey>
     d86:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_intgerToString(key);
     d88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_intgerToString>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a6 e9       	ldi	r26, 0x96	; 150
     d98:	b3 e4       	ldi	r27, 0x43	; 67
     d9a:	8b 87       	std	Y+11, r24	; 0x0b
     d9c:	9c 87       	std	Y+12, r25	; 0x0c
     d9e:	ad 87       	std	Y+13, r26	; 0x0d
     da0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da2:	6b 85       	ldd	r22, Y+11	; 0x0b
     da4:	7c 85       	ldd	r23, Y+12	; 0x0c
     da6:	8d 85       	ldd	r24, Y+13	; 0x0d
     da8:	9e 85       	ldd	r25, Y+14	; 0x0e
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	4a e7       	ldi	r20, 0x7A	; 122
     db0:	53 e4       	ldi	r21, 0x43	; 67
     db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	8f 83       	std	Y+7, r24	; 0x07
     dbc:	98 87       	std	Y+8, r25	; 0x08
     dbe:	a9 87       	std	Y+9, r26	; 0x09
     dc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dc2:	6f 81       	ldd	r22, Y+7	; 0x07
     dc4:	78 85       	ldd	r23, Y+8	; 0x08
     dc6:	89 85       	ldd	r24, Y+9	; 0x09
     dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e8       	ldi	r20, 0x80	; 128
     dd0:	5f e3       	ldi	r21, 0x3F	; 63
     dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dd6:	88 23       	and	r24, r24
     dd8:	2c f4       	brge	.+10     	; 0xde4 <Store_Password+0x17c>
		__ticks = 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	9e 83       	std	Y+6, r25	; 0x06
     de0:	8d 83       	std	Y+5, r24	; 0x05
     de2:	3f c0       	rjmp	.+126    	; 0xe62 <Store_Password+0x1fa>
	else if (__tmp > 65535)
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	3f ef       	ldi	r19, 0xFF	; 255
     df0:	4f e7       	ldi	r20, 0x7F	; 127
     df2:	57 e4       	ldi	r21, 0x47	; 71
     df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df8:	18 16       	cp	r1, r24
     dfa:	4c f5       	brge	.+82     	; 0xe4e <Store_Password+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     e00:	8d 85       	ldd	r24, Y+13	; 0x0d
     e02:	9e 85       	ldd	r25, Y+14	; 0x0e
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e2       	ldi	r20, 0x20	; 32
     e0a:	51 e4       	ldi	r21, 0x41	; 65
     e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	bc 01       	movw	r22, r24
     e16:	cd 01       	movw	r24, r26
     e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	9e 83       	std	Y+6, r25	; 0x06
     e22:	8d 83       	std	Y+5, r24	; 0x05
     e24:	0f c0       	rjmp	.+30     	; 0xe44 <Store_Password+0x1dc>
     e26:	89 e1       	ldi	r24, 0x19	; 25
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9c 83       	std	Y+4, r25	; 0x04
     e2c:	8b 83       	std	Y+3, r24	; 0x03
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <Store_Password+0x1ca>
     e36:	9c 83       	std	Y+4, r25	; 0x04
     e38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3a:	8d 81       	ldd	r24, Y+5	; 0x05
     e3c:	9e 81       	ldd	r25, Y+6	; 0x06
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	9e 83       	std	Y+6, r25	; 0x06
     e42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e44:	8d 81       	ldd	r24, Y+5	; 0x05
     e46:	9e 81       	ldd	r25, Y+6	; 0x06
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	69 f7       	brne	.-38     	; 0xe26 <Store_Password+0x1be>
     e4c:	14 c0       	rjmp	.+40     	; 0xe76 <Store_Password+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e4e:	6f 81       	ldd	r22, Y+7	; 0x07
     e50:	78 85       	ldd	r23, Y+8	; 0x08
     e52:	89 85       	ldd	r24, Y+9	; 0x09
     e54:	9a 85       	ldd	r25, Y+10	; 0x0a
     e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	9e 83       	std	Y+6, r25	; 0x06
     e60:	8d 83       	std	Y+5, r24	; 0x05
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <Store_Password+0x206>
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		LCD_goToRowColumn(0,i);
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e7a:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_goToRowColumn>
		LCD_displayCharacter('*');
     e7e:	8a e2       	ldi	r24, 0x2A	; 42
     e80:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <LCD_displayCharacter>
		while(UART_recieveByte()!=READY);
     e84:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
     e88:	80 31       	cpi	r24, 0x10	; 16
     e8a:	e1 f7       	brne	.-8      	; 0xe84 <Store_Password+0x21c>
		UART_sendByte(key);
     e8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e8e:	0e 94 85 1a 	call	0x350a	; 0x350a <UART_sendByte>

		i++;
     e92:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	8e 8f       	std	Y+30, r24	; 0x1e
	LCD_displayString(" password");
	_delay_ms(1000);
	LCD_clearScreen();
	uint8 i=0;
	uint8 key=0;
	while(i<=(password_length-1)){
     e98:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	08 f4       	brcc	.+2      	; 0xea0 <Store_Password+0x238>
     e9e:	71 cf       	rjmp	.-286    	; 0xd82 <Store_Password+0x11a>
		UART_sendByte(key);

		i++;

	}
}
     ea0:	6e 96       	adiw	r28, 0x1e	; 30
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <FirstTrial_1>:
 *
 * [Returns]:     none
 ***************************************************************************************************/


void FirstTrial_1(){
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	6f 97       	sbiw	r28, 0x1f	; 31
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
	uint8 check=confirm();
     ec6:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <confirm>
     eca:	8d 8f       	std	Y+29, r24	; 0x1d
	switch(check)
     ecc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	3f 8f       	std	Y+31, r19	; 0x1f
     ed4:	2e 8f       	std	Y+30, r18	; 0x1e
     ed6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ed8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	09 f4       	brne	.+2      	; 0xee0 <FirstTrial_1+0x2e>
     ede:	87 c0       	rjmp	.+270    	; 0xfee <FirstTrial_1+0x13c>
     ee0:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ee2:	3f 8d       	ldd	r19, Y+31	; 0x1f
     ee4:	21 30       	cpi	r18, 0x01	; 1
     ee6:	31 05       	cpc	r19, r1
     ee8:	09 f0       	breq	.+2      	; 0xeec <FirstTrial_1+0x3a>
     eea:	fd c0       	rjmp	.+506    	; 0x10e6 <FirstTrial_1+0x234>
	{
	case match:
		LCD_clearScreen();
     eec:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
		LCD_displayString("   saved");
     ef0:	8c e7       	ldi	r24, 0x7C	; 124
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	aa e7       	ldi	r26, 0x7A	; 122
     efe:	b4 e4       	ldi	r27, 0x44	; 68
     f00:	89 8f       	std	Y+25, r24	; 0x19
     f02:	9a 8f       	std	Y+26, r25	; 0x1a
     f04:	ab 8f       	std	Y+27, r26	; 0x1b
     f06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f08:	69 8d       	ldd	r22, Y+25	; 0x19
     f0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	4a e7       	ldi	r20, 0x7A	; 122
     f16:	53 e4       	ldi	r21, 0x43	; 67
     f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	8d 8b       	std	Y+21, r24	; 0x15
     f22:	9e 8b       	std	Y+22, r25	; 0x16
     f24:	af 8b       	std	Y+23, r26	; 0x17
     f26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f28:	6d 89       	ldd	r22, Y+21	; 0x15
     f2a:	7e 89       	ldd	r23, Y+22	; 0x16
     f2c:	8f 89       	ldd	r24, Y+23	; 0x17
     f2e:	98 8d       	ldd	r25, Y+24	; 0x18
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e8       	ldi	r20, 0x80	; 128
     f36:	5f e3       	ldi	r21, 0x3F	; 63
     f38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f3c:	88 23       	and	r24, r24
     f3e:	2c f4       	brge	.+10     	; 0xf4a <FirstTrial_1+0x98>
		__ticks = 1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9c 8b       	std	Y+20, r25	; 0x14
     f46:	8b 8b       	std	Y+19, r24	; 0x13
     f48:	3f c0       	rjmp	.+126    	; 0xfc8 <FirstTrial_1+0x116>
	else if (__tmp > 65535)
     f4a:	6d 89       	ldd	r22, Y+21	; 0x15
     f4c:	7e 89       	ldd	r23, Y+22	; 0x16
     f4e:	8f 89       	ldd	r24, Y+23	; 0x17
     f50:	98 8d       	ldd	r25, Y+24	; 0x18
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	3f ef       	ldi	r19, 0xFF	; 255
     f56:	4f e7       	ldi	r20, 0x7F	; 127
     f58:	57 e4       	ldi	r21, 0x47	; 71
     f5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5e:	18 16       	cp	r1, r24
     f60:	4c f5       	brge	.+82     	; 0xfb4 <FirstTrial_1+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f62:	69 8d       	ldd	r22, Y+25	; 0x19
     f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e2       	ldi	r20, 0x20	; 32
     f70:	51 e4       	ldi	r21, 0x41	; 65
     f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	9c 8b       	std	Y+20, r25	; 0x14
     f88:	8b 8b       	std	Y+19, r24	; 0x13
     f8a:	0f c0       	rjmp	.+30     	; 0xfaa <FirstTrial_1+0xf8>
     f8c:	89 e1       	ldi	r24, 0x19	; 25
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	9a 8b       	std	Y+18, r25	; 0x12
     f92:	89 8b       	std	Y+17, r24	; 0x11
     f94:	89 89       	ldd	r24, Y+17	; 0x11
     f96:	9a 89       	ldd	r25, Y+18	; 0x12
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <FirstTrial_1+0xe6>
     f9c:	9a 8b       	std	Y+18, r25	; 0x12
     f9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa0:	8b 89       	ldd	r24, Y+19	; 0x13
     fa2:	9c 89       	ldd	r25, Y+20	; 0x14
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	9c 8b       	std	Y+20, r25	; 0x14
     fa8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     faa:	8b 89       	ldd	r24, Y+19	; 0x13
     fac:	9c 89       	ldd	r25, Y+20	; 0x14
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	69 f7       	brne	.-38     	; 0xf8c <FirstTrial_1+0xda>
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <FirstTrial_1+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb4:	6d 89       	ldd	r22, Y+21	; 0x15
     fb6:	7e 89       	ldd	r23, Y+22	; 0x16
     fb8:	8f 89       	ldd	r24, Y+23	; 0x17
     fba:	98 8d       	ldd	r25, Y+24	; 0x18
     fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	9c 8b       	std	Y+20, r25	; 0x14
     fc6:	8b 8b       	std	Y+19, r24	; 0x13
     fc8:	8b 89       	ldd	r24, Y+19	; 0x13
     fca:	9c 89       	ldd	r25, Y+20	; 0x14
     fcc:	98 8b       	std	Y+16, r25	; 0x10
     fce:	8f 87       	std	Y+15, r24	; 0x0f
     fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd2:	98 89       	ldd	r25, Y+16	; 0x10
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <FirstTrial_1+0x122>
     fd8:	98 8b       	std	Y+16, r25	; 0x10
     fda:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_clearScreen();
     fdc:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
		while(UART_recieveByte()!=READY);
     fe0:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
     fe4:	80 31       	cpi	r24, 0x10	; 16
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <FirstTrial_1+0x12e>
		options();
     fe8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <options>
     fec:	7c c0       	rjmp	.+248    	; 0x10e6 <FirstTrial_1+0x234>
		break;
	case missmatch:
		LCD_clearScreen();
     fee:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
		LCD_displayString("   mismatch");
     ff2:	85 e8       	ldi	r24, 0x85	; 133
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	aa e7       	ldi	r26, 0x7A	; 122
    1000:	b4 e4       	ldi	r27, 0x44	; 68
    1002:	8b 87       	std	Y+11, r24	; 0x0b
    1004:	9c 87       	std	Y+12, r25	; 0x0c
    1006:	ad 87       	std	Y+13, r26	; 0x0d
    1008:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100a:	6b 85       	ldd	r22, Y+11	; 0x0b
    100c:	7c 85       	ldd	r23, Y+12	; 0x0c
    100e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1010:	9e 85       	ldd	r25, Y+14	; 0x0e
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	4a e7       	ldi	r20, 0x7A	; 122
    1018:	53 e4       	ldi	r21, 0x43	; 67
    101a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	8f 83       	std	Y+7, r24	; 0x07
    1024:	98 87       	std	Y+8, r25	; 0x08
    1026:	a9 87       	std	Y+9, r26	; 0x09
    1028:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    102a:	6f 81       	ldd	r22, Y+7	; 0x07
    102c:	78 85       	ldd	r23, Y+8	; 0x08
    102e:	89 85       	ldd	r24, Y+9	; 0x09
    1030:	9a 85       	ldd	r25, Y+10	; 0x0a
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e8       	ldi	r20, 0x80	; 128
    1038:	5f e3       	ldi	r21, 0x3F	; 63
    103a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    103e:	88 23       	and	r24, r24
    1040:	2c f4       	brge	.+10     	; 0x104c <FirstTrial_1+0x19a>
		__ticks = 1;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
    104a:	3f c0       	rjmp	.+126    	; 0x10ca <FirstTrial_1+0x218>
	else if (__tmp > 65535)
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	3f ef       	ldi	r19, 0xFF	; 255
    1058:	4f e7       	ldi	r20, 0x7F	; 127
    105a:	57 e4       	ldi	r21, 0x47	; 71
    105c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1060:	18 16       	cp	r1, r24
    1062:	4c f5       	brge	.+82     	; 0x10b6 <FirstTrial_1+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1064:	6b 85       	ldd	r22, Y+11	; 0x0b
    1066:	7c 85       	ldd	r23, Y+12	; 0x0c
    1068:	8d 85       	ldd	r24, Y+13	; 0x0d
    106a:	9e 85       	ldd	r25, Y+14	; 0x0e
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e2       	ldi	r20, 0x20	; 32
    1072:	51 e4       	ldi	r21, 0x41	; 65
    1074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	0f c0       	rjmp	.+30     	; 0x10ac <FirstTrial_1+0x1fa>
    108e:	89 e1       	ldi	r24, 0x19	; 25
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	9c 83       	std	Y+4, r25	; 0x04
    1094:	8b 83       	std	Y+3, r24	; 0x03
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <FirstTrial_1+0x1e8>
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ac:	8d 81       	ldd	r24, Y+5	; 0x05
    10ae:	9e 81       	ldd	r25, Y+6	; 0x06
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	69 f7       	brne	.-38     	; 0x108e <FirstTrial_1+0x1dc>
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <FirstTrial_1+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b6:	6f 81       	ldd	r22, Y+7	; 0x07
    10b8:	78 85       	ldd	r23, Y+8	; 0x08
    10ba:	89 85       	ldd	r24, Y+9	; 0x09
    10bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <FirstTrial_1+0x224>
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    10de:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
		FirstTrial();
    10e2:	0e 94 a3 05 	call	0xb46	; 0xb46 <FirstTrial>

		break;
	}
}
    10e6:	6f 96       	adiw	r28, 0x1f	; 31
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <confirm>:
 ***************************************************************************************************/



uint8 confirm()
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	6e 97       	sbiw	r28, 0x1e	; 30
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61

	LCD_displayString("confirm password ");
    110c:	81 e9       	ldi	r24, 0x91	; 145
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	aa e7       	ldi	r26, 0x7A	; 122
    111a:	b4 e4       	ldi	r27, 0x44	; 68
    111c:	89 8f       	std	Y+25, r24	; 0x19
    111e:	9a 8f       	std	Y+26, r25	; 0x1a
    1120:	ab 8f       	std	Y+27, r26	; 0x1b
    1122:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1124:	69 8d       	ldd	r22, Y+25	; 0x19
    1126:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1128:	8b 8d       	ldd	r24, Y+27	; 0x1b
    112a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	4a e7       	ldi	r20, 0x7A	; 122
    1132:	53 e4       	ldi	r21, 0x43	; 67
    1134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	8d 8b       	std	Y+21, r24	; 0x15
    113e:	9e 8b       	std	Y+22, r25	; 0x16
    1140:	af 8b       	std	Y+23, r26	; 0x17
    1142:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1144:	6d 89       	ldd	r22, Y+21	; 0x15
    1146:	7e 89       	ldd	r23, Y+22	; 0x16
    1148:	8f 89       	ldd	r24, Y+23	; 0x17
    114a:	98 8d       	ldd	r25, Y+24	; 0x18
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e8       	ldi	r20, 0x80	; 128
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1158:	88 23       	and	r24, r24
    115a:	2c f4       	brge	.+10     	; 0x1166 <confirm+0x6e>
		__ticks = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9c 8b       	std	Y+20, r25	; 0x14
    1162:	8b 8b       	std	Y+19, r24	; 0x13
    1164:	3f c0       	rjmp	.+126    	; 0x11e4 <confirm+0xec>
	else if (__tmp > 65535)
    1166:	6d 89       	ldd	r22, Y+21	; 0x15
    1168:	7e 89       	ldd	r23, Y+22	; 0x16
    116a:	8f 89       	ldd	r24, Y+23	; 0x17
    116c:	98 8d       	ldd	r25, Y+24	; 0x18
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	3f ef       	ldi	r19, 0xFF	; 255
    1172:	4f e7       	ldi	r20, 0x7F	; 127
    1174:	57 e4       	ldi	r21, 0x47	; 71
    1176:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    117a:	18 16       	cp	r1, r24
    117c:	4c f5       	brge	.+82     	; 0x11d0 <confirm+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117e:	69 8d       	ldd	r22, Y+25	; 0x19
    1180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e2       	ldi	r20, 0x20	; 32
    118c:	51 e4       	ldi	r21, 0x41	; 65
    118e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9c 8b       	std	Y+20, r25	; 0x14
    11a4:	8b 8b       	std	Y+19, r24	; 0x13
    11a6:	0f c0       	rjmp	.+30     	; 0x11c6 <confirm+0xce>
    11a8:	89 e1       	ldi	r24, 0x19	; 25
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9a 8b       	std	Y+18, r25	; 0x12
    11ae:	89 8b       	std	Y+17, r24	; 0x11
    11b0:	89 89       	ldd	r24, Y+17	; 0x11
    11b2:	9a 89       	ldd	r25, Y+18	; 0x12
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <confirm+0xbc>
    11b8:	9a 8b       	std	Y+18, r25	; 0x12
    11ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11bc:	8b 89       	ldd	r24, Y+19	; 0x13
    11be:	9c 89       	ldd	r25, Y+20	; 0x14
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	9c 8b       	std	Y+20, r25	; 0x14
    11c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c6:	8b 89       	ldd	r24, Y+19	; 0x13
    11c8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	69 f7       	brne	.-38     	; 0x11a8 <confirm+0xb0>
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <confirm+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d0:	6d 89       	ldd	r22, Y+21	; 0x15
    11d2:	7e 89       	ldd	r23, Y+22	; 0x16
    11d4:	8f 89       	ldd	r24, Y+23	; 0x17
    11d6:	98 8d       	ldd	r25, Y+24	; 0x18
    11d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	9c 8b       	std	Y+20, r25	; 0x14
    11e2:	8b 8b       	std	Y+19, r24	; 0x13
    11e4:	8b 89       	ldd	r24, Y+19	; 0x13
    11e6:	9c 89       	ldd	r25, Y+20	; 0x14
    11e8:	98 8b       	std	Y+16, r25	; 0x10
    11ea:	8f 87       	std	Y+15, r24	; 0x0f
    11ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ee:	98 89       	ldd	r25, Y+16	; 0x10
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <confirm+0xf8>
    11f4:	98 8b       	std	Y+16, r25	; 0x10
    11f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_clearScreen();
    11f8:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
	uint8 i=0;
    11fc:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 key=0;
    11fe:	1d 8e       	std	Y+29, r1	; 0x1d
    1200:	8b c0       	rjmp	.+278    	; 0x1318 <confirm+0x220>
	while(i<=(password_length-1)){
		key = KeyPad_getPressedKey();
    1202:	0e 94 30 10 	call	0x2060	; 0x2060 <KeyPad_getPressedKey>
    1206:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_intgerToString(key);
    1208:	8d 8d       	ldd	r24, Y+29	; 0x1d
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_intgerToString>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a6 e9       	ldi	r26, 0x96	; 150
    1218:	b3 e4       	ldi	r27, 0x43	; 67
    121a:	8b 87       	std	Y+11, r24	; 0x0b
    121c:	9c 87       	std	Y+12, r25	; 0x0c
    121e:	ad 87       	std	Y+13, r26	; 0x0d
    1220:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1222:	6b 85       	ldd	r22, Y+11	; 0x0b
    1224:	7c 85       	ldd	r23, Y+12	; 0x0c
    1226:	8d 85       	ldd	r24, Y+13	; 0x0d
    1228:	9e 85       	ldd	r25, Y+14	; 0x0e
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	4a e7       	ldi	r20, 0x7A	; 122
    1230:	53 e4       	ldi	r21, 0x43	; 67
    1232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	8f 83       	std	Y+7, r24	; 0x07
    123c:	98 87       	std	Y+8, r25	; 0x08
    123e:	a9 87       	std	Y+9, r26	; 0x09
    1240:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1242:	6f 81       	ldd	r22, Y+7	; 0x07
    1244:	78 85       	ldd	r23, Y+8	; 0x08
    1246:	89 85       	ldd	r24, Y+9	; 0x09
    1248:	9a 85       	ldd	r25, Y+10	; 0x0a
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e8       	ldi	r20, 0x80	; 128
    1250:	5f e3       	ldi	r21, 0x3F	; 63
    1252:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1256:	88 23       	and	r24, r24
    1258:	2c f4       	brge	.+10     	; 0x1264 <confirm+0x16c>
		__ticks = 1;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9e 83       	std	Y+6, r25	; 0x06
    1260:	8d 83       	std	Y+5, r24	; 0x05
    1262:	3f c0       	rjmp	.+126    	; 0x12e2 <confirm+0x1ea>
	else if (__tmp > 65535)
    1264:	6f 81       	ldd	r22, Y+7	; 0x07
    1266:	78 85       	ldd	r23, Y+8	; 0x08
    1268:	89 85       	ldd	r24, Y+9	; 0x09
    126a:	9a 85       	ldd	r25, Y+10	; 0x0a
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	3f ef       	ldi	r19, 0xFF	; 255
    1270:	4f e7       	ldi	r20, 0x7F	; 127
    1272:	57 e4       	ldi	r21, 0x47	; 71
    1274:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1278:	18 16       	cp	r1, r24
    127a:	4c f5       	brge	.+82     	; 0x12ce <confirm+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127c:	6b 85       	ldd	r22, Y+11	; 0x0b
    127e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1280:	8d 85       	ldd	r24, Y+13	; 0x0d
    1282:	9e 85       	ldd	r25, Y+14	; 0x0e
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e2       	ldi	r20, 0x20	; 32
    128a:	51 e4       	ldi	r21, 0x41	; 65
    128c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	9e 83       	std	Y+6, r25	; 0x06
    12a2:	8d 83       	std	Y+5, r24	; 0x05
    12a4:	0f c0       	rjmp	.+30     	; 0x12c4 <confirm+0x1cc>
    12a6:	89 e1       	ldi	r24, 0x19	; 25
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	8b 83       	std	Y+3, r24	; 0x03
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <confirm+0x1ba>
    12b6:	9c 83       	std	Y+4, r25	; 0x04
    12b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	9e 81       	ldd	r25, Y+6	; 0x06
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	69 f7       	brne	.-38     	; 0x12a6 <confirm+0x1ae>
    12cc:	14 c0       	rjmp	.+40     	; 0x12f6 <confirm+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ce:	6f 81       	ldd	r22, Y+7	; 0x07
    12d0:	78 85       	ldd	r23, Y+8	; 0x08
    12d2:	89 85       	ldd	r24, Y+9	; 0x09
    12d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	9e 81       	ldd	r25, Y+6	; 0x06
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <confirm+0x1f6>
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		LCD_goToRowColumn(0,i);
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    12fa:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_goToRowColumn>
		LCD_displayCharacter('*');
    12fe:	8a e2       	ldi	r24, 0x2A	; 42
    1300:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <LCD_displayCharacter>
		while(UART_recieveByte()!=READY);
    1304:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    1308:	80 31       	cpi	r24, 0x10	; 16
    130a:	e1 f7       	brne	.-8      	; 0x1304 <confirm+0x20c>
		UART_sendByte(key);
    130c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    130e:	0e 94 85 1a 	call	0x350a	; 0x350a <UART_sendByte>

		i++;
    1312:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1314:	8f 5f       	subi	r24, 0xFF	; 255
    1316:	8e 8f       	std	Y+30, r24	; 0x1e
	LCD_displayString("confirm password ");
	_delay_ms(1000);
	LCD_clearScreen();
	uint8 i=0;
	uint8 key=0;
	while(i<=(password_length-1)){
    1318:	8e 8d       	ldd	r24, Y+30	; 0x1e
    131a:	85 30       	cpi	r24, 0x05	; 5
    131c:	08 f4       	brcc	.+2      	; 0x1320 <confirm+0x228>
    131e:	71 cf       	rjmp	.-286    	; 0x1202 <confirm+0x10a>

		i++;
	}


	return 	UART_recieveByte();
    1320:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
}
    1324:	6e 96       	adiw	r28, 0x1e	; 30
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <Check_password>:
 *
 * [Returns]:     value that decides whether the enterd password and the stored one are matched or not
 ***************************************************************************************************/


uint8 Check_password(){
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	6e 97       	sbiw	r28, 0x1e	; 30
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61

	LCD_displayString("enter password ");
    134a:	83 ea       	ldi	r24, 0xA3	; 163
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	aa e7       	ldi	r26, 0x7A	; 122
    1358:	b4 e4       	ldi	r27, 0x44	; 68
    135a:	89 8f       	std	Y+25, r24	; 0x19
    135c:	9a 8f       	std	Y+26, r25	; 0x1a
    135e:	ab 8f       	std	Y+27, r26	; 0x1b
    1360:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1362:	69 8d       	ldd	r22, Y+25	; 0x19
    1364:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1366:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1368:	9c 8d       	ldd	r25, Y+28	; 0x1c
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	4a e7       	ldi	r20, 0x7A	; 122
    1370:	53 e4       	ldi	r21, 0x43	; 67
    1372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	8d 8b       	std	Y+21, r24	; 0x15
    137c:	9e 8b       	std	Y+22, r25	; 0x16
    137e:	af 8b       	std	Y+23, r26	; 0x17
    1380:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1382:	6d 89       	ldd	r22, Y+21	; 0x15
    1384:	7e 89       	ldd	r23, Y+22	; 0x16
    1386:	8f 89       	ldd	r24, Y+23	; 0x17
    1388:	98 8d       	ldd	r25, Y+24	; 0x18
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e8       	ldi	r20, 0x80	; 128
    1390:	5f e3       	ldi	r21, 0x3F	; 63
    1392:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1396:	88 23       	and	r24, r24
    1398:	2c f4       	brge	.+10     	; 0x13a4 <Check_password+0x6e>
		__ticks = 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9c 8b       	std	Y+20, r25	; 0x14
    13a0:	8b 8b       	std	Y+19, r24	; 0x13
    13a2:	3f c0       	rjmp	.+126    	; 0x1422 <Check_password+0xec>
	else if (__tmp > 65535)
    13a4:	6d 89       	ldd	r22, Y+21	; 0x15
    13a6:	7e 89       	ldd	r23, Y+22	; 0x16
    13a8:	8f 89       	ldd	r24, Y+23	; 0x17
    13aa:	98 8d       	ldd	r25, Y+24	; 0x18
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	3f ef       	ldi	r19, 0xFF	; 255
    13b0:	4f e7       	ldi	r20, 0x7F	; 127
    13b2:	57 e4       	ldi	r21, 0x47	; 71
    13b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13b8:	18 16       	cp	r1, r24
    13ba:	4c f5       	brge	.+82     	; 0x140e <Check_password+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13bc:	69 8d       	ldd	r22, Y+25	; 0x19
    13be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e2       	ldi	r20, 0x20	; 32
    13ca:	51 e4       	ldi	r21, 0x41	; 65
    13cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9c 8b       	std	Y+20, r25	; 0x14
    13e2:	8b 8b       	std	Y+19, r24	; 0x13
    13e4:	0f c0       	rjmp	.+30     	; 0x1404 <Check_password+0xce>
    13e6:	89 e1       	ldi	r24, 0x19	; 25
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9a 8b       	std	Y+18, r25	; 0x12
    13ec:	89 8b       	std	Y+17, r24	; 0x11
    13ee:	89 89       	ldd	r24, Y+17	; 0x11
    13f0:	9a 89       	ldd	r25, Y+18	; 0x12
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <Check_password+0xbc>
    13f6:	9a 8b       	std	Y+18, r25	; 0x12
    13f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fa:	8b 89       	ldd	r24, Y+19	; 0x13
    13fc:	9c 89       	ldd	r25, Y+20	; 0x14
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	9c 8b       	std	Y+20, r25	; 0x14
    1402:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1404:	8b 89       	ldd	r24, Y+19	; 0x13
    1406:	9c 89       	ldd	r25, Y+20	; 0x14
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	69 f7       	brne	.-38     	; 0x13e6 <Check_password+0xb0>
    140c:	14 c0       	rjmp	.+40     	; 0x1436 <Check_password+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140e:	6d 89       	ldd	r22, Y+21	; 0x15
    1410:	7e 89       	ldd	r23, Y+22	; 0x16
    1412:	8f 89       	ldd	r24, Y+23	; 0x17
    1414:	98 8d       	ldd	r25, Y+24	; 0x18
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9c 8b       	std	Y+20, r25	; 0x14
    1420:	8b 8b       	std	Y+19, r24	; 0x13
    1422:	8b 89       	ldd	r24, Y+19	; 0x13
    1424:	9c 89       	ldd	r25, Y+20	; 0x14
    1426:	98 8b       	std	Y+16, r25	; 0x10
    1428:	8f 87       	std	Y+15, r24	; 0x0f
    142a:	8f 85       	ldd	r24, Y+15	; 0x0f
    142c:	98 89       	ldd	r25, Y+16	; 0x10
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <Check_password+0xf8>
    1432:	98 8b       	std	Y+16, r25	; 0x10
    1434:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_clearScreen();
    1436:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
	uint8 i=0;
    143a:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 key=0;
    143c:	1d 8e       	std	Y+29, r1	; 0x1d
    143e:	8b c0       	rjmp	.+278    	; 0x1556 <Check_password+0x220>
	while(i<=(password_length-1)){
		key = KeyPad_getPressedKey();
    1440:	0e 94 30 10 	call	0x2060	; 0x2060 <KeyPad_getPressedKey>
    1444:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_intgerToString(key);
    1446:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_intgerToString>
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a6 e9       	ldi	r26, 0x96	; 150
    1456:	b3 e4       	ldi	r27, 0x43	; 67
    1458:	8b 87       	std	Y+11, r24	; 0x0b
    145a:	9c 87       	std	Y+12, r25	; 0x0c
    145c:	ad 87       	std	Y+13, r26	; 0x0d
    145e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1460:	6b 85       	ldd	r22, Y+11	; 0x0b
    1462:	7c 85       	ldd	r23, Y+12	; 0x0c
    1464:	8d 85       	ldd	r24, Y+13	; 0x0d
    1466:	9e 85       	ldd	r25, Y+14	; 0x0e
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	4a e7       	ldi	r20, 0x7A	; 122
    146e:	53 e4       	ldi	r21, 0x43	; 67
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	8f 83       	std	Y+7, r24	; 0x07
    147a:	98 87       	std	Y+8, r25	; 0x08
    147c:	a9 87       	std	Y+9, r26	; 0x09
    147e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1480:	6f 81       	ldd	r22, Y+7	; 0x07
    1482:	78 85       	ldd	r23, Y+8	; 0x08
    1484:	89 85       	ldd	r24, Y+9	; 0x09
    1486:	9a 85       	ldd	r25, Y+10	; 0x0a
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1494:	88 23       	and	r24, r24
    1496:	2c f4       	brge	.+10     	; 0x14a2 <Check_password+0x16c>
		__ticks = 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8d 83       	std	Y+5, r24	; 0x05
    14a0:	3f c0       	rjmp	.+126    	; 0x1520 <Check_password+0x1ea>
	else if (__tmp > 65535)
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	3f ef       	ldi	r19, 0xFF	; 255
    14ae:	4f e7       	ldi	r20, 0x7F	; 127
    14b0:	57 e4       	ldi	r21, 0x47	; 71
    14b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	4c f5       	brge	.+82     	; 0x150c <Check_password+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    14bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14be:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e2       	ldi	r20, 0x20	; 32
    14c8:	51 e4       	ldi	r21, 0x41	; 65
    14ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <Check_password+0x1cc>
    14e4:	89 e1       	ldi	r24, 0x19	; 25
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9c 83       	std	Y+4, r25	; 0x04
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <Check_password+0x1ba>
    14f4:	9c 83       	std	Y+4, r25	; 0x04
    14f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	69 f7       	brne	.-38     	; 0x14e4 <Check_password+0x1ae>
    150a:	14 c0       	rjmp	.+40     	; 0x1534 <Check_password+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	9a 81       	ldd	r25, Y+2	; 0x02
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <Check_password+0x1f6>
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		LCD_goToRowColumn(0,i);
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1538:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_goToRowColumn>
		LCD_displayCharacter('*');
    153c:	8a e2       	ldi	r24, 0x2A	; 42
    153e:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <LCD_displayCharacter>
		while(UART_recieveByte()!=READY);
    1542:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    1546:	80 31       	cpi	r24, 0x10	; 16
    1548:	e1 f7       	brne	.-8      	; 0x1542 <Check_password+0x20c>
		UART_sendByte(key);
    154a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    154c:	0e 94 85 1a 	call	0x350a	; 0x350a <UART_sendByte>

		i++;
    1550:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1552:	8f 5f       	subi	r24, 0xFF	; 255
    1554:	8e 8f       	std	Y+30, r24	; 0x1e
	LCD_displayString("enter password ");
	_delay_ms(1000);
	LCD_clearScreen();
	uint8 i=0;
	uint8 key=0;
	while(i<=(password_length-1)){
    1556:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1558:	85 30       	cpi	r24, 0x05	; 5
    155a:	08 f4       	brcc	.+2      	; 0x155e <Check_password+0x228>
    155c:	71 cf       	rjmp	.-286    	; 0x1440 <Check_password+0x10a>

		i++;
	}


	return 	UART_recieveByte();
    155e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
}
    1562:	6e 96       	adiw	r28, 0x1e	; 30
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <options>:
 *
 * [Returns]:     none
 ***************************************************************************************************/


void options(){
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	c8 54       	subi	r28, 0x48	; 72
    1582:	d0 40       	sbci	r29, 0x00	; 0
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61

	uint8 ch;
	LCD_displayString("1)open door");
    158e:	83 eb       	ldi	r24, 0xB3	; 179
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
	LCD_goToRowColumn(1,0);
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_goToRowColumn>
	LCD_displayString("2)change password");
    159e:	8f eb       	ldi	r24, 0xBF	; 191
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
	uint8 key;
	key = KeyPad_getPressedKey();
    15a6:	0e 94 30 10 	call	0x2060	; 0x2060 <KeyPad_getPressedKey>
    15aa:	fe 01       	movw	r30, r28
    15ac:	e9 5b       	subi	r30, 0xB9	; 185
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	80 83       	st	Z, r24
	UART_sendByte(READY);
    15b2:	80 e1       	ldi	r24, 0x10	; 16
    15b4:	0e 94 85 1a 	call	0x350a	; 0x350a <UART_sendByte>
	UART_sendByte(key);
    15b8:	fe 01       	movw	r30, r28
    15ba:	e9 5b       	subi	r30, 0xB9	; 185
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	80 81       	ld	r24, Z
    15c0:	0e 94 85 1a 	call	0x350a	; 0x350a <UART_sendByte>

	if(key==1)
    15c4:	fe 01       	movw	r30, r28
    15c6:	e9 5b       	subi	r30, 0xB9	; 185
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	80 81       	ld	r24, Z
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <options+0x5e>
    15d0:	43 c1       	rjmp	.+646    	; 0x1858 <options+0x2e4>

	{
ch=one();
    15d2:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <one>
    15d6:	fe 01       	movw	r30, r28
    15d8:	e8 5b       	subi	r30, 0xB8	; 184
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	80 83       	st	Z, r24
if(ch==match)
    15de:	fe 01       	movw	r30, r28
    15e0:	e8 5b       	subi	r30, 0xB8	; 184
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	80 81       	ld	r24, Z
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	19 f4       	brne	.+6      	; 0x15f0 <options+0x7c>
{open();}
    15ea:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <open>
    15ee:	e7 c2       	rjmp	.+1486   	; 0x1bbe <options+0x64a>
else
{
	            LCD_clearScreen();
    15f0:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
				LCD_displayString("wrong password ");
    15f4:	81 ed       	ldi	r24, 0xD1	; 209
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
    15fc:	fe 01       	movw	r30, r28
    15fe:	ed 5b       	subi	r30, 0xBD	; 189
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	aa e7       	ldi	r26, 0x7A	; 122
    1608:	b4 e4       	ldi	r27, 0x44	; 68
    160a:	80 83       	st	Z, r24
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	a2 83       	std	Z+2, r26	; 0x02
    1610:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1612:	8e 01       	movw	r16, r28
    1614:	01 5c       	subi	r16, 0xC1	; 193
    1616:	1f 4f       	sbci	r17, 0xFF	; 255
    1618:	fe 01       	movw	r30, r28
    161a:	ed 5b       	subi	r30, 0xBD	; 189
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	60 81       	ld	r22, Z
    1620:	71 81       	ldd	r23, Z+1	; 0x01
    1622:	82 81       	ldd	r24, Z+2	; 0x02
    1624:	93 81       	ldd	r25, Z+3	; 0x03
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	4a e7       	ldi	r20, 0x7A	; 122
    162c:	53 e4       	ldi	r21, 0x43	; 67
    162e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	f8 01       	movw	r30, r16
    1638:	80 83       	st	Z, r24
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	a2 83       	std	Z+2, r26	; 0x02
    163e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1640:	fe 01       	movw	r30, r28
    1642:	ff 96       	adiw	r30, 0x3f	; 63
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e8       	ldi	r20, 0x80	; 128
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1658:	88 23       	and	r24, r24
    165a:	2c f4       	brge	.+10     	; 0x1666 <options+0xf2>
		__ticks = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9e af       	std	Y+62, r25	; 0x3e
    1662:	8d af       	std	Y+61, r24	; 0x3d
    1664:	46 c0       	rjmp	.+140    	; 0x16f2 <options+0x17e>
	else if (__tmp > 65535)
    1666:	fe 01       	movw	r30, r28
    1668:	ff 96       	adiw	r30, 0x3f	; 63
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    167e:	18 16       	cp	r1, r24
    1680:	64 f5       	brge	.+88     	; 0x16da <options+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1682:	fe 01       	movw	r30, r28
    1684:	ed 5b       	subi	r30, 0xBD	; 189
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9e af       	std	Y+62, r25	; 0x3e
    16ae:	8d af       	std	Y+61, r24	; 0x3d
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <options+0x15c>
    16b2:	89 e1       	ldi	r24, 0x19	; 25
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9c af       	std	Y+60, r25	; 0x3c
    16b8:	8b af       	std	Y+59, r24	; 0x3b
    16ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    16bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <options+0x14a>
    16c2:	9c af       	std	Y+60, r25	; 0x3c
    16c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    16c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	9e af       	std	Y+62, r25	; 0x3e
    16ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    16d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <options+0x13e>
    16d8:	16 c0       	rjmp	.+44     	; 0x1706 <options+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16da:	fe 01       	movw	r30, r28
    16dc:	ff 96       	adiw	r30, 0x3f	; 63
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	82 81       	ldd	r24, Z+2	; 0x02
    16e4:	93 81       	ldd	r25, Z+3	; 0x03
    16e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	9e af       	std	Y+62, r25	; 0x3e
    16f0:	8d af       	std	Y+61, r24	; 0x3d
    16f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    16f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    16f6:	9a af       	std	Y+58, r25	; 0x3a
    16f8:	89 af       	std	Y+57, r24	; 0x39
    16fa:	89 ad       	ldd	r24, Y+57	; 0x39
    16fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <options+0x18a>
    1702:	9a af       	std	Y+58, r25	; 0x3a
    1704:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(1000);
				LCD_clearScreen();
    1706:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>

ch=one();
    170a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <one>
    170e:	fe 01       	movw	r30, r28
    1710:	e8 5b       	subi	r30, 0xB8	; 184
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 83       	st	Z, r24
if(ch==match)
    1716:	fe 01       	movw	r30, r28
    1718:	e8 5b       	subi	r30, 0xB8	; 184
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	80 81       	ld	r24, Z
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	19 f4       	brne	.+6      	; 0x1728 <options+0x1b4>
{open();}
    1722:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <open>
    1726:	4b c2       	rjmp	.+1174   	; 0x1bbe <options+0x64a>
else
{
	LCD_clearScreen();
    1728:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
			LCD_displayString("wrong password ");
    172c:	81 ed       	ldi	r24, 0xD1	; 209
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	aa e7       	ldi	r26, 0x7A	; 122
    173a:	b4 e4       	ldi	r27, 0x44	; 68
    173c:	8d ab       	std	Y+53, r24	; 0x35
    173e:	9e ab       	std	Y+54, r25	; 0x36
    1740:	af ab       	std	Y+55, r26	; 0x37
    1742:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1744:	6d a9       	ldd	r22, Y+53	; 0x35
    1746:	7e a9       	ldd	r23, Y+54	; 0x36
    1748:	8f a9       	ldd	r24, Y+55	; 0x37
    174a:	98 ad       	ldd	r25, Y+56	; 0x38
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a e7       	ldi	r20, 0x7A	; 122
    1752:	53 e4       	ldi	r21, 0x43	; 67
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	89 ab       	std	Y+49, r24	; 0x31
    175e:	9a ab       	std	Y+50, r25	; 0x32
    1760:	ab ab       	std	Y+51, r26	; 0x33
    1762:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1764:	69 a9       	ldd	r22, Y+49	; 0x31
    1766:	7a a9       	ldd	r23, Y+50	; 0x32
    1768:	8b a9       	ldd	r24, Y+51	; 0x33
    176a:	9c a9       	ldd	r25, Y+52	; 0x34
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e8       	ldi	r20, 0x80	; 128
    1772:	5f e3       	ldi	r21, 0x3F	; 63
    1774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1778:	88 23       	and	r24, r24
    177a:	2c f4       	brge	.+10     	; 0x1786 <options+0x212>
		__ticks = 1;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	98 ab       	std	Y+48, r25	; 0x30
    1782:	8f a7       	std	Y+47, r24	; 0x2f
    1784:	3f c0       	rjmp	.+126    	; 0x1804 <options+0x290>
	else if (__tmp > 65535)
    1786:	69 a9       	ldd	r22, Y+49	; 0x31
    1788:	7a a9       	ldd	r23, Y+50	; 0x32
    178a:	8b a9       	ldd	r24, Y+51	; 0x33
    178c:	9c a9       	ldd	r25, Y+52	; 0x34
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	3f ef       	ldi	r19, 0xFF	; 255
    1792:	4f e7       	ldi	r20, 0x7F	; 127
    1794:	57 e4       	ldi	r21, 0x47	; 71
    1796:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    179a:	18 16       	cp	r1, r24
    179c:	4c f5       	brge	.+82     	; 0x17f0 <options+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179e:	6d a9       	ldd	r22, Y+53	; 0x35
    17a0:	7e a9       	ldd	r23, Y+54	; 0x36
    17a2:	8f a9       	ldd	r24, Y+55	; 0x37
    17a4:	98 ad       	ldd	r25, Y+56	; 0x38
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e2       	ldi	r20, 0x20	; 32
    17ac:	51 e4       	ldi	r21, 0x41	; 65
    17ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	98 ab       	std	Y+48, r25	; 0x30
    17c4:	8f a7       	std	Y+47, r24	; 0x2f
    17c6:	0f c0       	rjmp	.+30     	; 0x17e6 <options+0x272>
    17c8:	89 e1       	ldi	r24, 0x19	; 25
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9e a7       	std	Y+46, r25	; 0x2e
    17ce:	8d a7       	std	Y+45, r24	; 0x2d
    17d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    17d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <options+0x260>
    17d8:	9e a7       	std	Y+46, r25	; 0x2e
    17da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17de:	98 a9       	ldd	r25, Y+48	; 0x30
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	98 ab       	std	Y+48, r25	; 0x30
    17e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	69 f7       	brne	.-38     	; 0x17c8 <options+0x254>
    17ee:	14 c0       	rjmp	.+40     	; 0x1818 <options+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f0:	69 a9       	ldd	r22, Y+49	; 0x31
    17f2:	7a a9       	ldd	r23, Y+50	; 0x32
    17f4:	8b a9       	ldd	r24, Y+51	; 0x33
    17f6:	9c a9       	ldd	r25, Y+52	; 0x34
    17f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	98 ab       	std	Y+48, r25	; 0x30
    1802:	8f a7       	std	Y+47, r24	; 0x2f
    1804:	8f a5       	ldd	r24, Y+47	; 0x2f
    1806:	98 a9       	ldd	r25, Y+48	; 0x30
    1808:	9c a7       	std	Y+44, r25	; 0x2c
    180a:	8b a7       	std	Y+43, r24	; 0x2b
    180c:	8b a5       	ldd	r24, Y+43	; 0x2b
    180e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <options+0x29c>
    1814:	9c a7       	std	Y+44, r25	; 0x2c
    1816:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			LCD_clearScreen();
    1818:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
ch=one();
    181c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <one>
    1820:	fe 01       	movw	r30, r28
    1822:	e8 5b       	subi	r30, 0xB8	; 184
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	80 83       	st	Z, r24

if(ch==match)
    1828:	fe 01       	movw	r30, r28
    182a:	e8 5b       	subi	r30, 0xB8	; 184
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 81       	ld	r24, Z
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	19 f4       	brne	.+6      	; 0x183a <options+0x2c6>
{open();}
    1834:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <open>
    1838:	c2 c1       	rjmp	.+900    	; 0x1bbe <options+0x64a>
else
{LCD_clearScreen();
    183a:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
LCD_displayString("    worning");
    183e:	81 ee       	ldi	r24, 0xE1	; 225
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
while(UART_recieveByte()!=Safe);
    1846:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    184a:	84 36       	cpi	r24, 0x64	; 100
    184c:	e1 f7       	brne	.-8      	; 0x1846 <options+0x2d2>
LCD_clearScreen();
    184e:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
options();}
    1852:	0e 94 ba 0a 	call	0x1574	; 0x1574 <options>
    1856:	b3 c1       	rjmp	.+870    	; 0x1bbe <options+0x64a>

}
}
}

	else if(key==2)
    1858:	fe 01       	movw	r30, r28
    185a:	e9 5b       	subi	r30, 0xB9	; 185
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	82 30       	cpi	r24, 0x02	; 2
    1862:	09 f0       	breq	.+2      	; 0x1866 <options+0x2f2>
    1864:	30 c1       	rjmp	.+608    	; 0x1ac6 <options+0x552>
	{
		ch=one();
    1866:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <one>
    186a:	fe 01       	movw	r30, r28
    186c:	e8 5b       	subi	r30, 0xB8	; 184
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 83       	st	Z, r24
		if(ch==match)
    1872:	fe 01       	movw	r30, r28
    1874:	e8 5b       	subi	r30, 0xB8	; 184
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 81       	ld	r24, Z
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	19 f4       	brne	.+6      	; 0x1884 <options+0x310>
		{FirstTrial();}
    187e:	0e 94 a3 05 	call	0xb46	; 0xb46 <FirstTrial>
    1882:	9d c1       	rjmp	.+826    	; 0x1bbe <options+0x64a>
		else
		{
			            LCD_clearScreen();
    1884:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
						LCD_displayString("wrong password ");
    1888:	81 ed       	ldi	r24, 0xD1	; 209
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	aa e7       	ldi	r26, 0x7A	; 122
    1896:	b4 e4       	ldi	r27, 0x44	; 68
    1898:	8f a3       	std	Y+39, r24	; 0x27
    189a:	98 a7       	std	Y+40, r25	; 0x28
    189c:	a9 a7       	std	Y+41, r26	; 0x29
    189e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a0:	6f a1       	ldd	r22, Y+39	; 0x27
    18a2:	78 a5       	ldd	r23, Y+40	; 0x28
    18a4:	89 a5       	ldd	r24, Y+41	; 0x29
    18a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	4a e7       	ldi	r20, 0x7A	; 122
    18ae:	53 e4       	ldi	r21, 0x43	; 67
    18b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	8b a3       	std	Y+35, r24	; 0x23
    18ba:	9c a3       	std	Y+36, r25	; 0x24
    18bc:	ad a3       	std	Y+37, r26	; 0x25
    18be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18c0:	6b a1       	ldd	r22, Y+35	; 0x23
    18c2:	7c a1       	ldd	r23, Y+36	; 0x24
    18c4:	8d a1       	ldd	r24, Y+37	; 0x25
    18c6:	9e a1       	ldd	r25, Y+38	; 0x26
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e8       	ldi	r20, 0x80	; 128
    18ce:	5f e3       	ldi	r21, 0x3F	; 63
    18d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d4:	88 23       	and	r24, r24
    18d6:	2c f4       	brge	.+10     	; 0x18e2 <options+0x36e>
		__ticks = 1;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9a a3       	std	Y+34, r25	; 0x22
    18de:	89 a3       	std	Y+33, r24	; 0x21
    18e0:	3f c0       	rjmp	.+126    	; 0x1960 <options+0x3ec>
	else if (__tmp > 65535)
    18e2:	6b a1       	ldd	r22, Y+35	; 0x23
    18e4:	7c a1       	ldd	r23, Y+36	; 0x24
    18e6:	8d a1       	ldd	r24, Y+37	; 0x25
    18e8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	3f ef       	ldi	r19, 0xFF	; 255
    18ee:	4f e7       	ldi	r20, 0x7F	; 127
    18f0:	57 e4       	ldi	r21, 0x47	; 71
    18f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f6:	18 16       	cp	r1, r24
    18f8:	4c f5       	brge	.+82     	; 0x194c <options+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fa:	6f a1       	ldd	r22, Y+39	; 0x27
    18fc:	78 a5       	ldd	r23, Y+40	; 0x28
    18fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1900:	9a a5       	ldd	r25, Y+42	; 0x2a
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e2       	ldi	r20, 0x20	; 32
    1908:	51 e4       	ldi	r21, 0x41	; 65
    190a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	bc 01       	movw	r22, r24
    1914:	cd 01       	movw	r24, r26
    1916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9a a3       	std	Y+34, r25	; 0x22
    1920:	89 a3       	std	Y+33, r24	; 0x21
    1922:	0f c0       	rjmp	.+30     	; 0x1942 <options+0x3ce>
    1924:	89 e1       	ldi	r24, 0x19	; 25
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	98 a3       	std	Y+32, r25	; 0x20
    192a:	8f 8f       	std	Y+31, r24	; 0x1f
    192c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    192e:	98 a1       	ldd	r25, Y+32	; 0x20
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <options+0x3bc>
    1934:	98 a3       	std	Y+32, r25	; 0x20
    1936:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1938:	89 a1       	ldd	r24, Y+33	; 0x21
    193a:	9a a1       	ldd	r25, Y+34	; 0x22
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	9a a3       	std	Y+34, r25	; 0x22
    1940:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1942:	89 a1       	ldd	r24, Y+33	; 0x21
    1944:	9a a1       	ldd	r25, Y+34	; 0x22
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	69 f7       	brne	.-38     	; 0x1924 <options+0x3b0>
    194a:	14 c0       	rjmp	.+40     	; 0x1974 <options+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194c:	6b a1       	ldd	r22, Y+35	; 0x23
    194e:	7c a1       	ldd	r23, Y+36	; 0x24
    1950:	8d a1       	ldd	r24, Y+37	; 0x25
    1952:	9e a1       	ldd	r25, Y+38	; 0x26
    1954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	9a a3       	std	Y+34, r25	; 0x22
    195e:	89 a3       	std	Y+33, r24	; 0x21
    1960:	89 a1       	ldd	r24, Y+33	; 0x21
    1962:	9a a1       	ldd	r25, Y+34	; 0x22
    1964:	9e 8f       	std	Y+30, r25	; 0x1e
    1966:	8d 8f       	std	Y+29, r24	; 0x1d
    1968:	8d 8d       	ldd	r24, Y+29	; 0x1d
    196a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <options+0x3f8>
    1970:	9e 8f       	std	Y+30, r25	; 0x1e
    1972:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(1000);
						LCD_clearScreen();
    1974:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>

		ch=one();
    1978:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <one>
    197c:	fe 01       	movw	r30, r28
    197e:	e8 5b       	subi	r30, 0xB8	; 184
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	80 83       	st	Z, r24
		if(ch==match)
    1984:	fe 01       	movw	r30, r28
    1986:	e8 5b       	subi	r30, 0xB8	; 184
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	80 81       	ld	r24, Z
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	19 f4       	brne	.+6      	; 0x1996 <options+0x422>
		{FirstTrial();}
    1990:	0e 94 a3 05 	call	0xb46	; 0xb46 <FirstTrial>
    1994:	14 c1       	rjmp	.+552    	; 0x1bbe <options+0x64a>
		else
		{
			LCD_clearScreen();
    1996:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
					LCD_displayString("wrong password ");
    199a:	81 ed       	ldi	r24, 0xD1	; 209
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	aa e7       	ldi	r26, 0x7A	; 122
    19a8:	b4 e4       	ldi	r27, 0x44	; 68
    19aa:	89 8f       	std	Y+25, r24	; 0x19
    19ac:	9a 8f       	std	Y+26, r25	; 0x1a
    19ae:	ab 8f       	std	Y+27, r26	; 0x1b
    19b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b2:	69 8d       	ldd	r22, Y+25	; 0x19
    19b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a e7       	ldi	r20, 0x7A	; 122
    19c0:	53 e4       	ldi	r21, 0x43	; 67
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8d 8b       	std	Y+21, r24	; 0x15
    19cc:	9e 8b       	std	Y+22, r25	; 0x16
    19ce:	af 8b       	std	Y+23, r26	; 0x17
    19d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d2:	6d 89       	ldd	r22, Y+21	; 0x15
    19d4:	7e 89       	ldd	r23, Y+22	; 0x16
    19d6:	8f 89       	ldd	r24, Y+23	; 0x17
    19d8:	98 8d       	ldd	r25, Y+24	; 0x18
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <options+0x480>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <options+0x4fe>
	else if (__tmp > 65535)
    19f4:	6d 89       	ldd	r22, Y+21	; 0x15
    19f6:	7e 89       	ldd	r23, Y+22	; 0x16
    19f8:	8f 89       	ldd	r24, Y+23	; 0x17
    19fa:	98 8d       	ldd	r25, Y+24	; 0x18
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	4c f5       	brge	.+82     	; 0x1a5e <options+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9c 8b       	std	Y+20, r25	; 0x14
    1a32:	8b 8b       	std	Y+19, r24	; 0x13
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <options+0x4e0>
    1a36:	89 e1       	ldi	r24, 0x19	; 25
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9a 8b       	std	Y+18, r25	; 0x12
    1a3c:	89 8b       	std	Y+17, r24	; 0x11
    1a3e:	89 89       	ldd	r24, Y+17	; 0x11
    1a40:	9a 89       	ldd	r25, Y+18	; 0x12
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <options+0x4ce>
    1a46:	9a 8b       	std	Y+18, r25	; 0x12
    1a48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	9c 8b       	std	Y+20, r25	; 0x14
    1a52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	8b 89       	ldd	r24, Y+19	; 0x13
    1a56:	9c 89       	ldd	r25, Y+20	; 0x14
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <options+0x4c2>
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <options+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a60:	7e 89       	ldd	r23, Y+22	; 0x16
    1a62:	8f 89       	ldd	r24, Y+23	; 0x17
    1a64:	98 8d       	ldd	r25, Y+24	; 0x18
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	9c 8b       	std	Y+20, r25	; 0x14
    1a70:	8b 8b       	std	Y+19, r24	; 0x13
    1a72:	8b 89       	ldd	r24, Y+19	; 0x13
    1a74:	9c 89       	ldd	r25, Y+20	; 0x14
    1a76:	98 8b       	std	Y+16, r25	; 0x10
    1a78:	8f 87       	std	Y+15, r24	; 0x0f
    1a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7c:	98 89       	ldd	r25, Y+16	; 0x10
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <options+0x50a>
    1a82:	98 8b       	std	Y+16, r25	; 0x10
    1a84:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					LCD_clearScreen();
    1a86:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
		ch=one();
    1a8a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <one>
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e8 5b       	subi	r30, 0xB8	; 184
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 83       	st	Z, r24

		if(ch==match)
    1a96:	fe 01       	movw	r30, r28
    1a98:	e8 5b       	subi	r30, 0xB8	; 184
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 81       	ld	r24, Z
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	19 f4       	brne	.+6      	; 0x1aa8 <options+0x534>
		{FirstTrial();}
    1aa2:	0e 94 a3 05 	call	0xb46	; 0xb46 <FirstTrial>
    1aa6:	8b c0       	rjmp	.+278    	; 0x1bbe <options+0x64a>
		else
		{LCD_clearScreen();
    1aa8:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
		LCD_displayString("    worning");
    1aac:	81 ee       	ldi	r24, 0xE1	; 225
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
		while(UART_recieveByte()!=Safe);
    1ab4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    1ab8:	84 36       	cpi	r24, 0x64	; 100
    1aba:	e1 f7       	brne	.-8      	; 0x1ab4 <options+0x540>
		LCD_clearScreen();
    1abc:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
		options();}
    1ac0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <options>
    1ac4:	7c c0       	rjmp	.+248    	; 0x1bbe <options+0x64a>




	else{
		LCD_clearScreen();
    1ac6:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
							LCD_displayString("invaled option");
    1aca:	8d ee       	ldi	r24, 0xED	; 237
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	aa e7       	ldi	r26, 0x7A	; 122
    1ad8:	b4 e4       	ldi	r27, 0x44	; 68
    1ada:	8b 87       	std	Y+11, r24	; 0x0b
    1adc:	9c 87       	std	Y+12, r25	; 0x0c
    1ade:	ad 87       	std	Y+13, r26	; 0x0d
    1ae0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4a e7       	ldi	r20, 0x7A	; 122
    1af0:	53 e4       	ldi	r21, 0x43	; 67
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	8f 83       	std	Y+7, r24	; 0x07
    1afc:	98 87       	std	Y+8, r25	; 0x08
    1afe:	a9 87       	std	Y+9, r26	; 0x09
    1b00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e8       	ldi	r20, 0x80	; 128
    1b10:	5f e3       	ldi	r21, 0x3F	; 63
    1b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b16:	88 23       	and	r24, r24
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <options+0x5b0>
		__ticks = 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	3f c0       	rjmp	.+126    	; 0x1ba2 <options+0x62e>
	else if (__tmp > 65535)
    1b24:	6f 81       	ldd	r22, Y+7	; 0x07
    1b26:	78 85       	ldd	r23, Y+8	; 0x08
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	3f ef       	ldi	r19, 0xFF	; 255
    1b30:	4f e7       	ldi	r20, 0x7F	; 127
    1b32:	57 e4       	ldi	r21, 0x47	; 71
    1b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	4c f5       	brge	.+82     	; 0x1b8e <options+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e2       	ldi	r20, 0x20	; 32
    1b4a:	51 e4       	ldi	r21, 0x41	; 65
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	8d 83       	std	Y+5, r24	; 0x05
    1b64:	0f c0       	rjmp	.+30     	; 0x1b84 <options+0x610>
    1b66:	89 e1       	ldi	r24, 0x19	; 25
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9c 83       	std	Y+4, r25	; 0x04
    1b6c:	8b 83       	std	Y+3, r24	; 0x03
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <options+0x5fe>
    1b76:	9c 83       	std	Y+4, r25	; 0x04
    1b78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	9e 81       	ldd	r25, Y+6	; 0x06
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	69 f7       	brne	.-38     	; 0x1b66 <options+0x5f2>
    1b8c:	14 c0       	rjmp	.+40     	; 0x1bb6 <options+0x642>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b90:	78 85       	ldd	r23, Y+8	; 0x08
    1b92:	89 85       	ldd	r24, Y+9	; 0x09
    1b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <options+0x63a>
    1bb2:	9a 83       	std	Y+2, r25	; 0x02
    1bb4:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(1000);
							LCD_clearScreen();
    1bb6:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>



		options();}
    1bba:	0e 94 ba 0a 	call	0x1574	; 0x1574 <options>


	}
    1bbe:	c8 5b       	subi	r28, 0xB8	; 184
    1bc0:	df 4f       	sbci	r29, 0xFF	; 255
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	08 95       	ret

00001bd6 <open>:
 * [Returns]:     none
 ***************************************************************************************************/


void open()
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	6c 97       	sbiw	r28, 0x1c	; 28
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	aa ef       	ldi	r26, 0xFA	; 250
    1bf0:	b3 e4       	ldi	r27, 0x43	; 67
    1bf2:	89 8f       	std	Y+25, r24	; 0x19
    1bf4:	9a 8f       	std	Y+26, r25	; 0x1a
    1bf6:	ab 8f       	std	Y+27, r26	; 0x1b
    1bf8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfa:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4a e7       	ldi	r20, 0x7A	; 122
    1c08:	53 e4       	ldi	r21, 0x43	; 67
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8d 8b       	std	Y+21, r24	; 0x15
    1c14:	9e 8b       	std	Y+22, r25	; 0x16
    1c16:	af 8b       	std	Y+23, r26	; 0x17
    1c18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c20:	98 8d       	ldd	r25, Y+24	; 0x18
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2e:	88 23       	and	r24, r24
    1c30:	2c f4       	brge	.+10     	; 0x1c3c <open+0x66>
		__ticks = 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9c 8b       	std	Y+20, r25	; 0x14
    1c38:	8b 8b       	std	Y+19, r24	; 0x13
    1c3a:	3f c0       	rjmp	.+126    	; 0x1cba <open+0xe4>
	else if (__tmp > 65535)
    1c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c40:	8f 89       	ldd	r24, Y+23	; 0x17
    1c42:	98 8d       	ldd	r25, Y+24	; 0x18
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	3f ef       	ldi	r19, 0xFF	; 255
    1c48:	4f e7       	ldi	r20, 0x7F	; 127
    1c4a:	57 e4       	ldi	r21, 0x47	; 71
    1c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	4c f5       	brge	.+82     	; 0x1ca6 <open+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c54:	69 8d       	ldd	r22, Y+25	; 0x19
    1c56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e2       	ldi	r20, 0x20	; 32
    1c62:	51 e4       	ldi	r21, 0x41	; 65
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9c 8b       	std	Y+20, r25	; 0x14
    1c7a:	8b 8b       	std	Y+19, r24	; 0x13
    1c7c:	0f c0       	rjmp	.+30     	; 0x1c9c <open+0xc6>
    1c7e:	89 e1       	ldi	r24, 0x19	; 25
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	9a 8b       	std	Y+18, r25	; 0x12
    1c84:	89 8b       	std	Y+17, r24	; 0x11
    1c86:	89 89       	ldd	r24, Y+17	; 0x11
    1c88:	9a 89       	ldd	r25, Y+18	; 0x12
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <open+0xb4>
    1c8e:	9a 8b       	std	Y+18, r25	; 0x12
    1c90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c92:	8b 89       	ldd	r24, Y+19	; 0x13
    1c94:	9c 89       	ldd	r25, Y+20	; 0x14
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	9c 8b       	std	Y+20, r25	; 0x14
    1c9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	69 f7       	brne	.-38     	; 0x1c7e <open+0xa8>
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <open+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca8:	7e 89       	ldd	r23, Y+22	; 0x16
    1caa:	8f 89       	ldd	r24, Y+23	; 0x17
    1cac:	98 8d       	ldd	r25, Y+24	; 0x18
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9c 8b       	std	Y+20, r25	; 0x14
    1cb8:	8b 8b       	std	Y+19, r24	; 0x13
    1cba:	8b 89       	ldd	r24, Y+19	; 0x13
    1cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbe:	98 8b       	std	Y+16, r25	; 0x10
    1cc0:	8f 87       	std	Y+15, r24	; 0x0f
    1cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc4:	98 89       	ldd	r25, Y+16	; 0x10
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <open+0xf0>
    1cca:	98 8b       	std	Y+16, r25	; 0x10
    1ccc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_clearScreen();
    1cce:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
	LCD_displayString("  opening door");
    1cd2:	8c ef       	ldi	r24, 0xFC	; 252
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
	UART_sendByte(READY);
    1cda:	80 e1       	ldi	r24, 0x10	; 16
    1cdc:	0e 94 85 1a 	call	0x350a	; 0x350a <UART_sendByte>
	while(UART_recieveByte()!=READY);
    1ce0:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    1ce4:	80 31       	cpi	r24, 0x10	; 16
    1ce6:	e1 f7       	brne	.-8      	; 0x1ce0 <open+0x10a>
	LCD_clearScreen();
    1ce8:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
	LCD_displayString("     pass");
    1cec:	8b e0       	ldi	r24, 0x0B	; 11
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
	while(UART_recieveByte()!=READY);
    1cf4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    1cf8:	80 31       	cpi	r24, 0x10	; 16
    1cfa:	e1 f7       	brne	.-8      	; 0x1cf4 <open+0x11e>
	LCD_clearScreen();
    1cfc:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
	LCD_displayString("  closing door");
    1d00:	85 e1       	ldi	r24, 0x15	; 21
    1d02:	91 e0       	ldi	r25, 0x01	; 1
    1d04:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
	while(UART_recieveByte()!=go_options);
    1d08:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    1d0c:	83 36       	cpi	r24, 0x63	; 99
    1d0e:	e1 f7       	brne	.-8      	; 0x1d08 <open+0x132>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	aa e7       	ldi	r26, 0x7A	; 122
    1d16:	b4 e4       	ldi	r27, 0x44	; 68
    1d18:	8b 87       	std	Y+11, r24	; 0x0b
    1d1a:	9c 87       	std	Y+12, r25	; 0x0c
    1d1c:	ad 87       	std	Y+13, r26	; 0x0d
    1d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a e7       	ldi	r20, 0x7A	; 122
    1d2e:	53 e4       	ldi	r21, 0x43	; 67
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	8f 83       	std	Y+7, r24	; 0x07
    1d3a:	98 87       	std	Y+8, r25	; 0x08
    1d3c:	a9 87       	std	Y+9, r26	; 0x09
    1d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d40:	6f 81       	ldd	r22, Y+7	; 0x07
    1d42:	78 85       	ldd	r23, Y+8	; 0x08
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e8       	ldi	r20, 0x80	; 128
    1d4e:	5f e3       	ldi	r21, 0x3F	; 63
    1d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d54:	88 23       	and	r24, r24
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <open+0x18c>
		__ticks = 1;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9e 83       	std	Y+6, r25	; 0x06
    1d5e:	8d 83       	std	Y+5, r24	; 0x05
    1d60:	3f c0       	rjmp	.+126    	; 0x1de0 <open+0x20a>
	else if (__tmp > 65535)
    1d62:	6f 81       	ldd	r22, Y+7	; 0x07
    1d64:	78 85       	ldd	r23, Y+8	; 0x08
    1d66:	89 85       	ldd	r24, Y+9	; 0x09
    1d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	4c f5       	brge	.+82     	; 0x1dcc <open+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e2       	ldi	r20, 0x20	; 32
    1d88:	51 e4       	ldi	r21, 0x41	; 65
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9e 83       	std	Y+6, r25	; 0x06
    1da0:	8d 83       	std	Y+5, r24	; 0x05
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <open+0x1ec>
    1da4:	89 e1       	ldi	r24, 0x19	; 25
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9c 83       	std	Y+4, r25	; 0x04
    1daa:	8b 83       	std	Y+3, r24	; 0x03
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <open+0x1da>
    1db4:	9c 83       	std	Y+4, r25	; 0x04
    1db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	69 f7       	brne	.-38     	; 0x1da4 <open+0x1ce>
    1dca:	14 c0       	rjmp	.+40     	; 0x1df4 <open+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dce:	78 85       	ldd	r23, Y+8	; 0x08
    1dd0:	89 85       	ldd	r24, Y+9	; 0x09
    1dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	8d 81       	ldd	r24, Y+5	; 0x05
    1de2:	9e 81       	ldd	r25, Y+6	; 0x06
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	9a 81       	ldd	r25, Y+2	; 0x02
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <open+0x216>
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
    1df4:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
	options();
    1df8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <options>
}
    1dfc:	6c 96       	adiw	r28, 0x1c	; 28
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <one>:
 * [Returns]:     result of comparing entered password with the stored one
 ***************************************************************************************************/


uint8 one()
{       uint8 ch;
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	6f 97       	sbiw	r28, 0x1f	; 31
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
		LCD_clearScreen();
    1e22:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
		LCD_displayString("enter password ");
    1e26:	83 ea       	ldi	r24, 0xA3	; 163
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	aa e7       	ldi	r26, 0x7A	; 122
    1e34:	b4 e4       	ldi	r27, 0x44	; 68
    1e36:	89 8f       	std	Y+25, r24	; 0x19
    1e38:	9a 8f       	std	Y+26, r25	; 0x1a
    1e3a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a e7       	ldi	r20, 0x7A	; 122
    1e4c:	53 e4       	ldi	r21, 0x43	; 67
    1e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	8d 8b       	std	Y+21, r24	; 0x15
    1e58:	9e 8b       	std	Y+22, r25	; 0x16
    1e5a:	af 8b       	std	Y+23, r26	; 0x17
    1e5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e60:	7e 89       	ldd	r23, Y+22	; 0x16
    1e62:	8f 89       	ldd	r24, Y+23	; 0x17
    1e64:	98 8d       	ldd	r25, Y+24	; 0x18
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	2c f4       	brge	.+10     	; 0x1e80 <one+0x72>
		__ticks = 1;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	9c 8b       	std	Y+20, r25	; 0x14
    1e7c:	8b 8b       	std	Y+19, r24	; 0x13
    1e7e:	3f c0       	rjmp	.+126    	; 0x1efe <one+0xf0>
	else if (__tmp > 65535)
    1e80:	6d 89       	ldd	r22, Y+21	; 0x15
    1e82:	7e 89       	ldd	r23, Y+22	; 0x16
    1e84:	8f 89       	ldd	r24, Y+23	; 0x17
    1e86:	98 8d       	ldd	r25, Y+24	; 0x18
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	4c f5       	brge	.+82     	; 0x1eea <one+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e98:	69 8d       	ldd	r22, Y+25	; 0x19
    1e9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e2       	ldi	r20, 0x20	; 32
    1ea6:	51 e4       	ldi	r21, 0x41	; 65
    1ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9c 8b       	std	Y+20, r25	; 0x14
    1ebe:	8b 8b       	std	Y+19, r24	; 0x13
    1ec0:	0f c0       	rjmp	.+30     	; 0x1ee0 <one+0xd2>
    1ec2:	89 e1       	ldi	r24, 0x19	; 25
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9a 8b       	std	Y+18, r25	; 0x12
    1ec8:	89 8b       	std	Y+17, r24	; 0x11
    1eca:	89 89       	ldd	r24, Y+17	; 0x11
    1ecc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <one+0xc0>
    1ed2:	9a 8b       	std	Y+18, r25	; 0x12
    1ed4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	9c 8b       	std	Y+20, r25	; 0x14
    1ede:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	69 f7       	brne	.-38     	; 0x1ec2 <one+0xb4>
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <one+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eea:	6d 89       	ldd	r22, Y+21	; 0x15
    1eec:	7e 89       	ldd	r23, Y+22	; 0x16
    1eee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9c 8b       	std	Y+20, r25	; 0x14
    1efc:	8b 8b       	std	Y+19, r24	; 0x13
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	98 8b       	std	Y+16, r25	; 0x10
    1f04:	8f 87       	std	Y+15, r24	; 0x0f
    1f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f08:	98 89       	ldd	r25, Y+16	; 0x10
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <one+0xfc>
    1f0e:	98 8b       	std	Y+16, r25	; 0x10
    1f10:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_clearScreen();
    1f12:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>
		uint8 i=0;
    1f16:	1e 8e       	std	Y+30, r1	; 0x1e
		uint8 key=0;
    1f18:	1d 8e       	std	Y+29, r1	; 0x1d
    1f1a:	8b c0       	rjmp	.+278    	; 0x2032 <one+0x224>
		while(i<=(password_length-1)){
			key = KeyPad_getPressedKey();
    1f1c:	0e 94 30 10 	call	0x2060	; 0x2060 <KeyPad_getPressedKey>
    1f20:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_intgerToString(key);
    1f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_intgerToString>
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	a6 e9       	ldi	r26, 0x96	; 150
    1f32:	b3 e4       	ldi	r27, 0x43	; 67
    1f34:	8b 87       	std	Y+11, r24	; 0x0b
    1f36:	9c 87       	std	Y+12, r25	; 0x0c
    1f38:	ad 87       	std	Y+13, r26	; 0x0d
    1f3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	4a e7       	ldi	r20, 0x7A	; 122
    1f4a:	53 e4       	ldi	r21, 0x43	; 67
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	8f 83       	std	Y+7, r24	; 0x07
    1f56:	98 87       	std	Y+8, r25	; 0x08
    1f58:	a9 87       	std	Y+9, r26	; 0x09
    1f5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5e:	78 85       	ldd	r23, Y+8	; 0x08
    1f60:	89 85       	ldd	r24, Y+9	; 0x09
    1f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e8       	ldi	r20, 0x80	; 128
    1f6a:	5f e3       	ldi	r21, 0x3F	; 63
    1f6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f70:	88 23       	and	r24, r24
    1f72:	2c f4       	brge	.+10     	; 0x1f7e <one+0x170>
		__ticks = 1;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
    1f7c:	3f c0       	rjmp	.+126    	; 0x1ffc <one+0x1ee>
	else if (__tmp > 65535)
    1f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f80:	78 85       	ldd	r23, Y+8	; 0x08
    1f82:	89 85       	ldd	r24, Y+9	; 0x09
    1f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	3f ef       	ldi	r19, 0xFF	; 255
    1f8a:	4f e7       	ldi	r20, 0x7F	; 127
    1f8c:	57 e4       	ldi	r21, 0x47	; 71
    1f8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f92:	18 16       	cp	r1, r24
    1f94:	4c f5       	brge	.+82     	; 0x1fe8 <one+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e2       	ldi	r20, 0x20	; 32
    1fa4:	51 e4       	ldi	r21, 0x41	; 65
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	bc 01       	movw	r22, r24
    1fb0:	cd 01       	movw	r24, r26
    1fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	9e 83       	std	Y+6, r25	; 0x06
    1fbc:	8d 83       	std	Y+5, r24	; 0x05
    1fbe:	0f c0       	rjmp	.+30     	; 0x1fde <one+0x1d0>
    1fc0:	89 e1       	ldi	r24, 0x19	; 25
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9c 83       	std	Y+4, r25	; 0x04
    1fc6:	8b 83       	std	Y+3, r24	; 0x03
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <one+0x1be>
    1fd0:	9c 83       	std	Y+4, r25	; 0x04
    1fd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fde:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	69 f7       	brne	.-38     	; 0x1fc0 <one+0x1b2>
    1fe6:	14 c0       	rjmp	.+40     	; 0x2010 <one+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fea:	78 85       	ldd	r23, Y+8	; 0x08
    1fec:	89 85       	ldd	r24, Y+9	; 0x09
    1fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    2000:	9a 83       	std	Y+2, r25	; 0x02
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	9a 81       	ldd	r25, Y+2	; 0x02
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <one+0x1fa>
    200c:	9a 83       	std	Y+2, r25	; 0x02
    200e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			LCD_goToRowColumn(0,i);
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2014:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_goToRowColumn>
			LCD_displayCharacter('*');
    2018:	8a e2       	ldi	r24, 0x2A	; 42
    201a:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <LCD_displayCharacter>
			while(UART_recieveByte()!=READY);
    201e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    2022:	80 31       	cpi	r24, 0x10	; 16
    2024:	e1 f7       	brne	.-8      	; 0x201e <one+0x210>
					UART_sendByte(key);
    2026:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2028:	0e 94 85 1a 	call	0x350a	; 0x350a <UART_sendByte>

			i++;
    202c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    202e:	8f 5f       	subi	r24, 0xFF	; 255
    2030:	8e 8f       	std	Y+30, r24	; 0x1e
		LCD_displayString("enter password ");
		_delay_ms(1000);
		LCD_clearScreen();
		uint8 i=0;
		uint8 key=0;
		while(i<=(password_length-1)){
    2032:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2034:	85 30       	cpi	r24, 0x05	; 5
    2036:	08 f4       	brcc	.+2      	; 0x203a <one+0x22c>
    2038:	71 cf       	rjmp	.-286    	; 0x1f1c <one+0x10e>
			while(UART_recieveByte()!=READY);
					UART_sendByte(key);

			i++;
		}
		while(UART_recieveByte()!=READY);
    203a:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    203e:	80 31       	cpi	r24, 0x10	; 16
    2040:	e1 f7       	brne	.-8      	; 0x203a <one+0x22c>
		ch=UART_recieveByte();
    2042:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    2046:	8f 8f       	std	Y+31, r24	; 0x1f
		LCD_clearScreen();
    2048:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>

return ch;
    204c:	8f 8d       	ldd	r24, Y+31	; 0x1f
	}
    204e:	6f 96       	adiw	r28, 0x1f	; 31
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <KeyPad_getPressedKey+0x6>
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    206a:	1a 82       	std	Y+2, r1	; 0x02
    206c:	4d c0       	rjmp	.+154    	; 0x2108 <KeyPad_getPressedKey+0xa8>
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
    206e:	ea e3       	ldi	r30, 0x3A	; 58
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	80 e1       	ldi	r24, 0x10	; 16
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <KeyPad_getPressedKey+0x22>
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	2a 95       	dec	r18
    2084:	e2 f7       	brpl	.-8      	; 0x207e <KeyPad_getPressedKey+0x1e>
    2086:	80 83       	st	Z, r24

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    2088:	eb e3       	ldi	r30, 0x3B	; 59
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	80 e1       	ldi	r24, 0x10	; 16
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	02 2e       	mov	r0, r18
    2098:	02 c0       	rjmp	.+4      	; 0x209e <KeyPad_getPressedKey+0x3e>
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	0a 94       	dec	r0
    20a0:	e2 f7       	brpl	.-8      	; 0x209a <KeyPad_getPressedKey+0x3a>
    20a2:	80 95       	com	r24
    20a4:	80 83       	st	Z, r24
           // DIO_SetPortValue(KEYPAD_PORT_OUT, ~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    20a6:	19 82       	std	Y+1, r1	; 0x01
    20a8:	29 c0       	rjmp	.+82     	; 0x20fc <KeyPad_getPressedKey+0x9c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
    20aa:	e9 e3       	ldi	r30, 0x39	; 57
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	a9 01       	movw	r20, r18
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <KeyPad_getPressedKey+0x62>
    20be:	55 95       	asr	r21
    20c0:	47 95       	ror	r20
    20c2:	8a 95       	dec	r24
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <KeyPad_getPressedKey+0x5e>
    20c6:	ca 01       	movw	r24, r20
    20c8:	81 70       	andi	r24, 0x01	; 1
    20ca:	90 70       	andi	r25, 0x00	; 0
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	99 f4       	brne	.+38     	; 0x20f6 <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	c9 01       	movw	r24, r18
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	82 0f       	add	r24, r18
    20de:	93 1f       	adc	r25, r19
    20e0:	98 2f       	mov	r25, r24
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	89 0f       	add	r24, r25
    20e6:	8f 5f       	subi	r24, 0xFF	; 255
    20e8:	0e 94 89 10 	call	0x2112	; 0x2112 <KeyPad_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
           // DIO_SetPortValue(KEYPAD_PORT_OUT, ~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	8f 5f       	subi	r24, 0xFF	; 255
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	84 30       	cpi	r24, 0x04	; 4
    2100:	a0 f2       	brcs	.-88     	; 0x20aa <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	8f 5f       	subi	r24, 0xFF	; 255
    2106:	8a 83       	std	Y+2, r24	; 0x02
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	83 30       	cpi	r24, 0x03	; 3
    210c:	08 f4       	brcc	.+2      	; 0x2110 <KeyPad_getPressedKey+0xb0>
    210e:	af cf       	rjmp	.-162    	; 0x206e <KeyPad_getPressedKey+0xe>
    2110:	ac cf       	rjmp	.-168    	; 0x206a <KeyPad_getPressedKey+0xa>

00002112 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3)

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <KeyPad_4x3_adjustKeyNumber+0x6>
    2118:	00 d0       	rcall	.+0      	; 0x211a <KeyPad_4x3_adjustKeyNumber+0x8>
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	3c 83       	std	Y+4, r19	; 0x04
    2128:	2b 83       	std	Y+3, r18	; 0x03
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	8a 30       	cpi	r24, 0x0A	; 10
    2130:	91 05       	cpc	r25, r1
    2132:	81 f0       	breq	.+32     	; 0x2154 <KeyPad_4x3_adjustKeyNumber+0x42>
    2134:	2b 81       	ldd	r18, Y+3	; 0x03
    2136:	3c 81       	ldd	r19, Y+4	; 0x04
    2138:	2a 30       	cpi	r18, 0x0A	; 10
    213a:	31 05       	cpc	r19, r1
    213c:	9c f0       	brlt	.+38     	; 0x2164 <KeyPad_4x3_adjustKeyNumber+0x52>
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	8b 30       	cpi	r24, 0x0B	; 11
    2144:	91 05       	cpc	r25, r1
    2146:	49 f0       	breq	.+18     	; 0x215a <KeyPad_4x3_adjustKeyNumber+0x48>
    2148:	2b 81       	ldd	r18, Y+3	; 0x03
    214a:	3c 81       	ldd	r19, Y+4	; 0x04
    214c:	2c 30       	cpi	r18, 0x0C	; 12
    214e:	31 05       	cpc	r19, r1
    2150:	31 f0       	breq	.+12     	; 0x215e <KeyPad_4x3_adjustKeyNumber+0x4c>
    2152:	08 c0       	rjmp	.+16     	; 0x2164 <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of *
    2154:	3a e2       	ldi	r19, 0x2A	; 42
    2156:	3a 83       	std	Y+2, r19	; 0x02
    2158:	07 c0       	rjmp	.+14     	; 0x2168 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
    215a:	1a 82       	std	Y+2, r1	; 0x02
    215c:	05 c0       	rjmp	.+10     	; 0x2168 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 12: return '#'; // ASCII Code of #
    215e:	83 e2       	ldi	r24, 0x23	; 35
    2160:	8a 83       	std	Y+2, r24	; 0x02
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;
    2164:	99 81       	ldd	r25, Y+1	; 0x01
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    2180:	a4 e3       	ldi	r26, 0x34	; 52
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e4 e3       	ldi	r30, 0x34	; 52
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	87 60       	ori	r24, 0x07	; 7
    218c:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    218e:	a4 e3       	ldi	r26, 0x34	; 52
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e4 e3       	ldi	r30, 0x34	; 52
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	80 6f       	ori	r24, 0xF0	; 240
    219a:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    21a2:	88 e2       	ldi	r24, 0x28	; 40
    21a4:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    21a8:	8c e0       	ldi	r24, 0x0C	; 12
    21aa:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_sendCommand>
}
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    21ba:	0f 93       	push	r16
    21bc:	1f 93       	push	r17
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	c3 56       	subi	r28, 0x63	; 99
    21c8:	d0 40       	sbci	r29, 0x00	; 0
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	fe 01       	movw	r30, r28
    21d6:	ed 59       	subi	r30, 0x9D	; 157
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    21dc:	a5 e3       	ldi	r26, 0x35	; 53
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e5 e3       	ldi	r30, 0x35	; 53
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	8e 7f       	andi	r24, 0xFE	; 254
    21e8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    21ea:	a5 e3       	ldi	r26, 0x35	; 53
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e5 e3       	ldi	r30, 0x35	; 53
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	8d 7f       	andi	r24, 0xFD	; 253
    21f6:	8c 93       	st	X, r24
    21f8:	fe 01       	movw	r30, r28
    21fa:	e1 5a       	subi	r30, 0xA1	; 161
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 e8       	ldi	r26, 0x80	; 128
    2204:	bf e3       	ldi	r27, 0x3F	; 63
    2206:	80 83       	st	Z, r24
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	a2 83       	std	Z+2, r26	; 0x02
    220c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	8e 01       	movw	r16, r28
    2210:	05 5a       	subi	r16, 0xA5	; 165
    2212:	1f 4f       	sbci	r17, 0xFF	; 255
    2214:	fe 01       	movw	r30, r28
    2216:	e1 5a       	subi	r30, 0xA1	; 161
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	4a e7       	ldi	r20, 0x7A	; 122
    2228:	53 e4       	ldi	r21, 0x43	; 67
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	f8 01       	movw	r30, r16
    2234:	80 83       	st	Z, r24
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	a2 83       	std	Z+2, r26	; 0x02
    223a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    223c:	fe 01       	movw	r30, r28
    223e:	e5 5a       	subi	r30, 0xA5	; 165
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	60 81       	ld	r22, Z
    2244:	71 81       	ldd	r23, Z+1	; 0x01
    2246:	82 81       	ldd	r24, Z+2	; 0x02
    2248:	93 81       	ldd	r25, Z+3	; 0x03
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	44 f4       	brge	.+16     	; 0x226a <LCD_sendCommand+0xb0>
		__ticks = 1;
    225a:	fe 01       	movw	r30, r28
    225c:	e7 5a       	subi	r30, 0xA7	; 167
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	64 c0       	rjmp	.+200    	; 0x2332 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    226a:	fe 01       	movw	r30, r28
    226c:	e5 5a       	subi	r30, 0xA5	; 165
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	3f ef       	ldi	r19, 0xFF	; 255
    227c:	4f e7       	ldi	r20, 0x7F	; 127
    227e:	57 e4       	ldi	r21, 0x47	; 71
    2280:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2284:	18 16       	cp	r1, r24
    2286:	0c f0       	brlt	.+2      	; 0x228a <LCD_sendCommand+0xd0>
    2288:	43 c0       	rjmp	.+134    	; 0x2310 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	fe 01       	movw	r30, r28
    228c:	e1 5a       	subi	r30, 0xA1	; 161
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8e 01       	movw	r16, r28
    22aa:	07 5a       	subi	r16, 0xA7	; 167
    22ac:	1f 4f       	sbci	r17, 0xFF	; 255
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	f8 01       	movw	r30, r16
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
    22c0:	1f c0       	rjmp	.+62     	; 0x2300 <LCD_sendCommand+0x146>
    22c2:	fe 01       	movw	r30, r28
    22c4:	e9 5a       	subi	r30, 0xA9	; 169
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	89 e1       	ldi	r24, 0x19	; 25
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	80 83       	st	Z, r24
    22d0:	fe 01       	movw	r30, r28
    22d2:	e9 5a       	subi	r30, 0xA9	; 169
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_sendCommand+0x120>
    22de:	fe 01       	movw	r30, r28
    22e0:	e9 5a       	subi	r30, 0xA9	; 169
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e8:	de 01       	movw	r26, r28
    22ea:	a7 5a       	subi	r26, 0xA7	; 167
    22ec:	bf 4f       	sbci	r27, 0xFF	; 255
    22ee:	fe 01       	movw	r30, r28
    22f0:	e7 5a       	subi	r30, 0xA7	; 167
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	11 96       	adiw	r26, 0x01	; 1
    22fc:	9c 93       	st	X, r25
    22fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2300:	fe 01       	movw	r30, r28
    2302:	e7 5a       	subi	r30, 0xA7	; 167
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	d1 f6       	brne	.-76     	; 0x22c2 <LCD_sendCommand+0x108>
    230e:	27 c0       	rjmp	.+78     	; 0x235e <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2310:	8e 01       	movw	r16, r28
    2312:	07 5a       	subi	r16, 0xA7	; 167
    2314:	1f 4f       	sbci	r17, 0xFF	; 255
    2316:	fe 01       	movw	r30, r28
    2318:	e5 5a       	subi	r30, 0xA5	; 165
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	60 81       	ld	r22, Z
    231e:	71 81       	ldd	r23, Z+1	; 0x01
    2320:	82 81       	ldd	r24, Z+2	; 0x02
    2322:	93 81       	ldd	r25, Z+3	; 0x03
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	f8 01       	movw	r30, r16
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
    2332:	de 01       	movw	r26, r28
    2334:	ab 5a       	subi	r26, 0xAB	; 171
    2336:	bf 4f       	sbci	r27, 0xFF	; 255
    2338:	fe 01       	movw	r30, r28
    233a:	e7 5a       	subi	r30, 0xA7	; 167
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	8d 93       	st	X+, r24
    2344:	9c 93       	st	X, r25
    2346:	fe 01       	movw	r30, r28
    2348:	eb 5a       	subi	r30, 0xAB	; 171
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_sendCommand+0x196>
    2354:	fe 01       	movw	r30, r28
    2356:	eb 5a       	subi	r30, 0xAB	; 171
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    235e:	a5 e3       	ldi	r26, 0x35	; 53
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e5 e3       	ldi	r30, 0x35	; 53
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	84 60       	ori	r24, 0x04	; 4
    236a:	8c 93       	st	X, r24
    236c:	fe 01       	movw	r30, r28
    236e:	ef 5a       	subi	r30, 0xAF	; 175
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	a0 e8       	ldi	r26, 0x80	; 128
    2378:	bf e3       	ldi	r27, 0x3F	; 63
    237a:	80 83       	st	Z, r24
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	a2 83       	std	Z+2, r26	; 0x02
    2380:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2382:	8e 01       	movw	r16, r28
    2384:	03 5b       	subi	r16, 0xB3	; 179
    2386:	1f 4f       	sbci	r17, 0xFF	; 255
    2388:	fe 01       	movw	r30, r28
    238a:	ef 5a       	subi	r30, 0xAF	; 175
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4a e7       	ldi	r20, 0x7A	; 122
    239c:	53 e4       	ldi	r21, 0x43	; 67
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	f8 01       	movw	r30, r16
    23a8:	80 83       	st	Z, r24
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	a2 83       	std	Z+2, r26	; 0x02
    23ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23b0:	fe 01       	movw	r30, r28
    23b2:	e3 5b       	subi	r30, 0xB3	; 179
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	60 81       	ld	r22, Z
    23b8:	71 81       	ldd	r23, Z+1	; 0x01
    23ba:	82 81       	ldd	r24, Z+2	; 0x02
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e8       	ldi	r20, 0x80	; 128
    23c4:	5f e3       	ldi	r21, 0x3F	; 63
    23c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ca:	88 23       	and	r24, r24
    23cc:	44 f4       	brge	.+16     	; 0x23de <LCD_sendCommand+0x224>
		__ticks = 1;
    23ce:	fe 01       	movw	r30, r28
    23d0:	e5 5b       	subi	r30, 0xB5	; 181
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	80 83       	st	Z, r24
    23dc:	64 c0       	rjmp	.+200    	; 0x24a6 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    23de:	fe 01       	movw	r30, r28
    23e0:	e3 5b       	subi	r30, 0xB3	; 179
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	60 81       	ld	r22, Z
    23e6:	71 81       	ldd	r23, Z+1	; 0x01
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	93 81       	ldd	r25, Z+3	; 0x03
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	3f ef       	ldi	r19, 0xFF	; 255
    23f0:	4f e7       	ldi	r20, 0x7F	; 127
    23f2:	57 e4       	ldi	r21, 0x47	; 71
    23f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f8:	18 16       	cp	r1, r24
    23fa:	0c f0       	brlt	.+2      	; 0x23fe <LCD_sendCommand+0x244>
    23fc:	43 c0       	rjmp	.+134    	; 0x2484 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fe:	fe 01       	movw	r30, r28
    2400:	ef 5a       	subi	r30, 0xAF	; 175
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	60 81       	ld	r22, Z
    2406:	71 81       	ldd	r23, Z+1	; 0x01
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	8e 01       	movw	r16, r28
    241e:	05 5b       	subi	r16, 0xB5	; 181
    2420:	1f 4f       	sbci	r17, 0xFF	; 255
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	f8 01       	movw	r30, r16
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	80 83       	st	Z, r24
    2434:	1f c0       	rjmp	.+62     	; 0x2474 <LCD_sendCommand+0x2ba>
    2436:	fe 01       	movw	r30, r28
    2438:	e7 5b       	subi	r30, 0xB7	; 183
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	89 e1       	ldi	r24, 0x19	; 25
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	80 83       	st	Z, r24
    2444:	fe 01       	movw	r30, r28
    2446:	e7 5b       	subi	r30, 0xB7	; 183
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <LCD_sendCommand+0x294>
    2452:	fe 01       	movw	r30, r28
    2454:	e7 5b       	subi	r30, 0xB7	; 183
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245c:	de 01       	movw	r26, r28
    245e:	a5 5b       	subi	r26, 0xB5	; 181
    2460:	bf 4f       	sbci	r27, 0xFF	; 255
    2462:	fe 01       	movw	r30, r28
    2464:	e5 5b       	subi	r30, 0xB5	; 181
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	91 81       	ldd	r25, Z+1	; 0x01
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	11 96       	adiw	r26, 0x01	; 1
    2470:	9c 93       	st	X, r25
    2472:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2474:	fe 01       	movw	r30, r28
    2476:	e5 5b       	subi	r30, 0xB5	; 181
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 81       	ld	r24, Z
    247c:	91 81       	ldd	r25, Z+1	; 0x01
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	d1 f6       	brne	.-76     	; 0x2436 <LCD_sendCommand+0x27c>
    2482:	27 c0       	rjmp	.+78     	; 0x24d2 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2484:	8e 01       	movw	r16, r28
    2486:	05 5b       	subi	r16, 0xB5	; 181
    2488:	1f 4f       	sbci	r17, 0xFF	; 255
    248a:	fe 01       	movw	r30, r28
    248c:	e3 5b       	subi	r30, 0xB3	; 179
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	60 81       	ld	r22, Z
    2492:	71 81       	ldd	r23, Z+1	; 0x01
    2494:	82 81       	ldd	r24, Z+2	; 0x02
    2496:	93 81       	ldd	r25, Z+3	; 0x03
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	f8 01       	movw	r30, r16
    24a2:	91 83       	std	Z+1, r25	; 0x01
    24a4:	80 83       	st	Z, r24
    24a6:	de 01       	movw	r26, r28
    24a8:	a9 5b       	subi	r26, 0xB9	; 185
    24aa:	bf 4f       	sbci	r27, 0xFF	; 255
    24ac:	fe 01       	movw	r30, r28
    24ae:	e5 5b       	subi	r30, 0xB5	; 181
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	91 81       	ldd	r25, Z+1	; 0x01
    24b6:	8d 93       	st	X+, r24
    24b8:	9c 93       	st	X, r25
    24ba:	fe 01       	movw	r30, r28
    24bc:	e9 5b       	subi	r30, 0xB9	; 185
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	80 81       	ld	r24, Z
    24c2:	91 81       	ldd	r25, Z+1	; 0x01
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <LCD_sendCommand+0x30a>
    24c8:	fe 01       	movw	r30, r28
    24ca:	e9 5b       	subi	r30, 0xB9	; 185
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	91 83       	std	Z+1, r25	; 0x01
    24d0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    24d2:	a5 e3       	ldi	r26, 0x35	; 53
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e5 e3       	ldi	r30, 0x35	; 53
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	98 2f       	mov	r25, r24
    24de:	9f 70       	andi	r25, 0x0F	; 15
    24e0:	fe 01       	movw	r30, r28
    24e2:	ed 59       	subi	r30, 0x9D	; 157
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	80 7f       	andi	r24, 0xF0	; 240
    24ea:	89 2b       	or	r24, r25
    24ec:	8c 93       	st	X, r24
    24ee:	fe 01       	movw	r30, r28
    24f0:	ed 5b       	subi	r30, 0xBD	; 189
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a0 e8       	ldi	r26, 0x80	; 128
    24fa:	bf e3       	ldi	r27, 0x3F	; 63
    24fc:	80 83       	st	Z, r24
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	a2 83       	std	Z+2, r26	; 0x02
    2502:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2504:	8e 01       	movw	r16, r28
    2506:	01 5c       	subi	r16, 0xC1	; 193
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	fe 01       	movw	r30, r28
    250c:	ed 5b       	subi	r30, 0xBD	; 189
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a e7       	ldi	r20, 0x7A	; 122
    251e:	53 e4       	ldi	r21, 0x43	; 67
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	f8 01       	movw	r30, r16
    252a:	80 83       	st	Z, r24
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	a2 83       	std	Z+2, r26	; 0x02
    2530:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2532:	fe 01       	movw	r30, r28
    2534:	ff 96       	adiw	r30, 0x3f	; 63
    2536:	60 81       	ld	r22, Z
    2538:	71 81       	ldd	r23, Z+1	; 0x01
    253a:	82 81       	ldd	r24, Z+2	; 0x02
    253c:	93 81       	ldd	r25, Z+3	; 0x03
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e8       	ldi	r20, 0x80	; 128
    2544:	5f e3       	ldi	r21, 0x3F	; 63
    2546:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    254a:	88 23       	and	r24, r24
    254c:	2c f4       	brge	.+10     	; 0x2558 <LCD_sendCommand+0x39e>
		__ticks = 1;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9e af       	std	Y+62, r25	; 0x3e
    2554:	8d af       	std	Y+61, r24	; 0x3d
    2556:	46 c0       	rjmp	.+140    	; 0x25e4 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    2558:	fe 01       	movw	r30, r28
    255a:	ff 96       	adiw	r30, 0x3f	; 63
    255c:	60 81       	ld	r22, Z
    255e:	71 81       	ldd	r23, Z+1	; 0x01
    2560:	82 81       	ldd	r24, Z+2	; 0x02
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	3f ef       	ldi	r19, 0xFF	; 255
    2568:	4f e7       	ldi	r20, 0x7F	; 127
    256a:	57 e4       	ldi	r21, 0x47	; 71
    256c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2570:	18 16       	cp	r1, r24
    2572:	64 f5       	brge	.+88     	; 0x25cc <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2574:	fe 01       	movw	r30, r28
    2576:	ed 5b       	subi	r30, 0xBD	; 189
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	60 81       	ld	r22, Z
    257c:	71 81       	ldd	r23, Z+1	; 0x01
    257e:	82 81       	ldd	r24, Z+2	; 0x02
    2580:	93 81       	ldd	r25, Z+3	; 0x03
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	9e af       	std	Y+62, r25	; 0x3e
    25a0:	8d af       	std	Y+61, r24	; 0x3d
    25a2:	0f c0       	rjmp	.+30     	; 0x25c2 <LCD_sendCommand+0x408>
    25a4:	89 e1       	ldi	r24, 0x19	; 25
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9c af       	std	Y+60, r25	; 0x3c
    25aa:	8b af       	std	Y+59, r24	; 0x3b
    25ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    25ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <LCD_sendCommand+0x3f6>
    25b4:	9c af       	std	Y+60, r25	; 0x3c
    25b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    25ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	9e af       	std	Y+62, r25	; 0x3e
    25c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    25c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	69 f7       	brne	.-38     	; 0x25a4 <LCD_sendCommand+0x3ea>
    25ca:	16 c0       	rjmp	.+44     	; 0x25f8 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25cc:	fe 01       	movw	r30, r28
    25ce:	ff 96       	adiw	r30, 0x3f	; 63
    25d0:	60 81       	ld	r22, Z
    25d2:	71 81       	ldd	r23, Z+1	; 0x01
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	93 81       	ldd	r25, Z+3	; 0x03
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	9e af       	std	Y+62, r25	; 0x3e
    25e2:	8d af       	std	Y+61, r24	; 0x3d
    25e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25e8:	9a af       	std	Y+58, r25	; 0x3a
    25ea:	89 af       	std	Y+57, r24	; 0x39
    25ec:	89 ad       	ldd	r24, Y+57	; 0x39
    25ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <LCD_sendCommand+0x436>
    25f4:	9a af       	std	Y+58, r25	; 0x3a
    25f6:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    25f8:	a5 e3       	ldi	r26, 0x35	; 53
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e5 e3       	ldi	r30, 0x35	; 53
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	8b 7f       	andi	r24, 0xFB	; 251
    2604:	8c 93       	st	X, r24
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	a0 e8       	ldi	r26, 0x80	; 128
    260c:	bf e3       	ldi	r27, 0x3F	; 63
    260e:	8d ab       	std	Y+53, r24	; 0x35
    2610:	9e ab       	std	Y+54, r25	; 0x36
    2612:	af ab       	std	Y+55, r26	; 0x37
    2614:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2616:	6d a9       	ldd	r22, Y+53	; 0x35
    2618:	7e a9       	ldd	r23, Y+54	; 0x36
    261a:	8f a9       	ldd	r24, Y+55	; 0x37
    261c:	98 ad       	ldd	r25, Y+56	; 0x38
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a e7       	ldi	r20, 0x7A	; 122
    2624:	53 e4       	ldi	r21, 0x43	; 67
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	89 ab       	std	Y+49, r24	; 0x31
    2630:	9a ab       	std	Y+50, r25	; 0x32
    2632:	ab ab       	std	Y+51, r26	; 0x33
    2634:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2636:	69 a9       	ldd	r22, Y+49	; 0x31
    2638:	7a a9       	ldd	r23, Y+50	; 0x32
    263a:	8b a9       	ldd	r24, Y+51	; 0x33
    263c:	9c a9       	ldd	r25, Y+52	; 0x34
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	5f e3       	ldi	r21, 0x3F	; 63
    2646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264a:	88 23       	and	r24, r24
    264c:	2c f4       	brge	.+10     	; 0x2658 <LCD_sendCommand+0x49e>
		__ticks = 1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	98 ab       	std	Y+48, r25	; 0x30
    2654:	8f a7       	std	Y+47, r24	; 0x2f
    2656:	3f c0       	rjmp	.+126    	; 0x26d6 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    2658:	69 a9       	ldd	r22, Y+49	; 0x31
    265a:	7a a9       	ldd	r23, Y+50	; 0x32
    265c:	8b a9       	ldd	r24, Y+51	; 0x33
    265e:	9c a9       	ldd	r25, Y+52	; 0x34
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	3f ef       	ldi	r19, 0xFF	; 255
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	57 e4       	ldi	r21, 0x47	; 71
    2668:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    266c:	18 16       	cp	r1, r24
    266e:	4c f5       	brge	.+82     	; 0x26c2 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2670:	6d a9       	ldd	r22, Y+53	; 0x35
    2672:	7e a9       	ldd	r23, Y+54	; 0x36
    2674:	8f a9       	ldd	r24, Y+55	; 0x37
    2676:	98 ad       	ldd	r25, Y+56	; 0x38
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	98 ab       	std	Y+48, r25	; 0x30
    2696:	8f a7       	std	Y+47, r24	; 0x2f
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <LCD_sendCommand+0x4fe>
    269a:	89 e1       	ldi	r24, 0x19	; 25
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9e a7       	std	Y+46, r25	; 0x2e
    26a0:	8d a7       	std	Y+45, r24	; 0x2d
    26a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    26a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <LCD_sendCommand+0x4ec>
    26aa:	9e a7       	std	Y+46, r25	; 0x2e
    26ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b0:	98 a9       	ldd	r25, Y+48	; 0x30
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	98 ab       	std	Y+48, r25	; 0x30
    26b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ba:	98 a9       	ldd	r25, Y+48	; 0x30
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	69 f7       	brne	.-38     	; 0x269a <LCD_sendCommand+0x4e0>
    26c0:	14 c0       	rjmp	.+40     	; 0x26ea <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	69 a9       	ldd	r22, Y+49	; 0x31
    26c4:	7a a9       	ldd	r23, Y+50	; 0x32
    26c6:	8b a9       	ldd	r24, Y+51	; 0x33
    26c8:	9c a9       	ldd	r25, Y+52	; 0x34
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	98 ab       	std	Y+48, r25	; 0x30
    26d4:	8f a7       	std	Y+47, r24	; 0x2f
    26d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d8:	98 a9       	ldd	r25, Y+48	; 0x30
    26da:	9c a7       	std	Y+44, r25	; 0x2c
    26dc:	8b a7       	std	Y+43, r24	; 0x2b
    26de:	8b a5       	ldd	r24, Y+43	; 0x2b
    26e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <LCD_sendCommand+0x528>
    26e6:	9c a7       	std	Y+44, r25	; 0x2c
    26e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    26ea:	a5 e3       	ldi	r26, 0x35	; 53
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e5 e3       	ldi	r30, 0x35	; 53
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	84 60       	ori	r24, 0x04	; 4
    26f6:	8c 93       	st	X, r24
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	a0 e8       	ldi	r26, 0x80	; 128
    26fe:	bf e3       	ldi	r27, 0x3F	; 63
    2700:	8f a3       	std	Y+39, r24	; 0x27
    2702:	98 a7       	std	Y+40, r25	; 0x28
    2704:	a9 a7       	std	Y+41, r26	; 0x29
    2706:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2708:	6f a1       	ldd	r22, Y+39	; 0x27
    270a:	78 a5       	ldd	r23, Y+40	; 0x28
    270c:	89 a5       	ldd	r24, Y+41	; 0x29
    270e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	4a e7       	ldi	r20, 0x7A	; 122
    2716:	53 e4       	ldi	r21, 0x43	; 67
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	8b a3       	std	Y+35, r24	; 0x23
    2722:	9c a3       	std	Y+36, r25	; 0x24
    2724:	ad a3       	std	Y+37, r26	; 0x25
    2726:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2728:	6b a1       	ldd	r22, Y+35	; 0x23
    272a:	7c a1       	ldd	r23, Y+36	; 0x24
    272c:	8d a1       	ldd	r24, Y+37	; 0x25
    272e:	9e a1       	ldd	r25, Y+38	; 0x26
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e8       	ldi	r20, 0x80	; 128
    2736:	5f e3       	ldi	r21, 0x3F	; 63
    2738:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    273c:	88 23       	and	r24, r24
    273e:	2c f4       	brge	.+10     	; 0x274a <LCD_sendCommand+0x590>
		__ticks = 1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9a a3       	std	Y+34, r25	; 0x22
    2746:	89 a3       	std	Y+33, r24	; 0x21
    2748:	3f c0       	rjmp	.+126    	; 0x27c8 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    274a:	6b a1       	ldd	r22, Y+35	; 0x23
    274c:	7c a1       	ldd	r23, Y+36	; 0x24
    274e:	8d a1       	ldd	r24, Y+37	; 0x25
    2750:	9e a1       	ldd	r25, Y+38	; 0x26
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	3f ef       	ldi	r19, 0xFF	; 255
    2756:	4f e7       	ldi	r20, 0x7F	; 127
    2758:	57 e4       	ldi	r21, 0x47	; 71
    275a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    275e:	18 16       	cp	r1, r24
    2760:	4c f5       	brge	.+82     	; 0x27b4 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2762:	6f a1       	ldd	r22, Y+39	; 0x27
    2764:	78 a5       	ldd	r23, Y+40	; 0x28
    2766:	89 a5       	ldd	r24, Y+41	; 0x29
    2768:	9a a5       	ldd	r25, Y+42	; 0x2a
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e2       	ldi	r20, 0x20	; 32
    2770:	51 e4       	ldi	r21, 0x41	; 65
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	9a a3       	std	Y+34, r25	; 0x22
    2788:	89 a3       	std	Y+33, r24	; 0x21
    278a:	0f c0       	rjmp	.+30     	; 0x27aa <LCD_sendCommand+0x5f0>
    278c:	89 e1       	ldi	r24, 0x19	; 25
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	98 a3       	std	Y+32, r25	; 0x20
    2792:	8f 8f       	std	Y+31, r24	; 0x1f
    2794:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2796:	98 a1       	ldd	r25, Y+32	; 0x20
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <LCD_sendCommand+0x5de>
    279c:	98 a3       	std	Y+32, r25	; 0x20
    279e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a0:	89 a1       	ldd	r24, Y+33	; 0x21
    27a2:	9a a1       	ldd	r25, Y+34	; 0x22
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	9a a3       	std	Y+34, r25	; 0x22
    27a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27aa:	89 a1       	ldd	r24, Y+33	; 0x21
    27ac:	9a a1       	ldd	r25, Y+34	; 0x22
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	69 f7       	brne	.-38     	; 0x278c <LCD_sendCommand+0x5d2>
    27b2:	14 c0       	rjmp	.+40     	; 0x27dc <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b4:	6b a1       	ldd	r22, Y+35	; 0x23
    27b6:	7c a1       	ldd	r23, Y+36	; 0x24
    27b8:	8d a1       	ldd	r24, Y+37	; 0x25
    27ba:	9e a1       	ldd	r25, Y+38	; 0x26
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9a a3       	std	Y+34, r25	; 0x22
    27c6:	89 a3       	std	Y+33, r24	; 0x21
    27c8:	89 a1       	ldd	r24, Y+33	; 0x21
    27ca:	9a a1       	ldd	r25, Y+34	; 0x22
    27cc:	9e 8f       	std	Y+30, r25	; 0x1e
    27ce:	8d 8f       	std	Y+29, r24	; 0x1d
    27d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <LCD_sendCommand+0x61a>
    27d8:	9e 8f       	std	Y+30, r25	; 0x1e
    27da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    27dc:	a5 e3       	ldi	r26, 0x35	; 53
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e5 e3       	ldi	r30, 0x35	; 53
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	28 2f       	mov	r18, r24
    27e8:	2f 70       	andi	r18, 0x0F	; 15
    27ea:	fe 01       	movw	r30, r28
    27ec:	ed 59       	subi	r30, 0x9D	; 157
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 81       	ld	r24, Z
    27f2:	88 2f       	mov	r24, r24
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	82 95       	swap	r24
    27f8:	92 95       	swap	r25
    27fa:	90 7f       	andi	r25, 0xF0	; 240
    27fc:	98 27       	eor	r25, r24
    27fe:	80 7f       	andi	r24, 0xF0	; 240
    2800:	98 27       	eor	r25, r24
    2802:	82 2b       	or	r24, r18
    2804:	8c 93       	st	X, r24
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	a0 e8       	ldi	r26, 0x80	; 128
    280c:	bf e3       	ldi	r27, 0x3F	; 63
    280e:	89 8f       	std	Y+25, r24	; 0x19
    2810:	9a 8f       	std	Y+26, r25	; 0x1a
    2812:	ab 8f       	std	Y+27, r26	; 0x1b
    2814:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2816:	69 8d       	ldd	r22, Y+25	; 0x19
    2818:	7a 8d       	ldd	r23, Y+26	; 0x1a
    281a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    281c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	4a e7       	ldi	r20, 0x7A	; 122
    2824:	53 e4       	ldi	r21, 0x43	; 67
    2826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	8d 8b       	std	Y+21, r24	; 0x15
    2830:	9e 8b       	std	Y+22, r25	; 0x16
    2832:	af 8b       	std	Y+23, r26	; 0x17
    2834:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2836:	6d 89       	ldd	r22, Y+21	; 0x15
    2838:	7e 89       	ldd	r23, Y+22	; 0x16
    283a:	8f 89       	ldd	r24, Y+23	; 0x17
    283c:	98 8d       	ldd	r25, Y+24	; 0x18
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e8       	ldi	r20, 0x80	; 128
    2844:	5f e3       	ldi	r21, 0x3F	; 63
    2846:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    284a:	88 23       	and	r24, r24
    284c:	2c f4       	brge	.+10     	; 0x2858 <LCD_sendCommand+0x69e>
		__ticks = 1;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9c 8b       	std	Y+20, r25	; 0x14
    2854:	8b 8b       	std	Y+19, r24	; 0x13
    2856:	3f c0       	rjmp	.+126    	; 0x28d6 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    2858:	6d 89       	ldd	r22, Y+21	; 0x15
    285a:	7e 89       	ldd	r23, Y+22	; 0x16
    285c:	8f 89       	ldd	r24, Y+23	; 0x17
    285e:	98 8d       	ldd	r25, Y+24	; 0x18
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	3f ef       	ldi	r19, 0xFF	; 255
    2864:	4f e7       	ldi	r20, 0x7F	; 127
    2866:	57 e4       	ldi	r21, 0x47	; 71
    2868:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286c:	18 16       	cp	r1, r24
    286e:	4c f5       	brge	.+82     	; 0x28c2 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2870:	69 8d       	ldd	r22, Y+25	; 0x19
    2872:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9c 8b       	std	Y+20, r25	; 0x14
    2896:	8b 8b       	std	Y+19, r24	; 0x13
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <LCD_sendCommand+0x6fe>
    289a:	89 e1       	ldi	r24, 0x19	; 25
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9a 8b       	std	Y+18, r25	; 0x12
    28a0:	89 8b       	std	Y+17, r24	; 0x11
    28a2:	89 89       	ldd	r24, Y+17	; 0x11
    28a4:	9a 89       	ldd	r25, Y+18	; 0x12
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <LCD_sendCommand+0x6ec>
    28aa:	9a 8b       	std	Y+18, r25	; 0x12
    28ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	8b 89       	ldd	r24, Y+19	; 0x13
    28b0:	9c 89       	ldd	r25, Y+20	; 0x14
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	9c 8b       	std	Y+20, r25	; 0x14
    28b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ba:	9c 89       	ldd	r25, Y+20	; 0x14
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	69 f7       	brne	.-38     	; 0x289a <LCD_sendCommand+0x6e0>
    28c0:	14 c0       	rjmp	.+40     	; 0x28ea <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c2:	6d 89       	ldd	r22, Y+21	; 0x15
    28c4:	7e 89       	ldd	r23, Y+22	; 0x16
    28c6:	8f 89       	ldd	r24, Y+23	; 0x17
    28c8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	9c 8b       	std	Y+20, r25	; 0x14
    28d4:	8b 8b       	std	Y+19, r24	; 0x13
    28d6:	8b 89       	ldd	r24, Y+19	; 0x13
    28d8:	9c 89       	ldd	r25, Y+20	; 0x14
    28da:	98 8b       	std	Y+16, r25	; 0x10
    28dc:	8f 87       	std	Y+15, r24	; 0x0f
    28de:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e0:	98 89       	ldd	r25, Y+16	; 0x10
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <LCD_sendCommand+0x728>
    28e6:	98 8b       	std	Y+16, r25	; 0x10
    28e8:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    28ea:	a5 e3       	ldi	r26, 0x35	; 53
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e5 e3       	ldi	r30, 0x35	; 53
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	8b 7f       	andi	r24, 0xFB	; 251
    28f6:	8c 93       	st	X, r24
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 e8       	ldi	r26, 0x80	; 128
    28fe:	bf e3       	ldi	r27, 0x3F	; 63
    2900:	8b 87       	std	Y+11, r24	; 0x0b
    2902:	9c 87       	std	Y+12, r25	; 0x0c
    2904:	ad 87       	std	Y+13, r26	; 0x0d
    2906:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2908:	6b 85       	ldd	r22, Y+11	; 0x0b
    290a:	7c 85       	ldd	r23, Y+12	; 0x0c
    290c:	8d 85       	ldd	r24, Y+13	; 0x0d
    290e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	4a e7       	ldi	r20, 0x7A	; 122
    2916:	53 e4       	ldi	r21, 0x43	; 67
    2918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	8f 83       	std	Y+7, r24	; 0x07
    2922:	98 87       	std	Y+8, r25	; 0x08
    2924:	a9 87       	std	Y+9, r26	; 0x09
    2926:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2928:	6f 81       	ldd	r22, Y+7	; 0x07
    292a:	78 85       	ldd	r23, Y+8	; 0x08
    292c:	89 85       	ldd	r24, Y+9	; 0x09
    292e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e8       	ldi	r20, 0x80	; 128
    2936:	5f e3       	ldi	r21, 0x3F	; 63
    2938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    293c:	88 23       	and	r24, r24
    293e:	2c f4       	brge	.+10     	; 0x294a <LCD_sendCommand+0x790>
		__ticks = 1;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
    2948:	3f c0       	rjmp	.+126    	; 0x29c8 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    294a:	6f 81       	ldd	r22, Y+7	; 0x07
    294c:	78 85       	ldd	r23, Y+8	; 0x08
    294e:	89 85       	ldd	r24, Y+9	; 0x09
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	4f e7       	ldi	r20, 0x7F	; 127
    2958:	57 e4       	ldi	r21, 0x47	; 71
    295a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295e:	18 16       	cp	r1, r24
    2960:	4c f5       	brge	.+82     	; 0x29b4 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2962:	6b 85       	ldd	r22, Y+11	; 0x0b
    2964:	7c 85       	ldd	r23, Y+12	; 0x0c
    2966:	8d 85       	ldd	r24, Y+13	; 0x0d
    2968:	9e 85       	ldd	r25, Y+14	; 0x0e
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e2       	ldi	r20, 0x20	; 32
    2970:	51 e4       	ldi	r21, 0x41	; 65
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	9e 83       	std	Y+6, r25	; 0x06
    2988:	8d 83       	std	Y+5, r24	; 0x05
    298a:	0f c0       	rjmp	.+30     	; 0x29aa <LCD_sendCommand+0x7f0>
    298c:	89 e1       	ldi	r24, 0x19	; 25
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9c 83       	std	Y+4, r25	; 0x04
    2992:	8b 83       	std	Y+3, r24	; 0x03
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	9c 81       	ldd	r25, Y+4	; 0x04
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <LCD_sendCommand+0x7de>
    299c:	9c 83       	std	Y+4, r25	; 0x04
    299e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a0:	8d 81       	ldd	r24, Y+5	; 0x05
    29a2:	9e 81       	ldd	r25, Y+6	; 0x06
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	9e 83       	std	Y+6, r25	; 0x06
    29a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	9e 81       	ldd	r25, Y+6	; 0x06
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	69 f7       	brne	.-38     	; 0x298c <LCD_sendCommand+0x7d2>
    29b2:	14 c0       	rjmp	.+40     	; 0x29dc <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b4:	6f 81       	ldd	r22, Y+7	; 0x07
    29b6:	78 85       	ldd	r23, Y+8	; 0x08
    29b8:	89 85       	ldd	r24, Y+9	; 0x09
    29ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9e 83       	std	Y+6, r25	; 0x06
    29c6:	8d 83       	std	Y+5, r24	; 0x05
    29c8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ca:	9e 81       	ldd	r25, Y+6	; 0x06
    29cc:	9a 83       	std	Y+2, r25	; 0x02
    29ce:	89 83       	std	Y+1, r24	; 0x01
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	9a 81       	ldd	r25, Y+2	; 0x02
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <LCD_sendCommand+0x81a>
    29d8:	9a 83       	std	Y+2, r25	; 0x02
    29da:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    29dc:	cd 59       	subi	r28, 0x9D	; 157
    29de:	df 4f       	sbci	r29, 0xFF	; 255
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	08 95       	ret

000029f4 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	c3 56       	subi	r28, 0x63	; 99
    2a02:	d0 40       	sbci	r29, 0x00	; 0
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	fe 01       	movw	r30, r28
    2a10:	ed 59       	subi	r30, 0x9D	; 157
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2a16:	a5 e3       	ldi	r26, 0x35	; 53
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e5 e3       	ldi	r30, 0x35	; 53
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	81 60       	ori	r24, 0x01	; 1
    2a22:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2a24:	a5 e3       	ldi	r26, 0x35	; 53
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e5 e3       	ldi	r30, 0x35	; 53
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	8d 7f       	andi	r24, 0xFD	; 253
    2a30:	8c 93       	st	X, r24
    2a32:	fe 01       	movw	r30, r28
    2a34:	e1 5a       	subi	r30, 0xA1	; 161
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a0 e8       	ldi	r26, 0x80	; 128
    2a3e:	bf e3       	ldi	r27, 0x3F	; 63
    2a40:	80 83       	st	Z, r24
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	a2 83       	std	Z+2, r26	; 0x02
    2a46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a48:	8e 01       	movw	r16, r28
    2a4a:	05 5a       	subi	r16, 0xA5	; 165
    2a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e1 5a       	subi	r30, 0xA1	; 161
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	4a e7       	ldi	r20, 0x7A	; 122
    2a62:	53 e4       	ldi	r21, 0x43	; 67
    2a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	f8 01       	movw	r30, r16
    2a6e:	80 83       	st	Z, r24
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	a2 83       	std	Z+2, r26	; 0x02
    2a74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a76:	fe 01       	movw	r30, r28
    2a78:	e5 5a       	subi	r30, 0xA5	; 165
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	60 81       	ld	r22, Z
    2a7e:	71 81       	ldd	r23, Z+1	; 0x01
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	93 81       	ldd	r25, Z+3	; 0x03
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e8       	ldi	r20, 0x80	; 128
    2a8a:	5f e3       	ldi	r21, 0x3F	; 63
    2a8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a90:	88 23       	and	r24, r24
    2a92:	44 f4       	brge	.+16     	; 0x2aa4 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2a94:	fe 01       	movw	r30, r28
    2a96:	e7 5a       	subi	r30, 0xA7	; 167
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	91 83       	std	Z+1, r25	; 0x01
    2aa0:	80 83       	st	Z, r24
    2aa2:	64 c0       	rjmp	.+200    	; 0x2b6c <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e5 5a       	subi	r30, 0xA5	; 165
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	60 81       	ld	r22, Z
    2aac:	71 81       	ldd	r23, Z+1	; 0x01
    2aae:	82 81       	ldd	r24, Z+2	; 0x02
    2ab0:	93 81       	ldd	r25, Z+3	; 0x03
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	3f ef       	ldi	r19, 0xFF	; 255
    2ab6:	4f e7       	ldi	r20, 0x7F	; 127
    2ab8:	57 e4       	ldi	r21, 0x47	; 71
    2aba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2abe:	18 16       	cp	r1, r24
    2ac0:	0c f0       	brlt	.+2      	; 0x2ac4 <LCD_displayCharacter+0xd0>
    2ac2:	43 c0       	rjmp	.+134    	; 0x2b4a <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	e1 5a       	subi	r30, 0xA1	; 161
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	60 81       	ld	r22, Z
    2acc:	71 81       	ldd	r23, Z+1	; 0x01
    2ace:	82 81       	ldd	r24, Z+2	; 0x02
    2ad0:	93 81       	ldd	r25, Z+3	; 0x03
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e2       	ldi	r20, 0x20	; 32
    2ad8:	51 e4       	ldi	r21, 0x41	; 65
    2ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	07 5a       	subi	r16, 0xA7	; 167
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	f8 01       	movw	r30, r16
    2af6:	91 83       	std	Z+1, r25	; 0x01
    2af8:	80 83       	st	Z, r24
    2afa:	1f c0       	rjmp	.+62     	; 0x2b3a <LCD_displayCharacter+0x146>
    2afc:	fe 01       	movw	r30, r28
    2afe:	e9 5a       	subi	r30, 0xA9	; 169
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	89 e1       	ldi	r24, 0x19	; 25
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	91 83       	std	Z+1, r25	; 0x01
    2b08:	80 83       	st	Z, r24
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	e9 5a       	subi	r30, 0xA9	; 169
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	80 81       	ld	r24, Z
    2b12:	91 81       	ldd	r25, Z+1	; 0x01
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <LCD_displayCharacter+0x120>
    2b18:	fe 01       	movw	r30, r28
    2b1a:	e9 5a       	subi	r30, 0xA9	; 169
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	91 83       	std	Z+1, r25	; 0x01
    2b20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b22:	de 01       	movw	r26, r28
    2b24:	a7 5a       	subi	r26, 0xA7	; 167
    2b26:	bf 4f       	sbci	r27, 0xFF	; 255
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e7 5a       	subi	r30, 0xA7	; 167
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 81       	ld	r24, Z
    2b30:	91 81       	ldd	r25, Z+1	; 0x01
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	11 96       	adiw	r26, 0x01	; 1
    2b36:	9c 93       	st	X, r25
    2b38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e7 5a       	subi	r30, 0xA7	; 167
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	80 81       	ld	r24, Z
    2b42:	91 81       	ldd	r25, Z+1	; 0x01
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	d1 f6       	brne	.-76     	; 0x2afc <LCD_displayCharacter+0x108>
    2b48:	27 c0       	rjmp	.+78     	; 0x2b98 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4a:	8e 01       	movw	r16, r28
    2b4c:	07 5a       	subi	r16, 0xA7	; 167
    2b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b50:	fe 01       	movw	r30, r28
    2b52:	e5 5a       	subi	r30, 0xA5	; 165
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	60 81       	ld	r22, Z
    2b58:	71 81       	ldd	r23, Z+1	; 0x01
    2b5a:	82 81       	ldd	r24, Z+2	; 0x02
    2b5c:	93 81       	ldd	r25, Z+3	; 0x03
    2b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	f8 01       	movw	r30, r16
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	80 83       	st	Z, r24
    2b6c:	de 01       	movw	r26, r28
    2b6e:	ab 5a       	subi	r26, 0xAB	; 171
    2b70:	bf 4f       	sbci	r27, 0xFF	; 255
    2b72:	fe 01       	movw	r30, r28
    2b74:	e7 5a       	subi	r30, 0xA7	; 167
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	80 81       	ld	r24, Z
    2b7a:	91 81       	ldd	r25, Z+1	; 0x01
    2b7c:	8d 93       	st	X+, r24
    2b7e:	9c 93       	st	X, r25
    2b80:	fe 01       	movw	r30, r28
    2b82:	eb 5a       	subi	r30, 0xAB	; 171
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	80 81       	ld	r24, Z
    2b88:	91 81       	ldd	r25, Z+1	; 0x01
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	f1 f7       	brne	.-4      	; 0x2b8a <LCD_displayCharacter+0x196>
    2b8e:	fe 01       	movw	r30, r28
    2b90:	eb 5a       	subi	r30, 0xAB	; 171
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	91 83       	std	Z+1, r25	; 0x01
    2b96:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2b98:	a5 e3       	ldi	r26, 0x35	; 53
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	e5 e3       	ldi	r30, 0x35	; 53
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	84 60       	ori	r24, 0x04	; 4
    2ba4:	8c 93       	st	X, r24
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	ef 5a       	subi	r30, 0xAF	; 175
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a0 e8       	ldi	r26, 0x80	; 128
    2bb2:	bf e3       	ldi	r27, 0x3F	; 63
    2bb4:	80 83       	st	Z, r24
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	a2 83       	std	Z+2, r26	; 0x02
    2bba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	8e 01       	movw	r16, r28
    2bbe:	03 5b       	subi	r16, 0xB3	; 179
    2bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ef 5a       	subi	r30, 0xAF	; 175
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	4a e7       	ldi	r20, 0x7A	; 122
    2bd6:	53 e4       	ldi	r21, 0x43	; 67
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	f8 01       	movw	r30, r16
    2be2:	80 83       	st	Z, r24
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	a2 83       	std	Z+2, r26	; 0x02
    2be8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bea:	fe 01       	movw	r30, r28
    2bec:	e3 5b       	subi	r30, 0xB3	; 179
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e8       	ldi	r20, 0x80	; 128
    2bfe:	5f e3       	ldi	r21, 0x3F	; 63
    2c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c04:	88 23       	and	r24, r24
    2c06:	44 f4       	brge	.+16     	; 0x2c18 <LCD_displayCharacter+0x224>
		__ticks = 1;
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e5 5b       	subi	r30, 0xB5	; 181
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	80 83       	st	Z, r24
    2c16:	64 c0       	rjmp	.+200    	; 0x2ce0 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2c18:	fe 01       	movw	r30, r28
    2c1a:	e3 5b       	subi	r30, 0xB3	; 179
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	60 81       	ld	r22, Z
    2c20:	71 81       	ldd	r23, Z+1	; 0x01
    2c22:	82 81       	ldd	r24, Z+2	; 0x02
    2c24:	93 81       	ldd	r25, Z+3	; 0x03
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	3f ef       	ldi	r19, 0xFF	; 255
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	57 e4       	ldi	r21, 0x47	; 71
    2c2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	0c f0       	brlt	.+2      	; 0x2c38 <LCD_displayCharacter+0x244>
    2c36:	43 c0       	rjmp	.+134    	; 0x2cbe <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c38:	fe 01       	movw	r30, r28
    2c3a:	ef 5a       	subi	r30, 0xAF	; 175
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	60 81       	ld	r22, Z
    2c40:	71 81       	ldd	r23, Z+1	; 0x01
    2c42:	82 81       	ldd	r24, Z+2	; 0x02
    2c44:	93 81       	ldd	r25, Z+3	; 0x03
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e2       	ldi	r20, 0x20	; 32
    2c4c:	51 e4       	ldi	r21, 0x41	; 65
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	8e 01       	movw	r16, r28
    2c58:	05 5b       	subi	r16, 0xB5	; 181
    2c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	f8 01       	movw	r30, r16
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
    2c6e:	1f c0       	rjmp	.+62     	; 0x2cae <LCD_displayCharacter+0x2ba>
    2c70:	fe 01       	movw	r30, r28
    2c72:	e7 5b       	subi	r30, 0xB7	; 183
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	89 e1       	ldi	r24, 0x19	; 25
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	91 83       	std	Z+1, r25	; 0x01
    2c7c:	80 83       	st	Z, r24
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e7 5b       	subi	r30, 0xB7	; 183
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 81       	ld	r24, Z
    2c86:	91 81       	ldd	r25, Z+1	; 0x01
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <LCD_displayCharacter+0x294>
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e7 5b       	subi	r30, 0xB7	; 183
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c96:	de 01       	movw	r26, r28
    2c98:	a5 5b       	subi	r26, 0xB5	; 181
    2c9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e5 5b       	subi	r30, 0xB5	; 181
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	80 81       	ld	r24, Z
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	11 96       	adiw	r26, 0x01	; 1
    2caa:	9c 93       	st	X, r25
    2cac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e5 5b       	subi	r30, 0xB5	; 181
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	d1 f6       	brne	.-76     	; 0x2c70 <LCD_displayCharacter+0x27c>
    2cbc:	27 c0       	rjmp	.+78     	; 0x2d0c <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbe:	8e 01       	movw	r16, r28
    2cc0:	05 5b       	subi	r16, 0xB5	; 181
    2cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e3 5b       	subi	r30, 0xB3	; 179
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	60 81       	ld	r22, Z
    2ccc:	71 81       	ldd	r23, Z+1	; 0x01
    2cce:	82 81       	ldd	r24, Z+2	; 0x02
    2cd0:	93 81       	ldd	r25, Z+3	; 0x03
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	f8 01       	movw	r30, r16
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	80 83       	st	Z, r24
    2ce0:	de 01       	movw	r26, r28
    2ce2:	a9 5b       	subi	r26, 0xB9	; 185
    2ce4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	e5 5b       	subi	r30, 0xB5	; 181
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	80 81       	ld	r24, Z
    2cee:	91 81       	ldd	r25, Z+1	; 0x01
    2cf0:	8d 93       	st	X+, r24
    2cf2:	9c 93       	st	X, r25
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e9 5b       	subi	r30, 0xB9	; 185
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <LCD_displayCharacter+0x30a>
    2d02:	fe 01       	movw	r30, r28
    2d04:	e9 5b       	subi	r30, 0xB9	; 185
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    2d0c:	a5 e3       	ldi	r26, 0x35	; 53
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	e5 e3       	ldi	r30, 0x35	; 53
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	98 2f       	mov	r25, r24
    2d18:	9f 70       	andi	r25, 0x0F	; 15
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	ed 59       	subi	r30, 0x9D	; 157
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	80 81       	ld	r24, Z
    2d22:	80 7f       	andi	r24, 0xF0	; 240
    2d24:	89 2b       	or	r24, r25
    2d26:	8c 93       	st	X, r24
    2d28:	fe 01       	movw	r30, r28
    2d2a:	ed 5b       	subi	r30, 0xBD	; 189
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	a0 e8       	ldi	r26, 0x80	; 128
    2d34:	bf e3       	ldi	r27, 0x3F	; 63
    2d36:	80 83       	st	Z, r24
    2d38:	91 83       	std	Z+1, r25	; 0x01
    2d3a:	a2 83       	std	Z+2, r26	; 0x02
    2d3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3e:	8e 01       	movw	r16, r28
    2d40:	01 5c       	subi	r16, 0xC1	; 193
    2d42:	1f 4f       	sbci	r17, 0xFF	; 255
    2d44:	fe 01       	movw	r30, r28
    2d46:	ed 5b       	subi	r30, 0xBD	; 189
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	60 81       	ld	r22, Z
    2d4c:	71 81       	ldd	r23, Z+1	; 0x01
    2d4e:	82 81       	ldd	r24, Z+2	; 0x02
    2d50:	93 81       	ldd	r25, Z+3	; 0x03
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	4a e7       	ldi	r20, 0x7A	; 122
    2d58:	53 e4       	ldi	r21, 0x43	; 67
    2d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	f8 01       	movw	r30, r16
    2d64:	80 83       	st	Z, r24
    2d66:	91 83       	std	Z+1, r25	; 0x01
    2d68:	a2 83       	std	Z+2, r26	; 0x02
    2d6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	ff 96       	adiw	r30, 0x3f	; 63
    2d70:	60 81       	ld	r22, Z
    2d72:	71 81       	ldd	r23, Z+1	; 0x01
    2d74:	82 81       	ldd	r24, Z+2	; 0x02
    2d76:	93 81       	ldd	r25, Z+3	; 0x03
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	40 e8       	ldi	r20, 0x80	; 128
    2d7e:	5f e3       	ldi	r21, 0x3F	; 63
    2d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d84:	88 23       	and	r24, r24
    2d86:	2c f4       	brge	.+10     	; 0x2d92 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	9e af       	std	Y+62, r25	; 0x3e
    2d8e:	8d af       	std	Y+61, r24	; 0x3d
    2d90:	46 c0       	rjmp	.+140    	; 0x2e1e <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    2d92:	fe 01       	movw	r30, r28
    2d94:	ff 96       	adiw	r30, 0x3f	; 63
    2d96:	60 81       	ld	r22, Z
    2d98:	71 81       	ldd	r23, Z+1	; 0x01
    2d9a:	82 81       	ldd	r24, Z+2	; 0x02
    2d9c:	93 81       	ldd	r25, Z+3	; 0x03
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	3f ef       	ldi	r19, 0xFF	; 255
    2da2:	4f e7       	ldi	r20, 0x7F	; 127
    2da4:	57 e4       	ldi	r21, 0x47	; 71
    2da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2daa:	18 16       	cp	r1, r24
    2dac:	64 f5       	brge	.+88     	; 0x2e06 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dae:	fe 01       	movw	r30, r28
    2db0:	ed 5b       	subi	r30, 0xBD	; 189
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e2       	ldi	r20, 0x20	; 32
    2dc2:	51 e4       	ldi	r21, 0x41	; 65
    2dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e af       	std	Y+62, r25	; 0x3e
    2dda:	8d af       	std	Y+61, r24	; 0x3d
    2ddc:	0f c0       	rjmp	.+30     	; 0x2dfc <LCD_displayCharacter+0x408>
    2dde:	89 e1       	ldi	r24, 0x19	; 25
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9c af       	std	Y+60, r25	; 0x3c
    2de4:	8b af       	std	Y+59, r24	; 0x3b
    2de6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2de8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <LCD_displayCharacter+0x3f6>
    2dee:	9c af       	std	Y+60, r25	; 0x3c
    2df0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2df4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	9e af       	std	Y+62, r25	; 0x3e
    2dfa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	69 f7       	brne	.-38     	; 0x2dde <LCD_displayCharacter+0x3ea>
    2e04:	16 c0       	rjmp	.+44     	; 0x2e32 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e06:	fe 01       	movw	r30, r28
    2e08:	ff 96       	adiw	r30, 0x3f	; 63
    2e0a:	60 81       	ld	r22, Z
    2e0c:	71 81       	ldd	r23, Z+1	; 0x01
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	93 81       	ldd	r25, Z+3	; 0x03
    2e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	9e af       	std	Y+62, r25	; 0x3e
    2e1c:	8d af       	std	Y+61, r24	; 0x3d
    2e1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e20:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e22:	9a af       	std	Y+58, r25	; 0x3a
    2e24:	89 af       	std	Y+57, r24	; 0x39
    2e26:	89 ad       	ldd	r24, Y+57	; 0x39
    2e28:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <LCD_displayCharacter+0x436>
    2e2e:	9a af       	std	Y+58, r25	; 0x3a
    2e30:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2e32:	a5 e3       	ldi	r26, 0x35	; 53
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	e5 e3       	ldi	r30, 0x35	; 53
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	8b 7f       	andi	r24, 0xFB	; 251
    2e3e:	8c 93       	st	X, r24
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	a0 e8       	ldi	r26, 0x80	; 128
    2e46:	bf e3       	ldi	r27, 0x3F	; 63
    2e48:	8d ab       	std	Y+53, r24	; 0x35
    2e4a:	9e ab       	std	Y+54, r25	; 0x36
    2e4c:	af ab       	std	Y+55, r26	; 0x37
    2e4e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e50:	6d a9       	ldd	r22, Y+53	; 0x35
    2e52:	7e a9       	ldd	r23, Y+54	; 0x36
    2e54:	8f a9       	ldd	r24, Y+55	; 0x37
    2e56:	98 ad       	ldd	r25, Y+56	; 0x38
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	4a e7       	ldi	r20, 0x7A	; 122
    2e5e:	53 e4       	ldi	r21, 0x43	; 67
    2e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	89 ab       	std	Y+49, r24	; 0x31
    2e6a:	9a ab       	std	Y+50, r25	; 0x32
    2e6c:	ab ab       	std	Y+51, r26	; 0x33
    2e6e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e70:	69 a9       	ldd	r22, Y+49	; 0x31
    2e72:	7a a9       	ldd	r23, Y+50	; 0x32
    2e74:	8b a9       	ldd	r24, Y+51	; 0x33
    2e76:	9c a9       	ldd	r25, Y+52	; 0x34
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	40 e8       	ldi	r20, 0x80	; 128
    2e7e:	5f e3       	ldi	r21, 0x3F	; 63
    2e80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e84:	88 23       	and	r24, r24
    2e86:	2c f4       	brge	.+10     	; 0x2e92 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	98 ab       	std	Y+48, r25	; 0x30
    2e8e:	8f a7       	std	Y+47, r24	; 0x2f
    2e90:	3f c0       	rjmp	.+126    	; 0x2f10 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    2e92:	69 a9       	ldd	r22, Y+49	; 0x31
    2e94:	7a a9       	ldd	r23, Y+50	; 0x32
    2e96:	8b a9       	ldd	r24, Y+51	; 0x33
    2e98:	9c a9       	ldd	r25, Y+52	; 0x34
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	3f ef       	ldi	r19, 0xFF	; 255
    2e9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ea0:	57 e4       	ldi	r21, 0x47	; 71
    2ea2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ea6:	18 16       	cp	r1, r24
    2ea8:	4c f5       	brge	.+82     	; 0x2efc <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eaa:	6d a9       	ldd	r22, Y+53	; 0x35
    2eac:	7e a9       	ldd	r23, Y+54	; 0x36
    2eae:	8f a9       	ldd	r24, Y+55	; 0x37
    2eb0:	98 ad       	ldd	r25, Y+56	; 0x38
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e2       	ldi	r20, 0x20	; 32
    2eb8:	51 e4       	ldi	r21, 0x41	; 65
    2eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	bc 01       	movw	r22, r24
    2ec4:	cd 01       	movw	r24, r26
    2ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	98 ab       	std	Y+48, r25	; 0x30
    2ed0:	8f a7       	std	Y+47, r24	; 0x2f
    2ed2:	0f c0       	rjmp	.+30     	; 0x2ef2 <LCD_displayCharacter+0x4fe>
    2ed4:	89 e1       	ldi	r24, 0x19	; 25
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	9e a7       	std	Y+46, r25	; 0x2e
    2eda:	8d a7       	std	Y+45, r24	; 0x2d
    2edc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ede:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	f1 f7       	brne	.-4      	; 0x2ee0 <LCD_displayCharacter+0x4ec>
    2ee4:	9e a7       	std	Y+46, r25	; 0x2e
    2ee6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eea:	98 a9       	ldd	r25, Y+48	; 0x30
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	98 ab       	std	Y+48, r25	; 0x30
    2ef0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ef4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	69 f7       	brne	.-38     	; 0x2ed4 <LCD_displayCharacter+0x4e0>
    2efa:	14 c0       	rjmp	.+40     	; 0x2f24 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2efc:	69 a9       	ldd	r22, Y+49	; 0x31
    2efe:	7a a9       	ldd	r23, Y+50	; 0x32
    2f00:	8b a9       	ldd	r24, Y+51	; 0x33
    2f02:	9c a9       	ldd	r25, Y+52	; 0x34
    2f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	98 ab       	std	Y+48, r25	; 0x30
    2f0e:	8f a7       	std	Y+47, r24	; 0x2f
    2f10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f12:	98 a9       	ldd	r25, Y+48	; 0x30
    2f14:	9c a7       	std	Y+44, r25	; 0x2c
    2f16:	8b a7       	std	Y+43, r24	; 0x2b
    2f18:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	f1 f7       	brne	.-4      	; 0x2f1c <LCD_displayCharacter+0x528>
    2f20:	9c a7       	std	Y+44, r25	; 0x2c
    2f22:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2f24:	a5 e3       	ldi	r26, 0x35	; 53
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	e5 e3       	ldi	r30, 0x35	; 53
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	84 60       	ori	r24, 0x04	; 4
    2f30:	8c 93       	st	X, r24
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	a0 e8       	ldi	r26, 0x80	; 128
    2f38:	bf e3       	ldi	r27, 0x3F	; 63
    2f3a:	8f a3       	std	Y+39, r24	; 0x27
    2f3c:	98 a7       	std	Y+40, r25	; 0x28
    2f3e:	a9 a7       	std	Y+41, r26	; 0x29
    2f40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f42:	6f a1       	ldd	r22, Y+39	; 0x27
    2f44:	78 a5       	ldd	r23, Y+40	; 0x28
    2f46:	89 a5       	ldd	r24, Y+41	; 0x29
    2f48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	4a e7       	ldi	r20, 0x7A	; 122
    2f50:	53 e4       	ldi	r21, 0x43	; 67
    2f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	8b a3       	std	Y+35, r24	; 0x23
    2f5c:	9c a3       	std	Y+36, r25	; 0x24
    2f5e:	ad a3       	std	Y+37, r26	; 0x25
    2f60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f62:	6b a1       	ldd	r22, Y+35	; 0x23
    2f64:	7c a1       	ldd	r23, Y+36	; 0x24
    2f66:	8d a1       	ldd	r24, Y+37	; 0x25
    2f68:	9e a1       	ldd	r25, Y+38	; 0x26
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e8       	ldi	r20, 0x80	; 128
    2f70:	5f e3       	ldi	r21, 0x3F	; 63
    2f72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f76:	88 23       	and	r24, r24
    2f78:	2c f4       	brge	.+10     	; 0x2f84 <LCD_displayCharacter+0x590>
		__ticks = 1;
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	9a a3       	std	Y+34, r25	; 0x22
    2f80:	89 a3       	std	Y+33, r24	; 0x21
    2f82:	3f c0       	rjmp	.+126    	; 0x3002 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    2f84:	6b a1       	ldd	r22, Y+35	; 0x23
    2f86:	7c a1       	ldd	r23, Y+36	; 0x24
    2f88:	8d a1       	ldd	r24, Y+37	; 0x25
    2f8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	3f ef       	ldi	r19, 0xFF	; 255
    2f90:	4f e7       	ldi	r20, 0x7F	; 127
    2f92:	57 e4       	ldi	r21, 0x47	; 71
    2f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f98:	18 16       	cp	r1, r24
    2f9a:	4c f5       	brge	.+82     	; 0x2fee <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2fa0:	89 a5       	ldd	r24, Y+41	; 0x29
    2fa2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e2       	ldi	r20, 0x20	; 32
    2faa:	51 e4       	ldi	r21, 0x41	; 65
    2fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	bc 01       	movw	r22, r24
    2fb6:	cd 01       	movw	r24, r26
    2fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	9a a3       	std	Y+34, r25	; 0x22
    2fc2:	89 a3       	std	Y+33, r24	; 0x21
    2fc4:	0f c0       	rjmp	.+30     	; 0x2fe4 <LCD_displayCharacter+0x5f0>
    2fc6:	89 e1       	ldi	r24, 0x19	; 25
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	98 a3       	std	Y+32, r25	; 0x20
    2fcc:	8f 8f       	std	Y+31, r24	; 0x1f
    2fce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fd0:	98 a1       	ldd	r25, Y+32	; 0x20
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <LCD_displayCharacter+0x5de>
    2fd6:	98 a3       	std	Y+32, r25	; 0x20
    2fd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fda:	89 a1       	ldd	r24, Y+33	; 0x21
    2fdc:	9a a1       	ldd	r25, Y+34	; 0x22
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	9a a3       	std	Y+34, r25	; 0x22
    2fe2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fe6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	69 f7       	brne	.-38     	; 0x2fc6 <LCD_displayCharacter+0x5d2>
    2fec:	14 c0       	rjmp	.+40     	; 0x3016 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fee:	6b a1       	ldd	r22, Y+35	; 0x23
    2ff0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ff2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ff4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	9a a3       	std	Y+34, r25	; 0x22
    3000:	89 a3       	std	Y+33, r24	; 0x21
    3002:	89 a1       	ldd	r24, Y+33	; 0x21
    3004:	9a a1       	ldd	r25, Y+34	; 0x22
    3006:	9e 8f       	std	Y+30, r25	; 0x1e
    3008:	8d 8f       	std	Y+29, r24	; 0x1d
    300a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    300c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	f1 f7       	brne	.-4      	; 0x300e <LCD_displayCharacter+0x61a>
    3012:	9e 8f       	std	Y+30, r25	; 0x1e
    3014:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    3016:	a5 e3       	ldi	r26, 0x35	; 53
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	e5 e3       	ldi	r30, 0x35	; 53
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	28 2f       	mov	r18, r24
    3022:	2f 70       	andi	r18, 0x0F	; 15
    3024:	fe 01       	movw	r30, r28
    3026:	ed 59       	subi	r30, 0x9D	; 157
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	80 81       	ld	r24, Z
    302c:	88 2f       	mov	r24, r24
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	82 95       	swap	r24
    3032:	92 95       	swap	r25
    3034:	90 7f       	andi	r25, 0xF0	; 240
    3036:	98 27       	eor	r25, r24
    3038:	80 7f       	andi	r24, 0xF0	; 240
    303a:	98 27       	eor	r25, r24
    303c:	82 2b       	or	r24, r18
    303e:	8c 93       	st	X, r24
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	a0 e8       	ldi	r26, 0x80	; 128
    3046:	bf e3       	ldi	r27, 0x3F	; 63
    3048:	89 8f       	std	Y+25, r24	; 0x19
    304a:	9a 8f       	std	Y+26, r25	; 0x1a
    304c:	ab 8f       	std	Y+27, r26	; 0x1b
    304e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3050:	69 8d       	ldd	r22, Y+25	; 0x19
    3052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	4a e7       	ldi	r20, 0x7A	; 122
    305e:	53 e4       	ldi	r21, 0x43	; 67
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	8d 8b       	std	Y+21, r24	; 0x15
    306a:	9e 8b       	std	Y+22, r25	; 0x16
    306c:	af 8b       	std	Y+23, r26	; 0x17
    306e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3070:	6d 89       	ldd	r22, Y+21	; 0x15
    3072:	7e 89       	ldd	r23, Y+22	; 0x16
    3074:	8f 89       	ldd	r24, Y+23	; 0x17
    3076:	98 8d       	ldd	r25, Y+24	; 0x18
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e8       	ldi	r20, 0x80	; 128
    307e:	5f e3       	ldi	r21, 0x3F	; 63
    3080:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3084:	88 23       	and	r24, r24
    3086:	2c f4       	brge	.+10     	; 0x3092 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	9c 8b       	std	Y+20, r25	; 0x14
    308e:	8b 8b       	std	Y+19, r24	; 0x13
    3090:	3f c0       	rjmp	.+126    	; 0x3110 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    3092:	6d 89       	ldd	r22, Y+21	; 0x15
    3094:	7e 89       	ldd	r23, Y+22	; 0x16
    3096:	8f 89       	ldd	r24, Y+23	; 0x17
    3098:	98 8d       	ldd	r25, Y+24	; 0x18
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	3f ef       	ldi	r19, 0xFF	; 255
    309e:	4f e7       	ldi	r20, 0x7F	; 127
    30a0:	57 e4       	ldi	r21, 0x47	; 71
    30a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a6:	18 16       	cp	r1, r24
    30a8:	4c f5       	brge	.+82     	; 0x30fc <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30aa:	69 8d       	ldd	r22, Y+25	; 0x19
    30ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e2       	ldi	r20, 0x20	; 32
    30b8:	51 e4       	ldi	r21, 0x41	; 65
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	bc 01       	movw	r22, r24
    30c4:	cd 01       	movw	r24, r26
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9c 8b       	std	Y+20, r25	; 0x14
    30d0:	8b 8b       	std	Y+19, r24	; 0x13
    30d2:	0f c0       	rjmp	.+30     	; 0x30f2 <LCD_displayCharacter+0x6fe>
    30d4:	89 e1       	ldi	r24, 0x19	; 25
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	9a 8b       	std	Y+18, r25	; 0x12
    30da:	89 8b       	std	Y+17, r24	; 0x11
    30dc:	89 89       	ldd	r24, Y+17	; 0x11
    30de:	9a 89       	ldd	r25, Y+18	; 0x12
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <LCD_displayCharacter+0x6ec>
    30e4:	9a 8b       	std	Y+18, r25	; 0x12
    30e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ea:	9c 89       	ldd	r25, Y+20	; 0x14
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	9c 8b       	std	Y+20, r25	; 0x14
    30f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f2:	8b 89       	ldd	r24, Y+19	; 0x13
    30f4:	9c 89       	ldd	r25, Y+20	; 0x14
    30f6:	00 97       	sbiw	r24, 0x00	; 0
    30f8:	69 f7       	brne	.-38     	; 0x30d4 <LCD_displayCharacter+0x6e0>
    30fa:	14 c0       	rjmp	.+40     	; 0x3124 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fc:	6d 89       	ldd	r22, Y+21	; 0x15
    30fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3100:	8f 89       	ldd	r24, Y+23	; 0x17
    3102:	98 8d       	ldd	r25, Y+24	; 0x18
    3104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	9c 8b       	std	Y+20, r25	; 0x14
    310e:	8b 8b       	std	Y+19, r24	; 0x13
    3110:	8b 89       	ldd	r24, Y+19	; 0x13
    3112:	9c 89       	ldd	r25, Y+20	; 0x14
    3114:	98 8b       	std	Y+16, r25	; 0x10
    3116:	8f 87       	std	Y+15, r24	; 0x0f
    3118:	8f 85       	ldd	r24, Y+15	; 0x0f
    311a:	98 89       	ldd	r25, Y+16	; 0x10
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	f1 f7       	brne	.-4      	; 0x311c <LCD_displayCharacter+0x728>
    3120:	98 8b       	std	Y+16, r25	; 0x10
    3122:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    3124:	a5 e3       	ldi	r26, 0x35	; 53
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e5 e3       	ldi	r30, 0x35	; 53
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	8b 7f       	andi	r24, 0xFB	; 251
    3130:	8c 93       	st	X, r24
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	a0 e8       	ldi	r26, 0x80	; 128
    3138:	bf e3       	ldi	r27, 0x3F	; 63
    313a:	8b 87       	std	Y+11, r24	; 0x0b
    313c:	9c 87       	std	Y+12, r25	; 0x0c
    313e:	ad 87       	std	Y+13, r26	; 0x0d
    3140:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3142:	6b 85       	ldd	r22, Y+11	; 0x0b
    3144:	7c 85       	ldd	r23, Y+12	; 0x0c
    3146:	8d 85       	ldd	r24, Y+13	; 0x0d
    3148:	9e 85       	ldd	r25, Y+14	; 0x0e
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	4a e7       	ldi	r20, 0x7A	; 122
    3150:	53 e4       	ldi	r21, 0x43	; 67
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	8f 83       	std	Y+7, r24	; 0x07
    315c:	98 87       	std	Y+8, r25	; 0x08
    315e:	a9 87       	std	Y+9, r26	; 0x09
    3160:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3162:	6f 81       	ldd	r22, Y+7	; 0x07
    3164:	78 85       	ldd	r23, Y+8	; 0x08
    3166:	89 85       	ldd	r24, Y+9	; 0x09
    3168:	9a 85       	ldd	r25, Y+10	; 0x0a
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e8       	ldi	r20, 0x80	; 128
    3170:	5f e3       	ldi	r21, 0x3F	; 63
    3172:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3176:	88 23       	and	r24, r24
    3178:	2c f4       	brge	.+10     	; 0x3184 <LCD_displayCharacter+0x790>
		__ticks = 1;
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	9e 83       	std	Y+6, r25	; 0x06
    3180:	8d 83       	std	Y+5, r24	; 0x05
    3182:	3f c0       	rjmp	.+126    	; 0x3202 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    3184:	6f 81       	ldd	r22, Y+7	; 0x07
    3186:	78 85       	ldd	r23, Y+8	; 0x08
    3188:	89 85       	ldd	r24, Y+9	; 0x09
    318a:	9a 85       	ldd	r25, Y+10	; 0x0a
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	3f ef       	ldi	r19, 0xFF	; 255
    3190:	4f e7       	ldi	r20, 0x7F	; 127
    3192:	57 e4       	ldi	r21, 0x47	; 71
    3194:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3198:	18 16       	cp	r1, r24
    319a:	4c f5       	brge	.+82     	; 0x31ee <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319c:	6b 85       	ldd	r22, Y+11	; 0x0b
    319e:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e2       	ldi	r20, 0x20	; 32
    31aa:	51 e4       	ldi	r21, 0x41	; 65
    31ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	9e 83       	std	Y+6, r25	; 0x06
    31c2:	8d 83       	std	Y+5, r24	; 0x05
    31c4:	0f c0       	rjmp	.+30     	; 0x31e4 <LCD_displayCharacter+0x7f0>
    31c6:	89 e1       	ldi	r24, 0x19	; 25
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	9c 83       	std	Y+4, r25	; 0x04
    31cc:	8b 83       	std	Y+3, r24	; 0x03
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	9c 81       	ldd	r25, Y+4	; 0x04
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <LCD_displayCharacter+0x7de>
    31d6:	9c 83       	std	Y+4, r25	; 0x04
    31d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	9e 83       	std	Y+6, r25	; 0x06
    31e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e4:	8d 81       	ldd	r24, Y+5	; 0x05
    31e6:	9e 81       	ldd	r25, Y+6	; 0x06
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	69 f7       	brne	.-38     	; 0x31c6 <LCD_displayCharacter+0x7d2>
    31ec:	14 c0       	rjmp	.+40     	; 0x3216 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ee:	6f 81       	ldd	r22, Y+7	; 0x07
    31f0:	78 85       	ldd	r23, Y+8	; 0x08
    31f2:	89 85       	ldd	r24, Y+9	; 0x09
    31f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	9e 83       	std	Y+6, r25	; 0x06
    3200:	8d 83       	std	Y+5, r24	; 0x05
    3202:	8d 81       	ldd	r24, Y+5	; 0x05
    3204:	9e 81       	ldd	r25, Y+6	; 0x06
    3206:	9a 83       	std	Y+2, r25	; 0x02
    3208:	89 83       	std	Y+1, r24	; 0x01
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	9a 81       	ldd	r25, Y+2	; 0x02
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <LCD_displayCharacter+0x81a>
    3212:	9a 83       	std	Y+2, r25	; 0x02
    3214:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3216:	cd 59       	subi	r28, 0x9D	; 157
    3218:	df 4f       	sbci	r29, 0xFF	; 255
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	cf 91       	pop	r28
    3226:	df 91       	pop	r29
    3228:	1f 91       	pop	r17
    322a:	0f 91       	pop	r16
    322c:	08 95       	ret

0000322e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	00 d0       	rcall	.+0      	; 0x3234 <LCD_displayString+0x6>
    3234:	0f 92       	push	r0
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
    323a:	9b 83       	std	Y+3, r25	; 0x03
    323c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    323e:	19 82       	std	Y+1, r1	; 0x01
    3240:	0e c0       	rjmp	.+28     	; 0x325e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	28 2f       	mov	r18, r24
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	9b 81       	ldd	r25, Y+3	; 0x03
    324c:	fc 01       	movw	r30, r24
    324e:	e2 0f       	add	r30, r18
    3250:	f3 1f       	adc	r31, r19
    3252:	80 81       	ld	r24, Z
    3254:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <LCD_displayCharacter>
		i++;
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	8f 5f       	subi	r24, 0xFF	; 255
    325c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	28 2f       	mov	r18, r24
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	8a 81       	ldd	r24, Y+2	; 0x02
    3266:	9b 81       	ldd	r25, Y+3	; 0x03
    3268:	fc 01       	movw	r30, r24
    326a:	e2 0f       	add	r30, r18
    326c:	f3 1f       	adc	r31, r19
    326e:	80 81       	ld	r24, Z
    3270:	88 23       	and	r24, r24
    3272:	39 f7       	brne	.-50     	; 0x3242 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	cf 91       	pop	r28
    327c:	df 91       	pop	r29
    327e:	08 95       	ret

00003280 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    3280:	df 93       	push	r29
    3282:	cf 93       	push	r28
    3284:	00 d0       	rcall	.+0      	; 0x3286 <LCD_goToRowColumn+0x6>
    3286:	00 d0       	rcall	.+0      	; 0x3288 <LCD_goToRowColumn+0x8>
    3288:	0f 92       	push	r0
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	8a 83       	std	Y+2, r24	; 0x02
    3290:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    3292:	8a 81       	ldd	r24, Y+2	; 0x02
    3294:	28 2f       	mov	r18, r24
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	3d 83       	std	Y+5, r19	; 0x05
    329a:	2c 83       	std	Y+4, r18	; 0x04
    329c:	8c 81       	ldd	r24, Y+4	; 0x04
    329e:	9d 81       	ldd	r25, Y+5	; 0x05
    32a0:	81 30       	cpi	r24, 0x01	; 1
    32a2:	91 05       	cpc	r25, r1
    32a4:	c1 f0       	breq	.+48     	; 0x32d6 <LCD_goToRowColumn+0x56>
    32a6:	2c 81       	ldd	r18, Y+4	; 0x04
    32a8:	3d 81       	ldd	r19, Y+5	; 0x05
    32aa:	22 30       	cpi	r18, 0x02	; 2
    32ac:	31 05       	cpc	r19, r1
    32ae:	2c f4       	brge	.+10     	; 0x32ba <LCD_goToRowColumn+0x3a>
    32b0:	8c 81       	ldd	r24, Y+4	; 0x04
    32b2:	9d 81       	ldd	r25, Y+5	; 0x05
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	61 f0       	breq	.+24     	; 0x32d0 <LCD_goToRowColumn+0x50>
    32b8:	19 c0       	rjmp	.+50     	; 0x32ec <LCD_goToRowColumn+0x6c>
    32ba:	2c 81       	ldd	r18, Y+4	; 0x04
    32bc:	3d 81       	ldd	r19, Y+5	; 0x05
    32be:	22 30       	cpi	r18, 0x02	; 2
    32c0:	31 05       	cpc	r19, r1
    32c2:	69 f0       	breq	.+26     	; 0x32de <LCD_goToRowColumn+0x5e>
    32c4:	8c 81       	ldd	r24, Y+4	; 0x04
    32c6:	9d 81       	ldd	r25, Y+5	; 0x05
    32c8:	83 30       	cpi	r24, 0x03	; 3
    32ca:	91 05       	cpc	r25, r1
    32cc:	61 f0       	breq	.+24     	; 0x32e6 <LCD_goToRowColumn+0x66>
    32ce:	0e c0       	rjmp	.+28     	; 0x32ec <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	89 83       	std	Y+1, r24	; 0x01
    32d4:	0b c0       	rjmp	.+22     	; 0x32ec <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	80 5c       	subi	r24, 0xC0	; 192
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	07 c0       	rjmp	.+14     	; 0x32ec <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    32de:	8b 81       	ldd	r24, Y+3	; 0x03
    32e0:	80 5f       	subi	r24, 0xF0	; 240
    32e2:	89 83       	std	Y+1, r24	; 0x01
    32e4:	03 c0       	rjmp	.+6      	; 0x32ec <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	80 5b       	subi	r24, 0xB0	; 176
    32ea:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	80 68       	ori	r24, 0x80	; 128
    32f0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_sendCommand>
}
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	08 95       	ret

00003304 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	00 d0       	rcall	.+0      	; 0x330a <LCD_displayStringRowColumn+0x6>
    330a:	00 d0       	rcall	.+0      	; 0x330c <LCD_displayStringRowColumn+0x8>
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	89 83       	std	Y+1, r24	; 0x01
    3312:	6a 83       	std	Y+2, r22	; 0x02
    3314:	5c 83       	std	Y+4, r21	; 0x04
    3316:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	6a 81       	ldd	r22, Y+2	; 0x02
    331c:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    3320:	8b 81       	ldd	r24, Y+3	; 0x03
    3322:	9c 81       	ldd	r25, Y+4	; 0x04
    3324:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
}
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	cf 91       	pop	r28
    3332:	df 91       	pop	r29
    3334:	08 95       	ret

00003336 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    3336:	df 93       	push	r29
    3338:	cf 93       	push	r28
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    333e:	62 97       	sbiw	r28, 0x12	; 18
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
    334a:	9a 8b       	std	Y+18, r25	; 0x12
    334c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    334e:	89 89       	ldd	r24, Y+17	; 0x11
    3350:	9a 89       	ldd	r25, Y+18	; 0x12
    3352:	9e 01       	movw	r18, r28
    3354:	2f 5f       	subi	r18, 0xFF	; 255
    3356:	3f 4f       	sbci	r19, 0xFF	; 255
    3358:	b9 01       	movw	r22, r18
    335a:	4a e0       	ldi	r20, 0x0A	; 10
    335c:	50 e0       	ldi	r21, 0x00	; 0
    335e:	0e 94 4e 1b 	call	0x369c	; 0x369c <itoa>
   LCD_displayString(buff);
    3362:	ce 01       	movw	r24, r28
    3364:	01 96       	adiw	r24, 0x01	; 1
    3366:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
}
    336a:	62 96       	adiw	r28, 0x12	; 18
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_sendCommand>
}
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	08 95       	ret

00003390 <main>:
 *****************************************************************************************/

#include "device_Functions.h"
uint8 start;// variable to check whether the external eeprom is empty or not
int main()
{
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
    3398:	2e 97       	sbiw	r28, 0x0e	; 14
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	f8 94       	cli
    339e:	de bf       	out	0x3e, r29	; 62
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
    33a4:	af e5       	ldi	r26, 0x5F	; 95
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	ef e5       	ldi	r30, 0x5F	; 95
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	80 81       	ld	r24, Z
    33ae:	80 68       	ori	r24, 0x80	; 128
    33b0:	8c 93       	st	X, r24

	UART_init();
    33b2:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <UART_init>

	LCD_init();
    33b6:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_init>

	LCD_displayString("    HELLO ");
    33ba:	84 e2       	ldi	r24, 0x24	; 36
    33bc:	91 e0       	ldi	r25, 0x01	; 1
    33be:	0e 94 17 19 	call	0x322e	; 0x322e <LCD_displayString>
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	aa e7       	ldi	r26, 0x7A	; 122
    33c8:	b4 e4       	ldi	r27, 0x44	; 68
    33ca:	8b 87       	std	Y+11, r24	; 0x0b
    33cc:	9c 87       	std	Y+12, r25	; 0x0c
    33ce:	ad 87       	std	Y+13, r26	; 0x0d
    33d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	4a e7       	ldi	r20, 0x7A	; 122
    33e0:	53 e4       	ldi	r21, 0x43	; 67
    33e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	8f 83       	std	Y+7, r24	; 0x07
    33ec:	98 87       	std	Y+8, r25	; 0x08
    33ee:	a9 87       	std	Y+9, r26	; 0x09
    33f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33f2:	6f 81       	ldd	r22, Y+7	; 0x07
    33f4:	78 85       	ldd	r23, Y+8	; 0x08
    33f6:	89 85       	ldd	r24, Y+9	; 0x09
    33f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e8       	ldi	r20, 0x80	; 128
    3400:	5f e3       	ldi	r21, 0x3F	; 63
    3402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3406:	88 23       	and	r24, r24
    3408:	2c f4       	brge	.+10     	; 0x3414 <main+0x84>
		__ticks = 1;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	9e 83       	std	Y+6, r25	; 0x06
    3410:	8d 83       	std	Y+5, r24	; 0x05
    3412:	3f c0       	rjmp	.+126    	; 0x3492 <main+0x102>
	else if (__tmp > 65535)
    3414:	6f 81       	ldd	r22, Y+7	; 0x07
    3416:	78 85       	ldd	r23, Y+8	; 0x08
    3418:	89 85       	ldd	r24, Y+9	; 0x09
    341a:	9a 85       	ldd	r25, Y+10	; 0x0a
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	3f ef       	ldi	r19, 0xFF	; 255
    3420:	4f e7       	ldi	r20, 0x7F	; 127
    3422:	57 e4       	ldi	r21, 0x47	; 71
    3424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3428:	18 16       	cp	r1, r24
    342a:	4c f5       	brge	.+82     	; 0x347e <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342c:	6b 85       	ldd	r22, Y+11	; 0x0b
    342e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3430:	8d 85       	ldd	r24, Y+13	; 0x0d
    3432:	9e 85       	ldd	r25, Y+14	; 0x0e
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e2       	ldi	r20, 0x20	; 32
    343a:	51 e4       	ldi	r21, 0x41	; 65
    343c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	bc 01       	movw	r22, r24
    3446:	cd 01       	movw	r24, r26
    3448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	9e 83       	std	Y+6, r25	; 0x06
    3452:	8d 83       	std	Y+5, r24	; 0x05
    3454:	0f c0       	rjmp	.+30     	; 0x3474 <main+0xe4>
    3456:	89 e1       	ldi	r24, 0x19	; 25
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	9c 83       	std	Y+4, r25	; 0x04
    345c:	8b 83       	std	Y+3, r24	; 0x03
    345e:	8b 81       	ldd	r24, Y+3	; 0x03
    3460:	9c 81       	ldd	r25, Y+4	; 0x04
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <main+0xd2>
    3466:	9c 83       	std	Y+4, r25	; 0x04
    3468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346a:	8d 81       	ldd	r24, Y+5	; 0x05
    346c:	9e 81       	ldd	r25, Y+6	; 0x06
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	00 97       	sbiw	r24, 0x00	; 0
    347a:	69 f7       	brne	.-38     	; 0x3456 <main+0xc6>
    347c:	14 c0       	rjmp	.+40     	; 0x34a6 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347e:	6f 81       	ldd	r22, Y+7	; 0x07
    3480:	78 85       	ldd	r23, Y+8	; 0x08
    3482:	89 85       	ldd	r24, Y+9	; 0x09
    3484:	9a 85       	ldd	r25, Y+10	; 0x0a
    3486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	9e 83       	std	Y+6, r25	; 0x06
    3490:	8d 83       	std	Y+5, r24	; 0x05
    3492:	8d 81       	ldd	r24, Y+5	; 0x05
    3494:	9e 81       	ldd	r25, Y+6	; 0x06
    3496:	9a 83       	std	Y+2, r25	; 0x02
    3498:	89 83       	std	Y+1, r24	; 0x01
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	9a 81       	ldd	r25, Y+2	; 0x02
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <main+0x10e>
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	while(1){

		while((UART_recieveByte()!=READY));
    34a6:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    34aa:	80 31       	cpi	r24, 0x10	; 16
    34ac:	e1 f7       	brne	.-8      	; 0x34a6 <main+0x116>
		start=UART_recieveByte();
    34ae:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    34b2:	80 93 38 01 	sts	0x0138, r24
		LCD_clearScreen();
    34b6:	0e 94 be 19 	call	0x337c	; 0x337c <LCD_clearScreen>


		if(start==first_time){
    34ba:	80 91 38 01 	lds	r24, 0x0138
    34be:	81 30       	cpi	r24, 0x01	; 1
    34c0:	19 f4       	brne	.+6      	; 0x34c8 <main+0x138>

			FirstTrial();//function to store the password and to confirm it
    34c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <FirstTrial>
    34c6:	ef cf       	rjmp	.-34     	; 0x34a6 <main+0x116>
		}

		else if(start==repeated){
    34c8:	80 91 38 01 	lds	r24, 0x0138
    34cc:	82 30       	cpi	r24, 0x02	; 2
    34ce:	59 f7       	brne	.-42     	; 0x34a6 <main+0x116>


					options();//function to display the options and check the password
    34d0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <options>
    34d4:	e8 cf       	rjmp	.-48     	; 0x34a6 <main+0x116>

000034d6 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    34d6:	df 93       	push	r29
    34d8:	cf 93       	push	r28
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    34de:	eb e2       	ldi	r30, 0x2B	; 43
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	82 e0       	ldi	r24, 0x02	; 2
    34e4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    34e6:	ea e2       	ldi	r30, 0x2A	; 42
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	88 e1       	ldi	r24, 0x18	; 24
    34ec:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    34ee:	e0 e4       	ldi	r30, 0x40	; 64
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	86 e8       	ldi	r24, 0x86	; 134
    34f4:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    34f6:	e0 e4       	ldi	r30, 0x40	; 64
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    34fc:	e9 e2       	ldi	r30, 0x29	; 41
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	8c e0       	ldi	r24, 0x0C	; 12
    3502:	80 83       	st	Z, r24
}
    3504:	cf 91       	pop	r28
    3506:	df 91       	pop	r29
    3508:	08 95       	ret

0000350a <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    350a:	df 93       	push	r29
    350c:	cf 93       	push	r28
    350e:	0f 92       	push	r0
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    3514:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3516:	eb e2       	ldi	r30, 0x2B	; 43
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	88 2f       	mov	r24, r24
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	80 72       	andi	r24, 0x20	; 32
    3522:	90 70       	andi	r25, 0x00	; 0
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	b9 f3       	breq	.-18     	; 0x3516 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    3528:	ec e2       	ldi	r30, 0x2C	; 44
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    3530:	0f 90       	pop	r0
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	08 95       	ret

00003538 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3540:	eb e2       	ldi	r30, 0x2B	; 43
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	80 81       	ld	r24, Z
    3546:	88 23       	and	r24, r24
    3548:	dc f7       	brge	.-10     	; 0x3540 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    354a:	ec e2       	ldi	r30, 0x2C	; 44
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
}
    3550:	cf 91       	pop	r28
    3552:	df 91       	pop	r29
    3554:	08 95       	ret

00003556 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    3556:	df 93       	push	r29
    3558:	cf 93       	push	r28
    355a:	00 d0       	rcall	.+0      	; 0x355c <UART_sendString+0x6>
    355c:	0f 92       	push	r0
    355e:	cd b7       	in	r28, 0x3d	; 61
    3560:	de b7       	in	r29, 0x3e	; 62
    3562:	9b 83       	std	Y+3, r25	; 0x03
    3564:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3566:	19 82       	std	Y+1, r1	; 0x01
    3568:	0e c0       	rjmp	.+28     	; 0x3586 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	28 2f       	mov	r18, r24
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	8a 81       	ldd	r24, Y+2	; 0x02
    3572:	9b 81       	ldd	r25, Y+3	; 0x03
    3574:	fc 01       	movw	r30, r24
    3576:	e2 0f       	add	r30, r18
    3578:	f3 1f       	adc	r31, r19
    357a:	80 81       	ld	r24, Z
    357c:	0e 94 85 1a 	call	0x350a	; 0x350a <UART_sendByte>
		i++;
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3586:	89 81       	ldd	r24, Y+1	; 0x01
    3588:	28 2f       	mov	r18, r24
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	8a 81       	ldd	r24, Y+2	; 0x02
    358e:	9b 81       	ldd	r25, Y+3	; 0x03
    3590:	fc 01       	movw	r30, r24
    3592:	e2 0f       	add	r30, r18
    3594:	f3 1f       	adc	r31, r19
    3596:	80 81       	ld	r24, Z
    3598:	88 23       	and	r24, r24
    359a:	39 f7       	brne	.-50     	; 0x356a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    35a8:	0f 93       	push	r16
    35aa:	1f 93       	push	r17
    35ac:	df 93       	push	r29
    35ae:	cf 93       	push	r28
    35b0:	00 d0       	rcall	.+0      	; 0x35b2 <UART_receiveString+0xa>
    35b2:	0f 92       	push	r0
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    35b8:	9b 83       	std	Y+3, r25	; 0x03
    35ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35bc:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	28 2f       	mov	r18, r24
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	8a 81       	ldd	r24, Y+2	; 0x02
    35c6:	9b 81       	ldd	r25, Y+3	; 0x03
    35c8:	8c 01       	movw	r16, r24
    35ca:	02 0f       	add	r16, r18
    35cc:	13 1f       	adc	r17, r19
    35ce:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    35d2:	f8 01       	movw	r30, r16
    35d4:	80 83       	st	Z, r24
    35d6:	0f c0       	rjmp	.+30     	; 0x35f6 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	8f 5f       	subi	r24, 0xFF	; 255
    35dc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	8a 81       	ldd	r24, Y+2	; 0x02
    35e6:	9b 81       	ldd	r25, Y+3	; 0x03
    35e8:	8c 01       	movw	r16, r24
    35ea:	02 0f       	add	r16, r18
    35ec:	13 1f       	adc	r17, r19
    35ee:	0e 94 9c 1a 	call	0x3538	; 0x3538 <UART_recieveByte>
    35f2:	f8 01       	movw	r30, r16
    35f4:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	28 2f       	mov	r18, r24
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	8a 81       	ldd	r24, Y+2	; 0x02
    35fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3600:	fc 01       	movw	r30, r24
    3602:	e2 0f       	add	r30, r18
    3604:	f3 1f       	adc	r31, r19
    3606:	80 81       	ld	r24, Z
    3608:	83 32       	cpi	r24, 0x23	; 35
    360a:	31 f7       	brne	.-52     	; 0x35d8 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	28 2f       	mov	r18, r24
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	8a 81       	ldd	r24, Y+2	; 0x02
    3614:	9b 81       	ldd	r25, Y+3	; 0x03
    3616:	fc 01       	movw	r30, r24
    3618:	e2 0f       	add	r30, r18
    361a:	f3 1f       	adc	r31, r19
    361c:	10 82       	st	Z, r1
}
    361e:	0f 90       	pop	r0
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	cf 91       	pop	r28
    3626:	df 91       	pop	r29
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    362c:	08 95       	ret

0000362e <__prologue_saves__>:
    362e:	2f 92       	push	r2
    3630:	3f 92       	push	r3
    3632:	4f 92       	push	r4
    3634:	5f 92       	push	r5
    3636:	6f 92       	push	r6
    3638:	7f 92       	push	r7
    363a:	8f 92       	push	r8
    363c:	9f 92       	push	r9
    363e:	af 92       	push	r10
    3640:	bf 92       	push	r11
    3642:	cf 92       	push	r12
    3644:	df 92       	push	r13
    3646:	ef 92       	push	r14
    3648:	ff 92       	push	r15
    364a:	0f 93       	push	r16
    364c:	1f 93       	push	r17
    364e:	cf 93       	push	r28
    3650:	df 93       	push	r29
    3652:	cd b7       	in	r28, 0x3d	; 61
    3654:	de b7       	in	r29, 0x3e	; 62
    3656:	ca 1b       	sub	r28, r26
    3658:	db 0b       	sbc	r29, r27
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	09 94       	ijmp

00003666 <__epilogue_restores__>:
    3666:	2a 88       	ldd	r2, Y+18	; 0x12
    3668:	39 88       	ldd	r3, Y+17	; 0x11
    366a:	48 88       	ldd	r4, Y+16	; 0x10
    366c:	5f 84       	ldd	r5, Y+15	; 0x0f
    366e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3670:	7d 84       	ldd	r7, Y+13	; 0x0d
    3672:	8c 84       	ldd	r8, Y+12	; 0x0c
    3674:	9b 84       	ldd	r9, Y+11	; 0x0b
    3676:	aa 84       	ldd	r10, Y+10	; 0x0a
    3678:	b9 84       	ldd	r11, Y+9	; 0x09
    367a:	c8 84       	ldd	r12, Y+8	; 0x08
    367c:	df 80       	ldd	r13, Y+7	; 0x07
    367e:	ee 80       	ldd	r14, Y+6	; 0x06
    3680:	fd 80       	ldd	r15, Y+5	; 0x05
    3682:	0c 81       	ldd	r16, Y+4	; 0x04
    3684:	1b 81       	ldd	r17, Y+3	; 0x03
    3686:	aa 81       	ldd	r26, Y+2	; 0x02
    3688:	b9 81       	ldd	r27, Y+1	; 0x01
    368a:	ce 0f       	add	r28, r30
    368c:	d1 1d       	adc	r29, r1
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	ed 01       	movw	r28, r26
    369a:	08 95       	ret

0000369c <itoa>:
    369c:	fb 01       	movw	r30, r22
    369e:	9f 01       	movw	r18, r30
    36a0:	e8 94       	clt
    36a2:	42 30       	cpi	r20, 0x02	; 2
    36a4:	c4 f0       	brlt	.+48     	; 0x36d6 <itoa+0x3a>
    36a6:	45 32       	cpi	r20, 0x25	; 37
    36a8:	b4 f4       	brge	.+44     	; 0x36d6 <itoa+0x3a>
    36aa:	4a 30       	cpi	r20, 0x0A	; 10
    36ac:	29 f4       	brne	.+10     	; 0x36b8 <itoa+0x1c>
    36ae:	97 fb       	bst	r25, 7
    36b0:	1e f4       	brtc	.+6      	; 0x36b8 <itoa+0x1c>
    36b2:	90 95       	com	r25
    36b4:	81 95       	neg	r24
    36b6:	9f 4f       	sbci	r25, 0xFF	; 255
    36b8:	64 2f       	mov	r22, r20
    36ba:	77 27       	eor	r23, r23
    36bc:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__udivmodhi4>
    36c0:	80 5d       	subi	r24, 0xD0	; 208
    36c2:	8a 33       	cpi	r24, 0x3A	; 58
    36c4:	0c f0       	brlt	.+2      	; 0x36c8 <itoa+0x2c>
    36c6:	89 5d       	subi	r24, 0xD9	; 217
    36c8:	81 93       	st	Z+, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	00 97       	sbiw	r24, 0x00	; 0
    36ce:	a1 f7       	brne	.-24     	; 0x36b8 <itoa+0x1c>
    36d0:	16 f4       	brtc	.+4      	; 0x36d6 <itoa+0x3a>
    36d2:	5d e2       	ldi	r21, 0x2D	; 45
    36d4:	51 93       	st	Z+, r21
    36d6:	10 82       	st	Z, r1
    36d8:	c9 01       	movw	r24, r18
    36da:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <strrev>

000036de <strrev>:
    36de:	dc 01       	movw	r26, r24
    36e0:	fc 01       	movw	r30, r24
    36e2:	67 2f       	mov	r22, r23
    36e4:	71 91       	ld	r23, Z+
    36e6:	77 23       	and	r23, r23
    36e8:	e1 f7       	brne	.-8      	; 0x36e2 <strrev+0x4>
    36ea:	32 97       	sbiw	r30, 0x02	; 2
    36ec:	04 c0       	rjmp	.+8      	; 0x36f6 <strrev+0x18>
    36ee:	7c 91       	ld	r23, X
    36f0:	6d 93       	st	X+, r22
    36f2:	70 83       	st	Z, r23
    36f4:	62 91       	ld	r22, -Z
    36f6:	ae 17       	cp	r26, r30
    36f8:	bf 07       	cpc	r27, r31
    36fa:	c8 f3       	brcs	.-14     	; 0x36ee <strrev+0x10>
    36fc:	08 95       	ret

000036fe <__udivmodhi4>:
    36fe:	aa 1b       	sub	r26, r26
    3700:	bb 1b       	sub	r27, r27
    3702:	51 e1       	ldi	r21, 0x11	; 17
    3704:	07 c0       	rjmp	.+14     	; 0x3714 <__udivmodhi4_ep>

00003706 <__udivmodhi4_loop>:
    3706:	aa 1f       	adc	r26, r26
    3708:	bb 1f       	adc	r27, r27
    370a:	a6 17       	cp	r26, r22
    370c:	b7 07       	cpc	r27, r23
    370e:	10 f0       	brcs	.+4      	; 0x3714 <__udivmodhi4_ep>
    3710:	a6 1b       	sub	r26, r22
    3712:	b7 0b       	sbc	r27, r23

00003714 <__udivmodhi4_ep>:
    3714:	88 1f       	adc	r24, r24
    3716:	99 1f       	adc	r25, r25
    3718:	5a 95       	dec	r21
    371a:	a9 f7       	brne	.-22     	; 0x3706 <__udivmodhi4_loop>
    371c:	80 95       	com	r24
    371e:	90 95       	com	r25
    3720:	bc 01       	movw	r22, r24
    3722:	cd 01       	movw	r24, r26
    3724:	08 95       	ret

00003726 <_exit>:
    3726:	f8 94       	cli

00003728 <__stop_program>:
    3728:	ff cf       	rjmp	.-2      	; 0x3728 <__stop_program>
